// https://github.com/sfaqer/onec-fluent

#Область СлужебныеПроцедурыИФункции

#Область СтандартныеФункцииОбработки

Процедура ФункцияСравнения(РезультатСортировки, ДополнительныеПараметры) Экспорт
	
	Элемент1 = ДополнительныеПараметры.Элемент1;
	Элемент2 = ДополнительныеПараметры.Элемент2;
	
	Если Элемент1 = Элемент2 Тогда
		РезультатСортировки = 0;
	ИначеЕсли Элемент1 > Элемент2 Тогда
		РезультатСортировки = 1;
	Иначе
		РезультатСортировки = -1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФункцияОбработки_Сообщить(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	//@skip-check use-non-recommended-method
	Сообщить(Элемент);
	
КонецПроцедуры

#КонецОбласти

Процедура УстановитьКоллекцию(Коллекция, КэшКолонок, НоваяКоллекция, ОбновлятьКэшКолонок = Истина) Экспорт
	
	Коллекция = Новый Массив;
	
	Для Каждого ЭлементНовойКоллекции Из НоваяКоллекция Цикл
		Коллекция.Добавить(ЭлементНовойКоллекции);
	КонецЦикла;

	Если НЕ ОбновлятьКэшКолонок Тогда
		Возврат;
	КонецЕсли;
	
	КэшКолонок = Новый Массив;

	ЕстьРеквизитКолонки = Истина;
	Попытка
		Колонки = НоваяКоллекция.Колонки;
	Исключение
		ЕстьРеквизитКолонки = Ложь;
	Конецпопытки;

	Если ЕстьРеквизитКолонки Тогда
		Для Каждого Колонка Из НоваяКоллекция.Колонки Цикл
			КэшКолонок.Добавить(Колонка);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#Область КонвеерныеМетоды

Процедура Первые(Конвейер, Количество) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Количество", Количество);
	
	ПоложитьЯчейкуВКонвейер(Конвейер, "Первые", , ДополнительныеПараметры);
	
КонецПроцедуры

Процедура Пропустить(Конвейер, Количество) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Количество", Количество);
	
	ПоложитьЯчейкуВКонвейер(Конвейер, "Пропустить", , ДополнительныеПараметры);
	
КонецПроцедуры

Процедура Различные(
	Конвейер,
	Знач ФункцияСравнения = Неопределено,
	Знач ДополнительныеПараметры = Неопределено) Экспорт

	Если ФункцияСравнения = Неопределено Тогда
		ФункцияСравнения = бф_ПроцессорыКоллекций.СтандартнаяФункцияСравнения();
	Иначе
		Если ТипЗнч(ФункцияСравнения) = Тип("Строка") Тогда
			ФункцияСравнения = СформироватьВременноеОписаниеОповещения(ФункцияСравнения, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	ДополнитьСтруктуру(ФункцияСравнения.ДополнительныеПараметры, ДополнительныеПараметры, Истина);

	ПоложитьЯчейкуВКонвейер(Конвейер, "Различные", ФункцияСравнения);
	
КонецПроцедуры

Процедура Обработать(Конвейер, Знач ФункцияОбработки, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ФункцияОбработки) = Тип("Строка") Тогда
		ФункцияОбработки = СформироватьВременноеОписаниеОповещения(ФункцияОбработки, ДополнительныеПараметры);
	КонецЕсли;
	ДополнитьСтруктуру(ФункцияОбработки.ДополнительныеПараметры, ДополнительныеПараметры, Истина);
	
	ПоложитьЯчейкуВКонвейер(Конвейер, "Обработать", ФункцияОбработки);

КонецПроцедуры

Процедура Развернуть(Конвейер, Знач ФункцияРазворачивания, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ФункцияРазворачивания) = Тип("Строка") Тогда
		ФункцияРазворачивания = СформироватьВременноеОписаниеОповещения(ФункцияРазворачивания, ДополнительныеПараметры);
	КонецЕсли;
	ДополнитьСтруктуру(ФункцияРазворачивания.ДополнительныеПараметры, ДополнительныеПараметры, Истина);
	
	ПоложитьЯчейкуВКонвейер(Конвейер, "Развернуть", ФункцияРазворачивания);

КонецПроцедуры

Процедура Фильтровать(Конвейер, Знач ФункцияФильтрации, Знач ДополнительныеПараметры = Неопределено) Экспорт
		
	Если ТипЗнч(ФункцияФильтрации) = Тип("Строка") Тогда
		ФункцияФильтрации = СформироватьВременноеОписаниеОповещения(ФункцияФильтрации, ДополнительныеПараметры);
	КонецЕсли;
	ДополнитьСтруктуру(ФункцияФильтрации.ДополнительныеПараметры, ДополнительныеПараметры, Истина);
	
	ПоложитьЯчейкуВКонвейер(Конвейер, "Фильтровать", ФункцияФильтрации);

КонецПроцедуры

Процедура Сортировать(
	Конвейер,
	Знач ФункцияСравнения = Неопределено,
	Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ФункцияСравнения = Неопределено Тогда
		ФункцияСравнения = бф_ПроцессорыКоллекций.СтандартнаяФункцияСравнения();
	Иначе
		Если ТипЗнч(ФункцияСравнения) = Тип("Строка") Тогда
			ФункцияСравнения = СформироватьВременноеОписаниеОповещения(ФункцияСравнения, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	ДополнитьСтруктуру(ФункцияСравнения.ДополнительныеПараметры, ДополнительныеПараметры, Истина);
	
	ПоложитьЯчейкуВКонвейер(Конвейер, "Сортировать", ФункцияСравнения);
	
КонецПроцедуры

Процедура СортироватьПо(
	Конвейер,
	Знач ИмяПоля,
	Знач ФункцияСравнения = Неопределено,
	Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ФункцияСравнения = Неопределено Тогда
		ФункцияСравнения = бф_ПроцессорыКоллекций.СтандартнаяФункцияСравнения();
	Иначе
		Если ТипЗнч(ФункцияСравнения) = Тип("Строка") Тогда
			ФункцияСравнения = СформироватьВременноеОписаниеОповещения(ФункцияСравнения, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	ДополнитьСтруктуру(ФункцияСравнения.ДополнительныеПараметры, ДополнительныеПараметры, Истина);
	
	ФункцияСравнения.ДополнительныеПараметры.Вставить("ИмяПоля", ИмяПоля);
	
	ПоложитьЯчейкуВКонвейер(Конвейер, "СортироватьПо", ФункцияСравнения);
	
КонецПроцедуры

#КонецОбласти

#Область ТерминальныеМетоды

Функция ПолучитьПервый(Конвейер, Коллекция, КэшКолонок) Экспорт
	
	ПройтиКонвейер(Конвейер, Коллекция, КэшКолонок);

	Результат = Неопределено;
	
	Для Каждого Элемент Из Коллекция Цикл
		Результат = Элемент;
		Прервать;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ВМассив(Конвейер, Коллекция, КэшКолонок) Экспорт
	
	ПройтиКонвейер(Конвейер, Коллекция, КэшКолонок);

	Результат = Новый Массив;
	
	Для Каждого Элемент Из Коллекция Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ВСтроку(Конвейер, Коллекция, КэшКолонок, РазделительСтрок = "") Экспорт
	
	ПройтиКонвейер(Конвейер, Коллекция, КэшКолонок);
	
	Результат = "";
	
	Для Каждого Элемент Из Коллекция Цикл
		Результат = Результат + Элемент + РазделительСтрок;
	КонецЦикла;
	
	Если НЕ РазделительСтрок = "" И СтрДлина(Результат) > 0 Тогда
		Результат = Лев(Результат, СтрДлина(Результат) - СтрДлина(РазделительСтрок));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Количество(Конвейер, Коллекция, КэшКолонок) Экспорт
	
	ПройтиКонвейер(Конвейер, Коллекция, КэшКолонок);
	
	Результат = Коллекция.Количество();
	
	Возврат Результат;

КонецФункции

Процедура ДляКаждого(
	Конвейер,
	Коллекция,
	КэшКолонок,
	Знач ФункцияОбработки,
	Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ФункцияОбработки) = Тип("Строка") Тогда
		ФункцияОбработки = СформироватьВременноеОписаниеОповещения(ФункцияОбработки, ДополнительныеПараметры);
	КонецЕсли;
	ДополнитьСтруктуру(ФункцияОбработки.ДополнительныеПараметры, ДополнительныеПараметры, Истина);
	
	ПройтиКонвейер(Конвейер, Коллекция, КэшКолонок);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Обработчик", ФункцияОбработки);
	ДополнительныеПараметры.Вставить("Коллекция", Коллекция);
	
	ВыполнитьОбработать(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

Функция Минимум(
	Конвейер,
	Коллекция,
	КэшКолонок,
	Знач ФункцияСравнения = Неопределено,
	Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ФункцияСравнения = Неопределено Тогда
		ФункцияСравнения = бф_ПроцессорыКоллекций.СтандартнаяФункцияСравнения();
	Иначе
		Если ТипЗнч(ФункцияСравнения) = Тип("Строка") Тогда
			ФункцияСравнения = СформироватьВременноеОписаниеОповещения(ФункцияСравнения, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	ДополнитьСтруктуру(ФункцияСравнения.ДополнительныеПараметры, ДополнительныеПараметры, Истина);
	
	ПройтиКонвейер(Конвейер, Коллекция, КэшКолонок);
	
	Результат = Новый Массив;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Обработчик", ФункцияСравнения);
	ДополнительныеПараметры.Вставить("Коллекция", Коллекция);
	
	ВыполнитьСортировать(Результат, ДополнительныеПараметры);
	
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат[0];
	КонецЕсли;

КонецФункции

Функция Максимум(
	Конвейер,
	Коллекция,
	КэшКолонок,
	Знач ФункцияСравнения = Неопределено,
	Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ФункцияСравнения = Неопределено Тогда
		ФункцияСравнения = бф_ПроцессорыКоллекций.СтандартнаяФункцияСравнения();
	Иначе
		Если ТипЗнч(ФункцияСравнения) = Тип("Строка") Тогда
			ФункцияСравнения = СформироватьВременноеОписаниеОповещения(ФункцияСравнения, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	ДополнитьСтруктуру(ФункцияСравнения.ДополнительныеПараметры, ДополнительныеПараметры, Истина);
	
	ПройтиКонвейер(Конвейер, Коллекция, КэшКолонок);
	
	Результат = Новый Массив;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Обработчик", ФункцияСравнения);
	ДополнительныеПараметры.Вставить("Коллекция", Коллекция);
	
	ВыполнитьСортировать(Результат, ДополнительныеПараметры);
	
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат[Результат.Количество() - 1];
	КонецЕсли;
	
КонецФункции

Функция Сократить(
	Конвейер,
	Коллекция,
	КэшКолонок,
	Знач ФункцияСокращения,
    Знач НачальноеЗначение = Неопределено,
    Знач ДополнительныеПараметры = Неопределено) Экспорт

	Если ТипЗнч(ФункцияСокращения) = Тип("Строка") Тогда
		ФункцияСокращения = СформироватьВременноеОписаниеОповещения(ФункцияСокращения, ДополнительныеПараметры);
	КонецЕсли;
	ДополнитьСтруктуру(ФункцияСокращения.ДополнительныеПараметры, ДополнительныеПараметры, Истина);
	
	ПройтиКонвейер(Конвейер, Коллекция, КэшКолонок);
	
	Результат = НачальноеЗначение;

	Для Каждого Элемент Из Коллекция Цикл
		ФункцияСокращения.ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ВыполнитьОбработкуОповещенияСлужебный(ФункцияСокращения, Результат);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция Получить(Конвейер, Коллекция, КэшКолонок, ТипРезультата) Экспорт
	
	ПройтиКонвейер(Конвейер, Коллекция, КэшКолонок);
	
	Результат = Новый(ТипРезультата);
	
	РезультатСодержитКолонки = Истина;
	Попытка
		//@skip-check module-unused-local-variable
		Колонки = Результат.Колонки;
	Исключение
		РезультатСодержитКолонки = Ложь;
	КонецПопытки;
	
	Если РезультатСодержитКолонки Тогда
		Для Каждого Колонка Из КэшКолонок Цикл
			Результат.Колонки.Добавить(
				Колонка.Имя,
				Колонка.ТипЗначения,
				Колонка.Заголовок,
				Колонка.Ширина
			);
		КонецЦикла;
	
		Если Результат.Колонки.Количество() = 0 Тогда
			Результат.Колонки.Добавить("Значение");
		КонецЕсли;
	КонецЕсли;

	ЭлементСодержитКолонки = КэшКолонок.Количество() > 0;
	
	Для Каждого ЭлементКоллекции Из Коллекция Цикл
		Если РезультатСодержитКолонки И ЭлементСодержитКолонки Тогда
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), ЭлементКоллекции);
		ИначеЕсли РезультатСодержитКолонки Тогда
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Значение = ЭлементКоллекции;
		Иначе
			Результат.Добавить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ЛюбойСоответствует(
	Конвейер,
	Коллекция,
	КэшКолонок,
	Знач ФункцияСравнения,
	Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ФункцияСравнения) = Тип("Строка") Тогда
		ФункцияСравнения = СформироватьВременноеОписаниеОповещения(ФункцияСравнения, ДополнительныеПараметры);
	КонецЕсли;
	ДополнитьСтруктуру(ФункцияСравнения.ДополнительныеПараметры, ДополнительныеПараметры, Истина);
	
	ПройтиКонвейер(Конвейер, Коллекция, КэшКолонок);
	
	Результат = Ложь;
	
	ФункцияСравнения.ДополнительныеПараметры.Вставить("Элемент");
	
	Для Каждого Элемент Из Коллекция Цикл
		ФункцияСравнения.ДополнительныеПараметры.Элемент = Элемент;
		РезультатФильтрации = Ложь;
		ВыполнитьОбработкуОповещенияСлужебный(ФункцияСравнения, РезультатФильтрации);
		
		Если РезультатФильтрации Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ВсеСоответствуют(
	Конвейер,
	Коллекция,
	КэшКолонок,
	Знач ФункцияСравнения,
	Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ФункцияСравнения) = Тип("Строка") Тогда
		ФункцияСравнения = СформироватьВременноеОписаниеОповещения(ФункцияСравнения, ДополнительныеПараметры);
	КонецЕсли;
	ДополнитьСтруктуру(ФункцияСравнения.ДополнительныеПараметры, ДополнительныеПараметры, Истина);
	
	ПройтиКонвейер(Конвейер, Коллекция, КэшКолонок);
	
	Результат = Истина;
	
	ФункцияСравнения.ДополнительныеПараметры.Вставить("Элемент");
	
	Для Каждого Элемент Из Коллекция Цикл
		ФункцияСравнения.ДополнительныеПараметры.Элемент = Элемент;
		РезультатФильтрации = Ложь;
		ВыполнитьОбработкуОповещенияСлужебный(ФункцияСравнения, РезультатФильтрации);
		
		Если НЕ РезультатФильтрации Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВсеНеСоответствуют(
	Конвейер,
	Коллекция,
	КэшКолонок,
	Знач ФункцияСравнения,
	Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ФункцияСравнения) = Тип("Строка") Тогда
		ФункцияСравнения = СформироватьВременноеОписаниеОповещения(ФункцияСравнения, ДополнительныеПараметры);
	КонецЕсли;
	ДополнитьСтруктуру(ФункцияСравнения.ДополнительныеПараметры, ДополнительныеПараметры, Истина);
	
	ПройтиКонвейер(Конвейер, Коллекция, КэшКолонок);
	
	Результат = Истина;
	
	ФункцияСравнения.ДополнительныеПараметры.Вставить("Элемент");
	
	Для Каждого Элемент Из Коллекция Цикл
		ФункцияСравнения.ДополнительныеПараметры.Элемент = Элемент;
		РезультатФильтрации = Ложь;
		ВыполнитьОбработкуОповещенияСлужебный(ФункцияСравнения, РезультатФильтрации);
		
		Если РезультатФильтрации Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрохождениеКонвеера

Процедура ВыполнитьПервые(Результат, ДополнительныеПараметры) Экспорт
	
	Количество = ДополнительныеПараметры.Количество;
	
	Результат = Новый Массив;
	Для сч = 0 По Количество - 1 Цикл
		Элемент = ДополнительныеПараметры.Коллекция[сч];
		Результат.Добавить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПропустить(Результат, ДополнительныеПараметры) Экспорт
	
	Количество = ДополнительныеПараметры.Количество;
	
	Результат = Новый Массив;
	Для сч = Количество По ДополнительныеПараметры.Коллекция.ВГраница() Цикл
		Элемент = ДополнительныеПараметры.Коллекция[сч];
		Результат.Добавить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьРазличные(Результат, ДополнительныеПараметры) Экспорт
	
	Результат = Новый Массив;
	
	ОбработчикСравнения = ДополнительныеПараметры.Обработчик;
	
	Для Каждого Элемент Из ДополнительныеПараметры.Коллекция Цикл
		
		КоличествоСовпадений = 0;
		
		Для Каждого ЭлементРезультат Из Результат Цикл
			ОбработчикСравнения.ДополнительныеПараметры.Элемент1 = Элемент;
			ОбработчикСравнения.ДополнительныеПараметры.Элемент2 = ЭлементРезультат;
			РезультатСортировки = Неопределено;
			ВыполнитьОбработкуОповещенияСлужебный(ОбработчикСравнения, РезультатСортировки);
			Если РезультатСортировки = 0 Тогда
				КоличествоСовпадений = КоличествоСовпадений + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоСовпадений = 0 Тогда 
			Результат.Добавить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьФильтровать(Результат, ДополнительныеПараметры) Экспорт
	
	Обработчик = ДополнительныеПараметры.Обработчик;
	
	Результат = Новый Массив;
	
	Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
		Обработчик.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Обработчик.ДополнительныеПараметры.Вставить("Элемент");
	
	Для Каждого Элемент Из ДополнительныеПараметры.Коллекция Цикл
		Обработчик.ДополнительныеПараметры.Элемент = Элемент;
		РезультатФильтрации = Ложь;
		ВыполнитьОбработкуОповещенияСлужебный(Обработчик, РезультатФильтрации);
		
		Если РезультатФильтрации Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбработать(Результат, ДополнительныеПараметры) Экспорт
	
	Обработчик = ДополнительныеПараметры.Обработчик;
	
	Результат = Новый Массив;
	
	Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
		Обработчик.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Обработчик.ДополнительныеПараметры.Вставить("Элемент");
	
	Для Каждого Элемент Из ДополнительныеПараметры.Коллекция Цикл
		Обработчик.ДополнительныеПараметры.Элемент = Элемент;
		РезультатОбработки = Элемент;
		ВыполнитьОбработкуОповещенияСлужебный(Обработчик, РезультатОбработки);
		
		Результат.Добавить(РезультатОбработки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьРазвернуть(Результат, ДополнительныеПараметры) Экспорт
	
	Обработчик = ДополнительныеПараметры.Обработчик;
	
	Результат = Новый Массив;
	
	Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
		Обработчик.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Обработчик.ДополнительныеПараметры.Вставить("Элемент");
	
	Для Каждого Элемент Из ДополнительныеПараметры.Коллекция Цикл
		Обработчик.ДополнительныеПараметры.Элемент = Элемент;
		РезультатРазворачивания = Элемент;
		ВыполнитьОбработкуОповещенияСлужебный(Обработчик, РезультатРазворачивания);
		
		ДСО = СтрШаблон("Результат разворачивания для элемента %1 должен иметь тип ПроцессорКоллекций", Элемент);
		
		Если Не ТипЗнч(РезультатРазворачивания) = Тип("ОбработкаОбъект.бф_ПроцессорКоллекций") Тогда
			ВызватьИсключение ДСО;
		КонецЕсли;
			
		РезультатРазворачивания.ДляКаждого(
			"ДополнительныеПараметры.Результат.Добавить(Элемент);",
			Новый Структура("Результат", Результат)
		);

	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСортировать(Результат, ДополнительныеПараметры) Экспорт
	
	Обработчик = ДополнительныеПараметры.Обработчик;
	
	Результат = ДополнительныеПараметры.Коллекция;
	
	Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
		Обработчик.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Обработчик.ДополнительныеПараметры.Вставить("Элемент1");
	Обработчик.ДополнительныеПараметры.Вставить("Элемент2");
	
	Для й = 0 По Результат.Количество() - 1 Цикл
		Флаг = Ложь;
		к = Результат.Количество() - 1;
		Пока к > й Цикл
			Элемент = Результат[к - 1];
			СледующийЭлемент = Результат[к];
			Обработчик.ДополнительныеПараметры.Элемент1 = Элемент;
			Обработчик.ДополнительныеПараметры.Элемент2 = СледующийЭлемент;
			РезультатСортировки = Неопределено;
			ВыполнитьОбработкуОповещенияСлужебный(Обработчик, РезультатСортировки);
			Если РезультатСортировки > 0 Тогда
				Результат[к - 1] = СледующийЭлемент;
				Результат[к] = Элемент;
				Флаг = Истина;
			КонецЕсли;
			к = к - 1;
		КонецЦикла;
		Если НЕ Флаг Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСортироватьПо(Результат, ДополнительныеПараметры) Экспорт
	
	Обработчик = ДополнительныеПараметры.Обработчик;
	ИмяПоля = Обработчик.ДополнительныеПараметры.ИмяПоля;
	
	Результат = ДополнительныеПараметры.Коллекция;
	
	Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
		Обработчик.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Обработчик.ДополнительныеПараметры.Вставить("Элемент1");
	Обработчик.ДополнительныеПараметры.Вставить("Элемент2");
	
	Для й = 0 По Результат.Количество() - 1 Цикл
		Флаг = Ложь;
		к = Результат.Количество() - 1;
		Пока к > й Цикл
			Элемент = Результат[к - 1];
			СледующийЭлемент = Результат[к];

			Обработчик.ДополнительныеПараметры.Элемент1 = Элемент[ИмяПоля];
			Обработчик.ДополнительныеПараметры.Элемент2 = СледующийЭлемент[ИмяПоля];
			РезультатСортировки = Неопределено;
			ВыполнитьОбработкуОповещенияСлужебный(Обработчик, РезультатСортировки);
			Если РезультатСортировки > 0 Тогда
				Результат[к - 1] = СледующийЭлемент;
				Результат[к] = Элемент;
				Флаг = Истина;
			КонецЕсли;
			к = к - 1;
		КонецЦикла;
		Если НЕ Флаг Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбработкуОповещенияСлужебный(ВыполняемоеОповещение, Результат = Неопределено)
	
	#Если Клиент Тогда
		
		Если ЗначениеЗаполнено(ВыполняемоеОповещение.ИмяПроцедурыОбработкиОшибки) Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				ВыполняемоеОповещение.ИмяПроцедуры,
				ВыполняемоеОповещение.Модуль,
				ВыполняемоеОповещение.ДополнительныеПараметры,
				ВыполняемоеОповещение.ИмяПроцедурыОбработкиОшибки,
				ВыполняемоеОповещение.МодульОбработкиОшибки
			);
			
		Иначе
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				ВыполняемоеОповещение.ИмяПроцедуры,
				ВыполняемоеОповещение.Модуль,
				ВыполняемоеОповещение.ДополнительныеПараметры
			);
			
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(
			ОписаниеОповещения,
			Результат
		);
		
	#Иначе
		
		//@skip-check server-execution-safe-mode
		Выполнить "ВыполняемоеОповещение.Модуль." +
			ВыполняемоеОповещение.ИмяПроцедуры + 
			"(Результат, ВыполняемоеОповещение.ДополнительныеПараметры)";
		
	#КонецЕсли
	
КонецПроцедуры

Процедура ОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт

	Элемент  = Неопределено;
	Элемент1 = Неопределено;
	Элемент2 = Неопределено;
	
	ПользовательскоеВыражение = "А = 0;";
	
	ДополнительныеПараметры.Свойство("Элемент",  Элемент);
	ДополнительныеПараметры.Свойство("Элемент1", Элемент1);
	ДополнительныеПараметры.Свойство("Элемент2", Элемент2);
	
	ДополнительныеПараметры.Свойство("ПользовательскоеВыражение", ПользовательскоеВыражение);
	
	//@skip-check server-execution-safe-mode
	Выполнить ПользовательскоеВыражение;
	
КонецПроцедуры

#КонецОбласти

Процедура ПройтиКонвейер(Конвейер, Коллекция, КэшКолонок)

	Результат = Новый Массив;
	Для Каждого Ячейка Из Конвейер Цикл
		
		Ячейка.ДополнительныеПараметры.Вставить("Коллекция", Коллекция);
		
		ВыполнитьОбработкуОповещенияСлужебный(Ячейка, Результат);
		УстановитьКоллекцию(Коллекция, КэшКолонок, Результат, Ложь);
		
	КонецЦикла;

	Конвейер.Очистить();

КонецПроцедуры

Процедура ПоложитьЯчейкуВКонвейер(
	Конвейер,
	ИмяОперации,
	ВходящееОписаниеОповещения = Неопределено,
	ДополнительныеПараметры = Неопределено)
	
	Сообщение = ИмяОперации;
	Если ВходящееОписаниеОповещения <> Неопределено Тогда
		Сообщение = Сообщение + " " + ВходящееОписаниеОповещения.ИмяПроцедуры;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если ВходящееОписаниеОповещения <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("Обработчик", ВходящееОписаниеОповещения);
	КонецЕсли;
	
	Ячейка = бф_ПроцессорыКоллекций.НовыйОписаниеОповещения(
		"Выполнить" + ИмяОперации,
		бф_ПроцессорыКоллекцийСлужебный,
		ДополнительныеПараметры
	);
	
	Конвейер.Добавить(Ячейка);
	
КонецПроцедуры

Функция СформироватьВременноеОписаниеОповещения(ПользовательскоеВыражение, ДополнительныеПараметры)

	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;

	ДополнительныеПараметры.Вставить(
		"ПользовательскоеВыражение",
		ПользовательскоеВыражение
	);
	
	ОписаниеОповещения = бф_ПроцессорыКоллекций.НовыйОписаниеОповещения(
		"ОбработкаОповещения",
		бф_ПроцессорыКоллекцийСлужебный,
		ДополнительныеПараметры
	);
	
	Возврат ОписаниеОповещения;

КонецФункции

// Дополняет структуру значениями из другой структуры.
//
// Функция скопирована из "Библиотеки Стандартных Подсистем" на следующих условиях:
//
// Copyright (c) 2018, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
//
// В функцию внесены следующие изменения:
//   * использование СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку заменено на СтрШаблон;
//   * добавлена инициализиация структур приемника и источника
//   
// Параметры:
//   Приемник - Структура - коллекция, в которую будут добавляться новые значения.
//   Источник - Структура - коллекция, из которой будут считываться пары Ключ и Значение для заполнения.
//   Заменять - Булево, Неопределено - что делать в местах пересечения ключей источника и приемника:
//                                       Истина - заменять значения приемника (самый быстрый способ),
//                                       Ложь   - не заменять значения приемника (пропускать),
//                                       Неопределено - значение по умолчанию. Бросать исключение.
//
Процедура ДополнитьСтруктуру(Приемник, Источник, Заменять = Неопределено)
	
	Если Приемник = Неопределено Тогда
		Приемник = Новый Структура;
	КонецЕсли;
	
	Если Источник = Неопределено Тогда
		Источник = Новый Структура;
	КонецЕсли;
	
	Для Каждого Элемент Из Источник Цикл
		Если Заменять <> Истина И Приемник.Свойство(Элемент.Ключ) Тогда
			Если Заменять = Ложь Тогда
				Продолжить;
			Иначе
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Пересечение ключей источника и приемника: ""%1"".'"), Элемент.Ключ);
			КонецЕсли
		КонецЕсли;
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
