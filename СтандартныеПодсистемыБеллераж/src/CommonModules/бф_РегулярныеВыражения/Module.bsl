////////////////////////////////////////////////////////////////////////////////
// Содержит функционал по работе с регулярными выражениями.
// Подробнее про весь функционал: https://github.com/alexkmbk/RegEx1CAddin
// - замена вхождений (Replace);
// - проверка соответствия (Test);
// - поиск (Execute); 
// 
// Модуль работает внешнюю Native API компоненту RegEx1CAddin.
// 
////////////////////////////////////////////////////////////////////////////////

#Region ПрограммныйИнтерфейс

// Проверяет строку на соответствие шаблону.
// 
// Параметры:
//  Строка - Строка - строковое выражение, которое необходимо проверить.
//  Шаблон - Строка	- шаблон, состоящий из обычных символов и/или специальных метасимволов.
//  Например, ".+@.+\..+". Соответствует свойству 'Pattern' из VBScript.
//  ИскатьПоВсейСтроке - Булево - флаг, определяющий будет ли проверка идти до первого соответствия шаблонуили по всей строке.
// 	Соответствует свойству 'Global' из VBScript. По умолчанию - Ложь;
//  ИгнорироватьРегистр - Булево - флаг, определяющий будет ли учитываться регистр.
//  Соответствует свойству 'IgnoreCase' из VBScript. По умолчанию - Ложь;
//  МногострочныйРежим - Булево - флаг, определяющий режим проверки: Истина - многострочный, Ложь - однострочный.
//  Соответствует свойству 'Multiline' из VBScript. По умолчанию - Ложь;
// 
// Возвращаемое значение:
//  Булево - Результат проверки переданной строки.
Функция Проверить(Строка, Шаблон, ИскатьПоВсейСтроке = Ложь, ИгнорироватьРегистр = Ложь, МногострочныйРежим = Ложь) Экспорт
	
	Если Не ТипЗнч(Строка) = Тип("Строка") Тогда
		ВызватьИсключение "Переданное значение не является строкой";
	КонецЕсли;

	Если Не ТипЗнч(Шаблон) = Тип("Строка") Тогда
		ВызватьИсключение "Шаблон регулярного выражения должен быть строкой";
	КонецЕсли;

	Regex = ИнициализироватьRegex();
	Regex.Global = ИскатьПоВсейСтроке;
	Regex.IgnoreCase = ИгнорироватьРегистр;
	Regex.Multiline = МногострочныйРежим;
	Regex.ThrowExceptions = Истина;

	Возврат Regex.Совпадает(Строка, Шаблон);

КонецФункции

// Найти подругппы.
// 
// Параметры:
//  Строка - Строка - Строка поиска
//  ШаблонПоиска - Строка - Шаблон поиска
// 
// Возвращаемое значение:
//  Массив Из Строка - Найденные подругппы
Функция НайтиПодгруппы(Строка, ШаблонПоиска) Экспорт
	
	Подгруппы = Новый Массив;
	
	КомпонентаРВ = ИнициализироватьRegex();
	КомпонентаРВ.НайтиСовпадения(Строка, ШаблонПоиска, Истина);
	КоличествоНайденныхГрупп = КомпонентаРВ.КоличествоВложенныхГрупп();
	Если КомпонентаРВ.Следующий() И КоличествоНайденныхГрупп > 0 Тогда
		
		Для Индекс = 0 По КоличествоНайденныхГрупп - 1 Цикл
			Подгруппы.Добавить(КомпонентаРВ.ПолучитьПодгруппу(Индекс));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Подгруппы;
	
КонецФункции

#EndRegion

#Region СлужебныеПроцедурыИФункции

// Подключает внешнюю компоненту и возвращает объект RegEx.
// Вызовет исключение при ошибке подключения компоненты.
// 
// Возвращаемое значение:
//  Произвольный - объект RegEx, позволяющий работать с регулярными выражениями.
Функция ИнициализироватьRegex()
	
	Если ПодключитьВнешнююКомпоненту("ОбщийМакет.бф_RegEx", "Component", ТипВнешнейКомпоненты.Native) = Ложь Тогда
		ВызватьИсключение НСтр("ru = ""Ошибка инициализации нативной компоненты RegEx"";
													 |en = ""RegEx native component initialization failed""");
	КонецЕсли;	
	
	Возврат Новый("AddIn.Component.RegEx");
	
КонецФункции

#EndRegion