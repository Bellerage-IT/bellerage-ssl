stages:
  - edt
  - tests
  - convert_edt_validate
  - sonar

variables:
  DIR_NAME_SRC: "src"
  DIR_NAME_SRC_CF: "cf"
  PATH_SRC: "$DIR_NAME_SRC/$DIR_NAME_SRC_CF/"
  PATH_SRC_YAXUNIT: "$DIR_NAME_SRC/cfe/yaxunit"
  SONAR_SCANNER_OPTS: "-Xmx5g -Dfile.encoding=UTF-8 -Duser.language=ru"
  RING_OPTS: "-Xmx8g -Dfile.encoding=UTF-8 -Duser.language=ru"
  EDT_VERSION: "2023.1.1"
  EDT_VALIDATION_RESULT: "build/edt-validate-result.tsv"
  EDT_VALIDATION_JSON: "build/edt-validate-result.json"
  GENERIC_ISSUE_SETTINGS_JSON: "generic-issue-settings.json"
  EDT_CI_COMMANDS_FILENAME: "edt-ci-commands.txt"

edt:convertation-validation:
  image:
    name: "registry.bellerage.com/edt-bellerage:$EDT_VERSION"
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 3 days
    paths:
      - build/conf-format/
      - $EDT_VALIDATION_RESULT
  before_script:
    - mkdir -p build
  script:
    - echo "try {" > $PWD/build/$EDT_CI_COMMANDS_FILENAME
    - echo "export --project $PWD/$PATH_SRC --configuration-files $PWD/build/conf-format/cf" >> $PWD/build/$EDT_CI_COMMANDS_FILENAME
    - echo "validate --file $PWD/$EDT_VALIDATION_RESULT --project-list [$PWD/$PATH_SRC]" >> $PWD/build/$EDT_CI_COMMANDS_FILENAME
    - echo "export --project $PWD/$PATH_SRC_YAXUNIT --configuration-files $PWD/build/conf-format/yaxunit" >> $PWD/build/$EDT_CI_COMMANDS_FILENAME
    - echo "} { echo \$exception ; \$exception }" >> $PWD/build/$EDT_CI_COMMANDS_FILENAME
    - cat $PWD/build/$EDT_CI_COMMANDS_FILENAME
    - export edt_path=$(ring edt locations list)
    - $edt_path/1cedtcli.sh -data $PWD/build/EDT_WS -timeout 3600 -file $PWD/build/$EDT_CI_COMMANDS_FILENAME
  stage: edt
  tags:
    - docker
  only:
    - master
    - develop
    - merge_requests

oscript:convert-edt-validate-result: 
  stage: convert_edt_validate
  needs:
    - edt:convertation-validation
  image:
    name: "registry.bellerage.com/oscript-jdk"
  variables:
    SRC: "src/cf/src"
    GENERIC_ISSUE_JSON: $EDT_VALIDATION_JSON
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - $EDT_VALIDATION_JSON
  dependencies:
    - edt:convertation-validation
  script:
    - opm install edt-ripper
    - edt-ripper parse $EDT_VALIDATION_RESULT $DIR_NAME_SRC $DIR_NAME_SRC_CF $EDT_VALIDATION_JSON
  tags:
    - docker
  only:
    - master
    - develop
    - merge_requests

test:yaxunit:
  stage: tests
  services:
    - name: kennethreitz/httpbin
      alias: httpbin
  image: "registry.bellerage.com/onec-client-base-image:8.3.20.2290"
  needs: 
    - edt:convertation-validation
  script:
    - echo "[NH_COMMON]" > /opt/1cv8/current/conf/nethasp.ini
    - echo "NH_TCPIP=Enabled" >> /opt/1cv8/current/conf/nethasp.ini
    - echo "[NH_TCPIP]" >> /opt/1cv8/current/conf/nethasp.ini
    - echo "NH_SERVER_ADDR=1cvm3.bellerage.com" >> /opt/1cv8/current/conf/nethasp.ini
    - echo "NH_PORT_NUMBER=475" >> /opt/1cv8/current/conf/nethasp.ini
    - echo "NH_TCPIP_METHOD=UDP" >> /opt/1cv8/current/conf/nethasp.ini
    - echo "NH_USE_BROADCAST=Disabled" >> /opt/1cv8/current/conf/nethasp.ini
    - cat /opt/1cv8/current/conf/nethasp.ini
    - vrunner init-dev --src "$PWD/build/conf-format/cf"
    - vrunner compileexttocfe --src "$PWD/build/conf-format/yaxunit" -o build/yaxunit.cfe
    - vrunner run --execute '$runnerRoot/epf/ЗагрузитьРасширениеВРежимеПредприятия.epf' --command "Путь=build/yaxunit.cfe;Имя=yaxunit;ОтключитьЛогикуНачалаРаботыСистемы;ЗавершитьРаботуСистемы"
    - vrunner run --command 'RunUnitTests=$workspaceRoot/yaxunit.json' --exitCodePath "build/yaxunit-exitCode"
  artifacts:
    when: always
    paths:
      - build/yaxunit-jUnit-result.xml
    reports:
      junit: build/yaxunit-jUnit-result.xml
  only:
    - master
    - develop
    - merge_requests
  tags:
    - docker


sonar:check-branch:
  stage: sonar
  needs:
    - job: oscript:convert-edt-validate-result
      artifacts: true
  image:
    name: registry.bellerage.com/devops/sonar-scanner-cli
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: 0  # Tells git to fetch all the branches of the project, required by the analysis task
    GIT_STRATEGY: clone # clone entire repo instead of reusing workspace
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  allow_failure: true
  dependencies:
    - oscript:convert-edt-validate-result
  script:
    - export PROJECT_VERSION="$(grep -Po1 "<version>\K.*(?=<\/version>)" ${PATH_SRC}src/Configuration/Configuration.mdo)"
    - echo $PROJECT_VERSION
    - sonar-scanner
        -D"sonar.host.url=$SONAR_HOST_URL"
        -D"sonar.login=$SONAR_TOKEN"
        -D"sonar.projectVersion=$PROJECT_VERSION"
        -D"sonar.branch.name=$CI_COMMIT_BRANCH"
        -D"sonar.bsl.languageserver.reportPaths=$EDT_VALIDATION_JSON"
  only:
    - master
    - develop
  tags:
    - docker

sonar:check-MR:
  stage: sonar
  needs:
  - job: oscript:convert-edt-validate-result
    artifacts: true
  image:
    name: registry.bellerage.com/devops/sonar-scanner-cli
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: 0  # Tells git to fetch all the branches of the project, required by the analysis task
    GIT_STRATEGY: clone # clone entire repo instead of reusing workspace
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  allow_failure: true
  dependencies:
    - oscript:convert-edt-validate-result
  script:
    - export PROJECT_VERSION="$(grep -Po1 "<version>\K.*(?=<\/version>)" ${PATH_SRC}src/Configuration/Configuration.mdo)"
    - echo $PROJECT_VERSION
    - sonar-scanner
        -D"sonar.host.url=$SONAR_HOST_URL"
        -D"sonar.login=$SONAR_TOKEN"
        -D"sonar.projectVersion=$PROJECT_VERSION"
        -D"sonar.pullrequest.key=$CI_MERGE_REQUEST_IID"
        -D"sonar.pullrequest.branch=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
        -D"sonar.pullrequest.base=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
        -D"sonar.bsl.languageserver.reportPaths=$EDT_VALIDATION_JSON"
  only:
    - merge_requests         
  tags:
    - docker
