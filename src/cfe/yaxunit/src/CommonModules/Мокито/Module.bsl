//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2022 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

///////////////////////////////////////////////////////////////////
// ПрограммныйИнтерфейс
// Экспортные процедуры и функции для прикладного использования 
/////////////////////////////////////////////////////////////////// 
#Область ПрограммныйИнтерфейс

// Обучение.
//  Начинает обучение мокито для регистрации правил подмены вызовов методов
//
// Параметры:
//  Объект - Произвольный - Объект, методы которого хотим подменить
// 
// Возвращаемое значение:
//  ОбщийМодуль
// Пример:
//  Для работы Мокито необходимо добавить обрабатываемые методы в расширение по следующей схеме
//  
//	&Вместо("ВыполнитьЗапрос")
//	Функция ЮТВыполнитьЗапрос(ПараметрыПодключения, Ресурс, HTTPМетод, Параметры, ОписаниеТела, Заголовки) Экспорт
//		
//		ПараметрыМетода = Мокито.МассивПараметров(ПараметрыПодключения, Ресурс, HTTPМетод, Параметры, ОписаниеТела, Заголовки);
//		
//		ПрерватьВыполнение = Ложь;
//		Результат = Мокито.АнализВызова(РаботаСHTTP, "ВыполнитьЗапрос", ПараметрыМетода, ПрерватьВыполнение);
//		
//		Если НЕ ПрерватьВыполнение Тогда
//			Возврат ПродолжитьВызов(ПараметрыПодключения, Ресурс, HTTPМетод, Параметры, ОписаниеТела, Заголовки);
//		Иначе
//			Возврат Результат;
//		КонецЕсли;
//		
//	КонецФункции
Функция Обучение(Объект) Экспорт
	
	Режимы = МокитоСлужебный.РежимыРаботы();
	МокитоСлужебный.УстановитьРежим(Режимы.Обучение);
	
	Возврат МокитоОбучение.Обучение(Объект);
	
КонецФункции

// Прогон
//  Переводит мокито в режим прогона тестов
//  Вызов этого метода обязателен перед выполнением тестового прогона метода 
Процедура Прогон() Экспорт
	
	Режимы = МокитоСлужебный.РежимыРаботы();
	МокитоСлужебный.УстановитьРежим(Режимы.Тестирование);
	
КонецПроцедуры

// Проверить.
//  Переводит мокито в режим проверки вызовов
// Параметры:
//  Объект - Произвольный - Устанавливает проверяемый объект, вызовы методов которого будем проверять
// 
// Возвращаемое значение:
//  ОбщийМодуль
Функция Проверить(Объект) Экспорт
	
	Режимы = МокитоСлужебный.РежимыРаботы();
	МокитоСлужебный.УстановитьРежим(Режимы.Проверка);
	
	Возврат МокитоПроверки.Проверить(Объект);
	
КонецФункции

// Сбросить
// Сбрасывает настройки, переинициализирует мокито
Процедура Сбросить() Экспорт
	
	МокитоСлужебный.СброситьПараметры();
	
КонецПроцедуры

#Область КонструкторыПараметров

// Любой параметр.
//  Возвращает маску параметра. Используется при обучении и проверках для фильтрации входных параметров метода
//  Указывает, что в метод может передаваться любой параметр
// Возвращаемое значение:
//  см. МокитоСлужебный.ОписаниеМаскиПараметра
Функция ЛюбойПараметр() Экспорт
	
	МаскаПараметра = МокитоСлужебный.ОписаниеМаскиПараметра(МокитоСлужебный.ТипыУсловийПараметров().Любой, 0);
	
	Возврат МаскаПараметра;
	
КонецФункции

// Числовой параметр.
//  Возвращает маску параметра. Используется при обучении и проверках для фильтрации входных параметров метода
//  Указывает, что в метод может передаваться числовой параметр
// Возвращаемое значение:
//  см. Мокито.ТипизированныйПараметр
Функция ЧисловойПараметр() Экспорт
	
	Возврат ТипизированныйПараметр(Тип("Число"));
	
КонецФункции

// Строковый параметр.
//  Возвращает маску параметра. Используется при обучении и проверках для фильтрации входных параметров метода
//  Указывает, что в метод может передаваться строковый параметр
// Возвращаемое значение:
//  см. Мокито.ТипизированныйПараметр
Функция СтроковыйПараметр() Экспорт
	
	Возврат ТипизированныйПараметр(Тип("Строка"));
	
КонецФункции

// Типизированный параметр.
// Возвращает маску параметра. Используется при обучении и проверках для фильтрации входных параметров метода
// Указывает, что в метод может передаваться параметр указанного типа
// 
// Параметры:
//  Тип - Тип - Ограничение типа параметра
// 
// Возвращаемое значение:
//  см. МокитоСлужебный.ОписаниеМаскиПараметра
Функция ТипизированныйПараметр(Тип) Экспорт
	
	МаскаПараметра = МокитоСлужебный.ОписаниеМаскиПараметра(МокитоСлужебный.ТипыУсловийПараметров().Тип, 1);
	МаскаПараметра.Вставить("Тип", Тип);
	
	Возврат МаскаПараметра;
	
КонецФункции

Функция МассивПараметров(Параметр1 = "_!%*",
						 Параметр2 = "_!%*",
						 Параметр3 = "_!%*",
						 Параметр4 = "_!%*",
						 Параметр5 = "_!%*",
						 Параметр6 = "_!%*",
						 Параметр7 = "_!%*",
						 Параметр8 = "_!%*",
						 Параметр9 = "_!%*",
						 Параметр10 = "_!%*") Экспорт
	
	Возврат ЮТОбщий.ЗначениеВМассиве(Параметр1,
											 Параметр2,
											 Параметр3,
											 Параметр4,
											 Параметр5,
											 Параметр6,
											 Параметр7,
											 Параметр8,
											 Параметр9,
											 Параметр10);
	
КонецФункции

#КонецОбласти

Функция АнализВызова(Объект, ИмяМетода, ПараметрыМетода, ПрерватьВыполнение) Экспорт
	
	Возврат МокитоСлужебный.АнализВызова(Объект, ИмяМетода, ПараметрыМетода, ПрерватьВыполнение);
	
КонецФункции

#КонецОбласти
