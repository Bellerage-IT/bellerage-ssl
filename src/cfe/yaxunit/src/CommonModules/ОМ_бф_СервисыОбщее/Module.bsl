// @strict-types


/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции, предназначенные для использования другими 
// объектами конфигурации или другими программами
///////////////////////////////////////////////////////////////////////////////// 
#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты
		.ДобавитьТестовыйНабор("Парсинг параметров запроса")
			.ДобавитьТест("ЧтениеПараметровЗапроса", "Чтение и десериализация параметров запроса")
			.ДобавитьТест("ЧтениеТелаЗапроса", "Чтение тела запроса")
			.ДобавитьТест("СсылкаСуществует", "Десериализация и проверка существования ссылки")
			.ДобавитьТест("СсылкаНеСуществует", "Проверка на отсутствие ссылки")
			.ДобавитьТест("ДесериализацияПустойСсылки", "Проверка на десериализацию пустой ссылки")
			.ДобавитьТест("ТестДолжен_ПрочитатьТелоЗапросаПоСхемеИВосстановитьЗначение", "Чтение тела запроса с восстановлением")
	;
		
КонецПроцедуры

#Область События

Процедура ПередТестовымНабором() Экспорт
	КонтекстНабора = ЮТКонтекст.КонтекстНабора();
	КонтекстНабора.Вставить("ДанныеТестовогоЭлемента", ДанныеЭлементаСправочника());
КонецПроцедуры

Процедура ПослеТестовогоНабора() Экспорт
	КонтекстНабора = ЮТКонтекст.КонтекстНабора();
	//@skip-check property-return-type
	Элемент = КонтекстНабора.ДанныеТестовогоЭлемента.Ссылка; // СправочникСсылка.тест_Справочник
	Элемент.ПолучитьОбъект().Удалить();
КонецПроцедуры

#КонецОбласти

Процедура ЧтениеПараметровЗапроса() Экспорт
	Запрос = НовыйЗапросСоВсемиПараметрами();
	
	ТипыПараметров = бф_ФабрикаХТТП.ТипыПараметровЗапроса();
	ОжидаемыеПараметры = бф_СервисыОбщее.НовыйПараметрыЗапроса(
		бф_СервисыОбщее.НовыйПараметрЗапроса("URIParam1", ТипыПараметров.Гуид, Истина, Тип("СправочникСсылка.тест_Справочник")),
		бф_СервисыОбщее.НовыйПараметрЗапроса("URIParam2", ТипыПараметров.Строка, Истина),
		бф_СервисыОбщее.НовыйПараметрЗапроса("QueryParam1", ТипыПараметров.Строка, Истина),
		бф_СервисыОбщее.НовыйПараметрЗапроса("QueryParam2", ТипыПараметров.ДатаВремя, Истина),
		бф_СервисыОбщее.НовыйПараметрЗапроса("QueryParam3", ТипыПараметров.Дата, Истина),
		бф_СервисыОбщее.НовыйПараметрЗапроса("QueryParam4", ТипыПараметров.Булево, Истина),
		бф_СервисыОбщее.НовыйПараметрЗапроса("QueryParam5", ТипыПараметров.Гуид, Истина, Тип("СправочникСсылка.тест_Справочник")),
		бф_СервисыОбщее.НовыйПараметрЗапроса("QueryParam6", ТипыПараметров.Гуид, Истина),
		бф_СервисыОбщее.НовыйПараметрЗапроса("CustomQueryParam1", бф_СервисыОбщееПереопределяемый.тест_Фабрика().ДатаБО, Истина)	
	);
	
	//@skip-check invocation-parameter-type-intersect
	ПараметрыПрочитанные = бф_СервисыОбщее.ПараметрыЗапроса(Запрос, ОжидаемыеПараметры);
	//@skip-check property-return-type
	ДанныеТестовогоЭлемента = ЮТКонтекст.КонтекстНабора().ДанныеТестовогоЭлемента; // см. ДанныеЭлементаСправочника
	ЮТест.ОжидаетЧто(ПараметрыПрочитанные)
		.Свойство("URIParam1").Заполнено().Равно(ДанныеТестовогоЭлемента.Ссылка)
		.Свойство("URIParam2").Заполнено().ИмеетТип(Тип("Строка"))
		.Свойство("QueryParam1").Заполнено().ИмеетТип(Тип("Строка"))
		.Свойство("QueryParam2").Заполнено().ИмеетТип(Тип("Дата"))
		.Свойство("QueryParam3").Заполнено().ИмеетТип(Тип("Дата"))
		.Свойство("QueryParam4").Заполнено().ИмеетТип(Тип("Булево"))
		.Свойство("QueryParam5").Заполнено().Равно(ДанныеТестовогоЭлемента.Ссылка)
		.Свойство("QueryParam6").Заполнено().ИмеетТип(Тип("Строка"))
		.Свойство("CustomQueryParam1").Заполнено().ИмеетТип(Тип("Дата"))
	;
	
	
КонецПроцедуры

Процедура ЧтениеТелаЗапроса() Экспорт
	Запрос = НовыйЗапросСоВсемиПараметрами();
	ТелоЗапросаПоСхеме = бф_СервисыОбщее.ИзвлечьТелоJSONПоСхеме(
		Запрос.ПолучитьТелоКакПоток(),
		ФабрикаXDTO.Тип("http://test.bellerage.com", "тест_Схема")
	);
	
	ЮТест.ОжидаетЧто(ТелоЗапросаПоСхеме)
		.Свойство("field1").Равно("value")
		.Свойство("field2").Заполнено().ИмеетТип("Число")
		.Свойство("field3").ЭтоИстина()
		.Свойство("field4").Заполнено().ИмеетТип("Дата")
		.Свойство("field5").Заполнено().ИмеетДлину(36)
	;
	
КонецПроцедуры

Процедура СсылкаСуществует() Экспорт
	//@skip-check property-return-type
	ДанныеТестовогоЭлемента = ЮТКонтекст.КонтекстНабора().ДанныеТестовогоЭлемента; // см. ДанныеЭлементаСправочника
	СуществующийГУИД = ДанныеТестовогоЭлемента.Гуид; // Строка
	ЮТест
		.ОжидаетЧто(бф_СервисыОбщее.СсылкаПоИдентификатору(Тип("СправочникСсылка.тест_Справочник"), СуществующийГУИД))
			.Равно(ДанныеТестовогоЭлемента.Ссылка)
	;
КонецПроцедуры

Процедура СсылкаНеСуществует() Экспорт
	ЮТест.ОжидаетЧто(бф_СервисыОбщее)
		.Метод(
			"СсылкаПоИдентификатору",
			ЮТОбщий.ЗначениеВМассиве(Тип("СправочникСсылка.тест_Справочник"), "00000000-0000-0000-0000-000000000000")
		).ВыбрасываетИсключение(Строка(Тип("СправочникСсылка.тест_Справочник")))	
	;
КонецПроцедуры

Процедура ДесериализацияПустойСсылки() Экспорт
	ЮТест.ОжидаетЧто(
		бф_СервисыОбщее.СсылкаПоИдентификатору(Тип("СправочникСсылка.тест_Справочник"), "00000000-0000-0000-0000-000000000000", Истина)
		).Равно(Справочники.тест_Справочник.ПустаяСсылка())
	;
КонецПроцедуры

Процедура ТестДолжен_ПрочитатьТелоЗапросаПоСхемеИВосстановитьЗначение() Экспорт
	Запрос = НовыйЗапросСоВсемиПараметрами();
	
	ПараметрыВосстановления = бф_ВосстановлениеXDTO.НовыеПараметрыВосстановления();
	ПереименованиеПоля = ПараметрыВосстановления.Добавить();
	ПереименованиеПоля.СвойствоИсходное = "field2";
	ПереименованиеПоля.ИмяСвойства = "Поле2";
	
	ВосстановлениеИПереименование = ПараметрыВосстановления.Добавить();
	ВосстановлениеИПереименование.СвойствоИсходное = "field5";
	ВосстановлениеИПереименование.ИмяСвойства = "Поле5";
	ВосстановлениеИПереименование.ФункцияВосстановленияЗначения = "Справочники.тест_Справочник.ВосстановитьИзГуида";

	ТелоЗапросаПоСхеме = бф_СервисыОбщее.ПрочитатьИВосстановить(
		Запрос.ПолучитьТелоКакПоток(),
		ФабрикаXDTO.Тип("http://test.bellerage.com", "тест_Схема"),
		ПараметрыВосстановления
	);
	//@skip-check property-return-type
	ДанныеТестовогоЭлемента = ЮТКонтекст.КонтекстНабора().ДанныеТестовогоЭлемента; // см. ДанныеЭлементаСправочника
	ЮТест.ОжидаетЧто(ТелоЗапросаПоСхеме)
		.Свойство("field1").Равно("value")
		.Свойство("Поле2").Заполнено().ИмеетТип("Число")
		.Свойство("field3").ЭтоИстина()
		.Свойство("field4").Заполнено().ИмеетТип("Дата")
		.Свойство("Поле5").Заполнено().Равно(ДанныеТестовогоЭлемента.Ссылка)
	;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


// Данные элемента справочника.
// 
// Возвращаемое значение:
//  Структура - Данные элемента справочника:
// * Ссылка - ЛюбаяСсылка
// * Гуид - Строка
Функция ДанныеЭлементаСправочника()
	НовыйСправочник = ЮТТестовыеДанные.СоздатьЭлемент(Справочники.тест_Справочник);
	Возврат Новый Структура("Ссылка, Гуид", НовыйСправочник, XMLСтрока(НовыйСправочник));
КонецФункции

Функция НовыйЗапросСоВсемиПараметрами()
	
	//@skip-check invocation-parameter-type-intersect, property-return-type
	ГуидТестовогоСправочника = ЮТКонтекст.КонтекстНабора().ДанныеТестовогоЭлемента.Гуид; // Строка

	Запрос = Обработки.ЮТHTTPСервисЗапрос.Создать();
	Запрос
		.Метод("GET")
		.БазовыйURL("example.com")
		.ОтносительныйURL("/test")
		.ДобавитьПараметрURL("URIParam1", ГуидТестовогоСправочника)
		.ДобавитьПараметрURL("URIParam2", "some-action")
		.ДобавитьПараметрЗапроса("QueryParam1", XMLСтрока(ЮТТестовыеДанные.СлучайнаяСтрока()))
		.ДобавитьПараметрЗапроса("QueryParam2", XMLСтрока(ЮТТестовыеДанные.СлучайнаяДата()))
		.ДобавитьПараметрЗапроса("QueryParam3", СтрРазделить(XMLСтрока(ЮТТестовыеДанные.СлучайнаяДата()), "T").Получить(0))
		.ДобавитьПараметрЗапроса("QueryParam4", XMLСтрока(Истина))
		.ДобавитьПараметрЗапроса("QueryParam5", ГуидТестовогоСправочника)
		.ДобавитьПараметрЗапроса("QueryParam6", XMLСтрока(Новый УникальныйИдентификатор()))
		.ДобавитьПараметрЗапроса("CustomQueryParam1", Формат(ЮТТестовыеДанные.СлучайнаяДата(), "ДФ = 'ггггММддЧЧммсс'"))
	;
	
	//@skip-check structure-consructor-too-many-keys
	Запрос.УстановитьТелоКакСтрокуJSON(
		Новый Структура(
			"field1, field2, field3, field4, field5",
			"value",
			4.20,
			Истина,
			XMLСтрока(ЮТТестовыеДанные.СлучайнаяДата()),
			ГуидТестовогоСправочника
		)
	);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти
