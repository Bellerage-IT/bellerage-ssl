//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2022 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

// @strict-types


/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции, предназначенные для использования другими 
// объектами конфигурации или другими программами
///////////////////////////////////////////////////////////////////////////////// 
#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты
		.ДобавитьТестовыйНабор("ПроверкаИсключений")
		.ДобавитьТест("ТестДолжен_ПроверитьОбработкуОшибкиНаСервере", "Проверка на корректную обработку ошибки при запросе")
		.ДобавитьТест("ТестДолжен_ПроверитьОбработкуОшибкиПравДоступа", "Проверка на корректную обработку ошибки доступа")
		.ДобавитьТест("ТестДолжен_ПроверитьОбработкуОшибкиВалидации", "Проверка на корректную обработку ошибки валидации")
		.ДобавитьТест("ТестДолжен_ПроверитьОбработкуКастомнойОшибки", "Проверка на корректную обработку кастомной ошибки")
	;
		
КонецПроцедуры

#Область События

//@skip-check module-empty-method
Процедура ПередВсемиТестами() Экспорт
	
КонецПроцедуры

//@skip-check module-empty-method
Процедура ПередКаждымТестом() Экспорт
	
КонецПроцедуры

//@skip-check module-empty-method
Процедура ПослеКаждогоТеста() Экспорт
	
КонецПроцедуры

//@skip-check module-empty-method
Процедура ПослеВсехТестов() Экспорт
	
КонецПроцедуры

#КонецОбласти

Процедура ТестДолжен_ПроверитьОбработкуОшибкиНаСервере() Экспорт
	Запрос = НовыйЗапросСоВсемиПараметрами(); // HTTPСервисЗапрос
	Результат = бф_ОбработкаHTTPЗапросов.ОбработатьЗапрос(
		Запрос,
		"тест_КонтроллерХТТП.ОбработчикСИсключением",
		Метаданные.HTTPСервисы.тест_ХТТПСервис
	);
	
	ЮТест.ОжидаетЧто(Результат)
		.Свойство("КодСостояния").БольшеИлиРавно(500)
	;
	Ответ = бф_КоннекторХТТП.JsonВОбъект(Результат.ПолучитьТелоКакПоток()); // Соответствие
	ЮТест.ОжидаетЧто(Ответ)
		.Свойство("title").Содержит("внутренняя ошибка сервера")
		.Свойство("status").Равно(500)
		.Свойство("instance").Равно("/test")
		.Свойство("type").Равно(бф_ФабрикаХТТП.КодыТиповОшибок().ОшибкаСервера)
		.Свойство("detail").Содержит("Поле объекта не обнаружено")
		.Свойство("seanceId").Равно(НомерСеансаИнформационнойБазы())
		.Свойство("traceId").Заполнено()
	;
	События = Новый ТаблицаЗначений();
	Отбор = Новый Структура("Данные,Сеанс", Ответ.Получить("traceId"), Ответ.Получить("seanceId"));
	ВыгрузитьЖурналРегистрации(События, Отбор);
	
	ЮТест.ОжидаетЧто(События)
		.Заполнено()
		.Свойство("[0].Комментарий").Содержит("CustomQueryParam1")
		.Свойство("[0].Комментарий").Содержит("some-action")
		.Свойство("[0].Комментарий").Содержит("ТелоЗапроса")
		.Свойство("[0].Метаданные").Равно(Метаданные.HTTPСервисы.тест_ХТТПСервис.ПолноеИмя())
	;
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьОбработкуОшибкиПравДоступа() Экспорт
	Запрос = НовыйЗапросСоВсемиПараметрами(); // HTTPСервисЗапрос
	Результат = бф_ОбработкаHTTPЗапросов.ОбработатьЗапрос(
		Запрос,
		"тест_КонтроллерХТТП.ОбработчикСОшибкойДоступа",
		Метаданные.HTTPСервисы.тест_ХТТПСервис
	);
	
	ЮТест.ОжидаетЧто(Результат)
		.Свойство("КодСостояния").Равно(403);
	;
	Ответ = бф_КоннекторХТТП.JsonВОбъект(Результат.ПолучитьТелоКакПоток()); // Соответствие
	ЮТест.ОжидаетЧто(Ответ)
		.Свойство("title").Содержит("доступа")
		.Свойство("status").Равно(403)
		.Свойство("instance").Равно("/test")
		.Свойство("type").Равно(бф_ФабрикаХТТП.КодыТиповОшибок().ОшибкаДоступа)
		.Свойство("detail").Содержит("no acces")
	;
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьОбработкуОшибкиВалидации() Экспорт
	
	Запрос = НовыйЗапросСоВсемиПараметрами(); // HTTPСервисЗапрос
	Результат = бф_ОбработкаHTTPЗапросов.ОбработатьЗапрос(
		Запрос,
		"тест_КонтроллерХТТП.ОбработчикСОшибкойВалидации",
		Метаданные.HTTPСервисы.тест_ХТТПСервис
	);
	
	ЮТест.ОжидаетЧто(Результат)
		.Свойство("КодСостояния").Равно(400);
	;
	Ответ = бф_КоннекторХТТП.JsonВОбъект(Результат.ПолучитьТелоКакПоток()); // Соответствие
	ЮТест.ОжидаетЧто(Ответ)
		.Свойство("title").Содержит("валидации")
		.Свойство("status").Равно(400)
		.Свойство("instance").Равно("/test")
		.Свойство("type").Равно(бф_ФабрикаХТТП.КодыТиповОшибок().ОшибкаВалидации)
		.Свойство("detail").Содержит("wrong data")
	;
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьОбработкуКастомнойОшибки() Экспорт
	
	Запрос = НовыйЗапросСоВсемиПараметрами(); // HTTPСервисЗапрос
	Результат = бф_ОбработкаHTTPЗапросов.ОбработатьЗапрос(
		Запрос,
		"тест_КонтроллерХТТП.ОбработчикСКастомнойОшибкой",
		Метаданные.HTTPСервисы.тест_ХТТПСервис
	);
	
	ЮТест.ОжидаетЧто(Результат)
		.Свойство("КодСостояния").Равно(400);
	;
	Ответ = бф_КоннекторХТТП.JsonВОбъект(Результат.ПолучитьТелоКакПоток()); // Соответствие
	ЮТест.ОжидаетЧто(Ответ)
		.Свойство("title").Содержит("Недостаточно средств на счете")
		.Свойство("status").Равно(400)
		.Свойство("instance").Равно("/test")
		.Свойство("type").Равно("OUT_OF_CREDIT")
		.Свойство("detail").Содержит("У вас недостаточно средств на счете")
		.Свойство("balance").Равно(400)
	;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйЗапросСоВсемиПараметрами()
	
	Запрос = Обработки.ЮТHTTPСервисЗапрос.Создать();
	Запрос
		.Метод("GET")
		.БазовыйURL("example.com")
		.ОтносительныйURL("/test")
		.ДобавитьПараметрURL("URIParam1", "some-action")
		.ДобавитьПараметрЗапроса("QueryParam1", XMLСтрока(ЮТТестовыеДанные.СлучайнаяСтрока()))
		.ДобавитьПараметрЗапроса("QueryParam2", XMLСтрока(ЮТТестовыеДанные.СлучайнаяДата()))
		.ДобавитьПараметрЗапроса("QueryParam3", СтрРазделить(XMLСтрока(ЮТТестовыеДанные.СлучайнаяДата()), "T").Получить(0))
		.ДобавитьПараметрЗапроса("QueryParam4", XMLСтрока(Истина))
		.ДобавитьПараметрЗапроса("QueryParam6", XMLСтрока(Новый УникальныйИдентификатор()))
		.ДобавитьПараметрЗапроса("CustomQueryParam1", Формат(ЮТТестовыеДанные.СлучайнаяДата(), "ДФ = 'ггггММддЧЧммсс'"))
	;
	
	//@skip-check structure-consructor-too-many-keys
	Запрос.УстановитьТелоКакСтрокуJSON(
		Новый Структура(
			"field1, field2, field3, field4", 
			"value",
			4.20,
			Истина,
			XMLСтрока(ЮТТестовыеДанные.СлучайнаяДата())				
		)
	);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти
