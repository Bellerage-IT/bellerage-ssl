//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2022 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

///////////////////////////////////////////////////////////////////
// ПрограммныйИнтерфейс
// Экспортные процедуры и функции для прикладного использования 
/////////////////////////////////////////////////////////////////// 
#Область ПрограммныйИнтерфейс

// Проверить.
//  Переводит мокито в режим проверки вызовов
// Параметры:
//  Объект - Произвольный - Устанавливает проверяемый объект, вызовы методов которого будем проверять
// 
// Возвращаемое значение:
//  ОбщийМодуль
Функция Проверить(Объект) Экспорт
	
	УстановитьПараметрыПроверки(Объект);
	Возврат МокитоПроверки;
	
КонецФункции

// Количество вызовов.
//  Считает вызовы метода по переданным параметрам
// Параметры:
//  ИмяМетода - Строка - Имя метода проверяемого объекта
//            - Произвольный - Вызов метода проверяемого объекта
//  ПараметрыВызова - Массив из Произвольный - Параметры вызова метода проверяемого объекта, необходим при указании имени метода
// Возвращаемое значение:
//  ОбщийМодуль
Функция КоличествоВызовов(ИмяМетода = Неопределено, ПараметрыВызова = Неопределено) Экспорт
	
	Параметры = ПараметрыПроверки();
	
	Если МокитоСлужебный.ЭтоСтруктураВызоваМетода(ИмяМетода) Тогда
		СтруктураВызоваМетода = ИмяМетода;
	Иначе
		СтруктураВызоваМетода = МокитоСлужебный.СтруктураВызоваМетода(Параметры.ПроверяемыйОбъект, ИмяМетода, ПараметрыВызова);
	КонецЕсли;
	
	Если СтруктураВызоваМетода.Объект <> Параметры.ПроверяемыйОбъект Тогда
		ВызватьИсключение "Установлен другой проверяемый объект";
	КонецЕсли;
	
	Параметры.СтруктураВызоваМетода = СтруктураВызоваМетода;
	
	Возврат МокитоПроверки;
	
КонецФункции

// Равно.
//  Проверяет подобранные вызовы. Их количество должно быть равно переданному значение, иначе вызывается исключение
// Параметры:
//  Количество - Число - Ожидаемое количество вызовов
//  Описание - Строка - Описание проверки, необходимо для идентификации упавшей проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль
Функция Равно(Количество, Знач Описание = Неопределено) Экспорт
	
	Статистика = СтатистикаВызовов();
	ЮТУтверждения
		.Что(Статистика, Описание)
		.ИмеющееПредставление(ОписаниеПроверяемогоОбъекта())
		.ИмеетДлину(Количество);
	
	Возврат МокитоПроверки;
	
КонецФункции

// Больше.
//  Проверяет подобранные вызовы. Их количество должно быть больше переданного значения, иначе вызывается исключение
// Параметры:
//  Количество - Число
//  Описание - Строка - Описание проверки, необходимо для идентификации упавшей проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль
Функция Больше(Количество, Знач Описание = Неопределено) Экспорт
	
	Статистика = СтатистикаВызовов();
	ЮТУтверждения
		.Что(Статистика, Описание)
		.ИмеющееПредставление(ОписаниеПроверяемогоОбъекта())
		.ИмеетДлинуБольше(Количество);
	
	Возврат МокитоПроверки;
	
КонецФункции

// Меньше.
//  Проверяет подобранные вызовы. Их количество должно быть меньше переданного значения, иначе вызывается исключение
// Параметры:
//  Количество - Число
//  Описание - Строка - Описание проверки, необходимо для идентификации упавшей проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль
Функция Меньше(Количество, Знач Описание = Неопределено) Экспорт
	
	Статистика = СтатистикаВызовов();
	ЮТУтверждения
		.Что(Статистика, Описание)
		.ИмеющееПредставление(ОписаниеПроверяемогоОбъекта())
		.ИмеетДлинуМеньше(Количество);
	
	Возврат МокитоПроверки;
	
КонецФункции

// Заполнено.
//  Проверяет, что есть вызовы метода, соответствующие условию
// Параметры:
//  Описание - Строка - Описание проверки, необходимо для идентификации упавшей проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль
Функция Заполнено(Знач Описание = Неопределено) Экспорт
	
	Статистика = СтатистикаВызовов(Истина);
	ЮТУтверждения
		.Что(Статистика, Описание)
		.ИмеющееПредставление(ОписаниеПроверяемогоОбъекта())
		.Заполнено();
	
	Возврат МокитоПроверки;
	
КонецФункции

// Пусто.
//  Проверяет, что нет вызовов метода, соответствующих условию
// Параметры:
//  Описание - Строка - Описание проверки, необходимо для идентификации упавшей проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль
Функция Пусто(Знач Описание = Неопределено) Экспорт
	
	Статистика = СтатистикаВызовов(Истина);
	ЮТУтверждения
		.Что(Статистика, Описание)
		.ИмеющееПредставление(ОписаниеПроверяемогоОбъекта())
		.НеЗаполнено();
	
	Возврат МокитоПроверки;
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции для служебного использования внутри подсистемы
///////////////////////////////////////////////////////////////////////////////// 
#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, составляющие внутреннюю реализацию модуля 
///////////////////////////////////////////////////////////////////////////////// 
#Область СлужебныеПроцедурыИФункции

#Область Параметры

// Параметры проверки.
// 
// Возвращаемое значение:
//  Структура:
//  * ПроверяемыйОбъект - Произвольный
//  * СтруктураВызоваМетода - см. МокитоСлужебный.СтруктураВызоваМетода
Функция ПараметрыПроверки()
	
	Параметры = МокитоСлужебный.Настройки().ПараметрыПроверки;
	
	Возврат Параметры;
	
КонецФункции

Процедура УстановитьПараметрыПроверки(Объект = Неопределено, СтруктураВызоваМетода = Неопределено)
	
	ПараметрыОбучения = Новый Структура("ПроверяемыйОбъект, СтруктураВызоваМетода", Объект, СтруктураВызоваМетода);
	
	МокитоСлужебный.Настройки().ПараметрыПроверки = ПараметрыОбучения;
	
КонецПроцедуры

#КонецОбласти

Функция СтатистикаВызовов(Первый = Ложь)
	
	Параметры = ПараметрыПроверки();
	СтруктураВызоваМетода = Параметры.СтруктураВызоваМетода;
	
	ВызовыМетода = МокитоСлужебный.СтатистикаВызовов(СтруктураВызоваМетода.Объект, СтруктураВызоваМетода.ИмяМетода);
	
	Если ВызовыМетода = Неопределено Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураВызоваМетода.Параметры) Тогда
		
		Результат = Новый Массив();
		
		Для Каждого ВызовМетода Из ВызовыМетода Цикл
			
			Если ВызовМетода.Параметры.Количество() < СтруктураВызоваМетода.Параметры.Количество() Тогда
				ВызватьИсключение "Сигнатура метода содержит меньше параметров";
			КонецЕсли;
			
			КоличествоПараметров = СтруктураВызоваМетода.Параметры.Количество();
			Успешно = Истина;
			
			Для Инд = 0 По КоличествоПараметров - 1 Цикл
				
				Параметр = ВызовМетода.Параметры[Инд];
				Условие = СтруктураВызоваМетода.Параметры[Инд];
				
				Если МокитоСлужебный.ЭтоМаскаПарамера(Условие) Тогда
					Успешно = МокитоСлужебный.ПроверитьПараметр(Параметр, Условие);
				Иначе
					Успешно = Параметр = Условие;
				КонецЕсли;
				
				Если НЕ Успешно Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Успешно Тогда
				Результат.Добавить(ВызовМетода);
				Если Первый Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ВызовыМетода = Результат;
		
	КонецЕсли;
	
	Возврат ВызовыМетода;
	
КонецФункции

Функция ОписаниеПроверяемогоОбъекта()
	
	СтруктураВызоваМетода = ПараметрыПроверки().СтруктураВызоваМетода;
	Объект = СтруктураВызоваМетода.Объект;
	ПредставлениеТипа = ЮТОбщий.ПредставлениеТипа(ТипЗнч(Объект));
	Возврат СтрШаблон(" - вызовы метода `%1(%2).%3`,", Объект, ПредставлениеТипа, СтруктураВызоваМетода.ИмяМетода);
	
КонецФункции

#КонецОбласти
