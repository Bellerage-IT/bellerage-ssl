// @strict-types

#Область ПрограммныйИнтерфейс

// Обработать запрос.
// 
// Параметры:
//  Запрос - HTTPСервисЗапрос - Запрос
//  МетодОбработчик - Строка -  Имя экспортного метода обработчика. Параметры: Запрос, МетаданныеСервиса. Возвращает HTTPСервисОтвет
//  МетаданныеСервиса - ОбъектМетаданныхHTTPСервис - Метаданные ХТТП сервиса 
//  УстанавливатьТранзакцию - Булево -  указывает требуется ли устанавливать верхнеуровневую транзакцию
// 
// Возвращаемое значение:
// HTTPСервисОтвет - Ответ
Функция ОбработатьЗапрос(Запрос, МетодОбработчик, МетаданныеСервиса, УстанавливатьТранзакцию = Неопределено) Экспорт
	
	ТребуетсяУстанавливатьТранзакцию = УстанавливатьТранзакцию = Истина
		Или (УстанавливатьТранзакцию = Неопределено И Запрос.HTTPМетод <> "GET");
	
	Если ТребуетсяУстанавливатьТранзакцию Тогда
		//@skip-check begin-transaction
		НачатьТранзакцию();	
	КонецЕсли;
	
	Попытка
		
		//@skip-check server-execution-safe-mode
		Результат = Вычислить(МетодОбработчик + "(Запрос, МетаданныеСервиса)"); // HTTPСервисОтвет
		
		Если ТребуетсяУстанавливатьТранзакцию Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если ТребуетсяУстанавливатьТранзакцию Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Возврат ОбработатьИсключениеВызова(Запрос, МетаданныеСервиса, ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбработатьИсключениеВызова(Запрос, МетаданныеСервиса, ИнформацияОбОшибке)
	
	ПростойТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	// Ошибка проверки
	Если СтрНачинаетсяС(ПростойТекстОшибки, бф_ОбработкаЗапросовПовтИсп.БазовыйКодОшибкиПроверки()) Тогда
		ТелоОшибки = ПрочитатьТелоОшибки(
			СтрЗаменить(ПростойТекстОшибки, бф_ОбработкаЗапросовПовтИсп.БазовыйКодОшибкиПроверки(), "")
		);
		ТелоОшибки.instance = Запрос.ОтносительныйURL;
		ТелоОшибки.status = 400;
		Возврат бф_СервисыОбщее.ПлохойЗапрос(бф_КоннекторХТТП.ОбъектВJson(ТелоОшибки));
	КонецЕсли;
	
	// Ошибка доступа прикладная
	Если СтрНачинаетсяС(ПростойТекстОшибки, бф_ОбработкаЗапросовПовтИсп.БазовыйКодОшибкиДоступа()) Тогда
		
		ТелоОшибки = ПрочитатьТелоОшибки(
			СтрЗаменить(ПростойТекстОшибки, бф_ОбработкаЗапросовПовтИсп.БазовыйКодОшибкиДоступа(), "")
		);
		ТелоОшибки.instance = Запрос.ОтносительныйURL;
		ТелоОшибки.status = 403;
		Возврат бф_СервисыОбщее.ОшибкаДоступа(бф_КоннекторХТТП.ОбъектВJson(ТелоОшибки));
	КонецЕсли;
	
	// Ошибка доступа платформенная
	Если ИнформацияОбОшибке.ЯвляетсяОшибкойКатегории(КатегорияОшибки.НарушениеПравДоступа, Истина) Тогда
		Ошибка = НовыйОтветОшибка();
		Ошибка.status = 403;
		Ошибка.type = "ACESS_ERROR";
		Ошибка.instance = Запрос.ОтносительныйURL;
		//@skip-check bsl-nstr-string-literal-format
		Ошибка.title = НСтр("en = 'Access denied';ru = 'Ошибка доступа'");
		Ошибка.detail = ПростойТекстОшибки;
		Возврат бф_СервисыОбщее.ОшибкаДоступа(бф_КоннекторХТТП.ОбъектВJson(Ошибка));
	КонецЕсли;
	
	// Ошибка внутренняя
	ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ИдентификаторОшибки = ЗарегистрироватьОшибку(Запрос, МетаданныеСервиса, ИнформацияОбОшибке);
	ИтоговыйТекстОшибки = ?(
		бф_ОбработкаЗапросовПовтИсп.ВыводитьПодробноеОписаниеОшибок(),
		СтрШаблон(
			"%1",
			ПодробныйТекстОшибки
		),
		""
	);
	
	Ошибка = НовыйОтветОшибка();
	Ошибка.type = бф_ФабрикаХТТП.КодыТиповОшибок().ОшибкаСервера;
	Ошибка.status = 500;
	Ошибка.instance = Запрос.ОтносительныйURL;
	//@skip-check bsl-nstr-string-literal-format
	Ошибка.title = Нстр("en = 'An internal server error has occurred';ru = 'Произошла внутренняя ошибка сервера'");
	Ошибка.detail = ИтоговыйТекстОшибки;
	Ошибка.Вставить("traceId", ИдентификаторОшибки);
	Ошибка.Вставить("seanceId", НомерСеансаИнформационнойБазы());
	
	Возврат бф_СервисыОбщее.ОшибкаСервера(бф_КоннекторХТТП.ОбъектВJson(Ошибка));
	
КонецФункции

Функция ЗарегистрироватьОшибку(Запрос, МетаданныеСервиса, ИнформацияОбОшибке)
	
	ИдентификаторОшибки = ВРег(бф_ХТТПСлужебный.КонтрольнаяСуммаСтрокой(Новый УникальныйИдентификатор()));
	
	ИмяСобытия = СтрШаблон(
		"%1.%2.%3.%4",
		бф_ОбработкаЗапросовПовтИсп.БазовыйКодЖурналаРегистрации(),
		МетаданныеСервиса.КорневойURL,
		СтрСоединить(СтрРазделить(Запрос.ОтносительныйURL, "/", Ложь), "."),
		Запрос.HTTPМетод
	);
	
	ТекстОшибки = СформироватьТекстОшибки(Запрос, ИнформацияОбОшибке);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		МетаданныеСервиса,
		ИдентификаторОшибки,
		ТекстОшибки
	);
	
	Возврат ИдентификаторОшибки;
	
КонецФункции

Функция СформироватьТекстОшибки(Запрос, ИнформацияОбОшибке)
	
	ДанныеОшибки = Новый Соответствие();
	ДанныеОшибки.Вставить("ТекстОшибки", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
	ДанныеОшибки.Вставить("Заголовки", Новый Соответствие());
	бф_ХТТПСлужебный.ДополнитьСоответствие(ДанныеОшибки.Получить("Заголовки"), Запрос.Заголовки);
	ДанныеОшибки.Получить("Заголовки").Удалить("Authorization");
	
	ДанныеОшибки.Вставить("ПараметрыURL", Новый Соответствие());
	бф_ХТТПСлужебный.ДополнитьСоответствие(ДанныеОшибки.Получить("ПараметрыURL"), Запрос.ПараметрыURL);
	
	ДанныеОшибки.Вставить("ПараметрыЗапроса", Новый Соответствие());
	бф_ХТТПСлужебный.ДополнитьСоответствие(ДанныеОшибки.Получить("ПараметрыЗапроса"), Запрос.ПараметрыЗапроса);
	
	РазмерТела = Запрос.ПолучитьТелоКакПоток().Размер();
	Если РазмерТела < бф_ОбработкаЗапросовПовтИсп.МаксимальныйРазмерТелаДляЛогирования() Тогда 
		ДанныеОшибки.Вставить("ТелоЗапроса", Base64Строка(Запрос.ПолучитьТелоКакДвоичныеДанные()));
	Иначе
		ДанныеОшибки.Вставить("ПревышенЛимит", Истина);
		ДанныеОшибки.Вставить("ИсходныйРазмер", РазмерТела);
	КонецЕсли;
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеОшибки);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция НовыйОтветОшибка()
	
	Ошибка = Новый Структура();
	Ошибка.Вставить("type", "");
	Ошибка.Вставить("title", "");
	Ошибка.Вставить("status", 500);
	Ошибка.Вставить("detail", "");
	Ошибка.Вставить("instance", "");
	
	Возврат Ошибка;
КонецФункции

//@skip-check statement-type-change
Функция ПрочитатьТелоОшибки(ТелоОшибки)
	Результат = ЗначениеИзСтрокиВнутр(ТелоОшибки); // Структура
	
	Ошибка = НовыйОтветОшибка();
	Ошибка.type = бф_ХТТПСлужебный.СвойствоСтруктуры(Результат, "КодОшибки", Ошибка.type);
	Ошибка.title = бф_ХТТПСлужебный.СвойствоСтруктуры(Результат, "Заголовок", Ошибка.title);
	Ошибка.detail = бф_ХТТПСлужебный.СвойствоСтруктуры(Результат, "ПодробноеОписание", Ошибка.detail);
	
	ДопИнформация = бф_ХТТПСлужебный.СвойствоСтруктуры(Результат, "ДопИнформация"); // Структура
	Если ДопИнформация <> Неопределено Тогда
		бф_ХТТПСлужебный.ДополнитьСтруктуру(Ошибка, ДопИнформация, Ложь);
	КонецЕсли;
	
	Возврат Ошибка;
КонецФункции

#КонецОбласти
