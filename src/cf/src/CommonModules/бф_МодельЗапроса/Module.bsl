//@skip-check module-structure-top-region,module-structure-method-in-regions

//  Подсистема "Работа со схемой запроса"
//	Автор: Калякин Андрей Г.
//  Описание размещено на ресурсе: https://infostart.ru/public/811832
// Версия 1.02 
//  - Уточнены параметры ДобавитьОператор
//  - Изменена функция ДобавитьКопиюОператора: добавлено копирование отбора, установка параметров
//  - Добавлена процедура ЗаменитьИсточник
// Версия 1.03
//  - Исправлено копирование полей для функции ДобавитьКопиюОператора.
//    Ранее могла возникнуть ситуация, когда при копировании поля привязывались к другому порядку колонок запроса
//  - Добавлен комментарий к УстановитьВыражениеПоля
// Версия 1.04
//	- ДобавитьСоединение - добавлен параметр Заменить
//	- ДобавитьУсловиеСоединения - функция стала внутреннего использования
//  - УстановитьИндексЗапросаПакета - исправлено наименование параметра
//	- ДобавитьУсловиеОграниченияПоВидуДоступа - добавлен новый метод
//	- ЗаменитьИсточник - добавлен необязательный параметр ПараметрыВиртуальнойТаблицы
//  - ДобавитьПоле - параметр Оператор можно не передавать, будет использован последний
//  - ДобавитьИсточник - убрано добавление полей по описанию временной таблицы
//  - ДобавитьЗапросПакетаИзТаблицы - добавлена обработка параметра ТаблицаИсточника на основании описания временной таблицы
//  - ДобавитьОтбор - новая процедура, позволяет добавлять отбор через использование запроса пакета
//  - ПолучитьОписаниеВременнойТаблицы - тип доступного поля временной таблицы из менеджера временных таблиц устанавливатся в неопределено для типа Строка.
//  Это связано с неправильной обработкой этого поля, когда по нему делаются соединения: возникает ошибка сравнения полей несовместимых типов.
//  Установка типа поля в неопределено никаких ограничений за собой не несет, т.к. эта информация используется только на этапе построений схемы запроса и не
//  учитывается при непосредсвенном выполнении запроса.
// Версия 1.05
//  - ДобавитьПоле - добавлено примечание: можно использовать для замены существующего поля, если использовать тот же псевдоним
// Исправления и обновления:
//  - ДобавитьУсловиеХарактеристики - исправлена ошибка
//  - ДобавитьУсловиеОграниченияПоВидуДоступа - добавлено описание
// Новые функции:
//  - УстановитьВыражениеПолей
//  - ИзменитьПсевдонимКолонки
//  - УдалитьКолонку
// Версия 1.06
// Новые функции:
//  - ДобавитьИтог
// Версия 1.07
// Исправления:
//  - УстановитьИндексЗапросаПакета - новая реализация из-за появления нового метода Переместить с 8.3.11
//	- ДобавитьОператор - в процедуре ошибочно считался оператор пустым, если у него нет источников, теперь проверяется количество полей на равенство нулю
// Версия 1.08
// Исправления:
//	- ДобавитьОператор - в процедуре уточнено получение нового оператора: если по нулевому индексу оператор имеет хоть одно поле или хоть один источник, то добавляется новый, иначе - переиспользуется с нулевым индексом
// Версия 1.09
// Исправления:
//	- ДобавитьСоединениеХарактеристики - убран параметр ПсевдонимИсточникаХарактеристик. Теперь данные об источнике характеристик можно передать в параметре ИсточникХарактеристик
// Версия 1.10
//
// Версия 2.0.0.1
//
// - Рефакторинг:
//	ДобавитьЗапросПакета->ЗапросПакета
//	ДобавитьЗапросПакетаИзТаблицы->ЗапросПакетаИзТаблицы
//	ДобавитьОператор->Оператор
//	ДобавитьКопиюОператора->КопияОператора
//	ДобавитьИсточник->Источник
//	ДобавитьПоле->Поле
//	УстановитьВыражениеПоля->ВыражениеПоля
//	ДобавитьПорядок->Порядок
//	ПолучитьОписаниеВременнойТаблицы->ОписаниеВременнойТаблицы
//  ПолучитьОписаниеВложенногоЗапроса->ОписаниеВложенногоЗапроса
//	ДобавитьСоединение->Соединение
//	СоздатьЗапрос->Запрос
//	ДобавитьОтбор->Оператор.Отбор.Добавить()
//	ДобавитьИтог->Итог
//
//	- Поле	- добавлена возможность добавить доступные поля через указание "*"
//	- Добавлены процедуры работы с компоновкой данных:
//		* СкопироватьЭлементыСхемыЗапроса
//		* СхемаЗапросаКомпоновкиДанных - Конструирует схему запроса по описанию из схемы компоновки данных
//		* СкопироватьОтборКомпоновкиДанных - Копирует условия отбора из элементов СКД в отбор оператора схемы запроса
//	- ЗапросПакета - добавлен параметр ОператорВыбрать, теперь нет нужды отдельно получать оператор, достаточно сразу при получении пакета
//	- ЗапросПакетаИзТаблицы - добавлен параметр ОператорВыбрать
//  - УдалитьКолонку, УдалитьПоле - добавлено безопасное удаление: если колонки/поля по имени нет, то ничего не происходит
//	- ОписаниеВременнойТаблицы - добавлен параметр Колонки, расширен список источников: таблица значений, временная таблица
//
//	Новые функции:
//	- УдалитьИсточник
//
// 	Структурирование модуля по областям
//  Обновлена обработка "Конструктор схемы запроса"
//
//	Версия 2.0.0.2 (не опубликована)
//	Добавлено описание функций: 
//	- ОписаниеВременнойТаблицы
//	При конструировании типов полей временной таблицы для строкового типа определяется тип Неопределено. Это сделано для того, чтобы
//	тип не определялся как строка неограниченной длины
//
//	Версия 2.0.0.3 (не опубликована)
//	Уточнена реализация функции Итог, добавлен подробный комментарий
//
//	Версия 2.0.0.4 (не опубликована)
//	Добавлены примеры и описание к функциям Поле, ВыражениеПоля
//
//	Версия 2.0.0.5 (не опубликована)
//	Поле(*) - убрано ограничение по колонке поля, оставлена проверка на существующее поле в операторе
//  ЗапросПакетаИзТаблицы - добавлена возможность передавать коллекцию колонок
//	Соединение - добавлена поддержка условия "*" - по всем общим полям источников
//	ВыражениеПоля - добавлена поддержка коллекции для полей к которым применяется агрегатная функция
//
//  ОписаниеВременнойТаблицы - если передается менеджер, то проверяется если такая временная таблица в менеджере и если нет, то берет просто имя из текущей схемы
//  ЗаменитьИсточник - в качестве таблицы теперь можно указать источник, а не только доступную таблицу
//  Запрос - добавлен параметр очистки схемы
//
//	Версия 2.0.0.6 (не опубликована)
//  ДобавитьУсловиеСоединения - исправлено некорректное формирование условия по И

#Область МодельЗапроса

// бф_МодельЗапроса = Общий.бф_МодельЗапроса(ТекстЗапроса);
// бф_МодельЗапроса = Общий.бф_МодельЗапроса(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
// бф_МодельЗапроса = Общий.бф_МодельЗапроса(ДинамическийСписок);
Функция МодельЗапроса(ТекстЗапроса = Неопределено, НастройкиКомпоновки = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодельЗапроса = Обработки.бф_МодельЗапроса.Создать();
	

	Если ТекстЗапроса = Неопределено ИЛИ ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат МодельЗапроса;
	КонецЕсли;
	
	ТипЗначенияТекстаЗапроса = ТипЗнч(ТекстЗапроса);
	
	Если ТипЗначенияТекстаЗапроса = Тип("СхемаКомпоновкиДанных") Тогда
		Возврат МодельЗапроса.УстановитьСхемуКомпоновкиДанных(ТекстЗапроса, НастройкиКомпоновки);
	КонецЕсли;

	Если ТипЗначенияТекстаЗапроса = Тип("ТаблицаФормы") Тогда
		Возврат МодельЗапроса.УстановитьСхемуТаблицыСписка(ТекстЗапроса);
	КонецЕсли;
	
	Если ТипЗначенияТекстаЗапроса = Тип("ДинамическийСписок") Тогда
		Возврат МодельЗапроса.УстановитьСхемуДинамическогоСписка(ТекстЗапроса);
	КонецЕсли;
	
	Если ТипЗначенияТекстаЗапроса = Тип("Запрос") Тогда
		Возврат МодельЗапроса.УстановитьЗапрос(ТекстЗапроса);
	КонецЕсли;
	
	Если ТипЗначенияТекстаЗапроса = Тип("СхемаЗапроса") Тогда
		Если ТипЗнч(НастройкиКомпоновки) = Тип("МенеджерВременныхТаблиц") Тогда
			МодельЗапроса.УстановитьМенеджерВременныхТаблиц(НастройкиКомпоновки);
		КонецЕсли;
		Возврат МодельЗапроса.УстановитьСхемуЗапроса(ТекстЗапроса);
	КонецЕсли;
	
	Если ТипЗначенияТекстаЗапроса = Тип("МенеджерВременныхТаблиц") Тогда
		Возврат МодельЗапроса.УстановитьМенеджерВременныхТаблиц(ТекстЗапроса);
	КонецЕсли;
	
	МодельЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Возврат МодельЗапроса;
КонецФункции

#КонецОбласти

#Область ПакетЗапроса
	
// Добавляет новый запрос в пакет. Запрос может быть типа: Выборка, Создание временной таблицы, Уничтожение временной таблицы.
//
// Параметры:
//	СхемаЗапроса 				- СхемаЗапроса
//	ИмяВременнойТаблицы 		- Строка - указывает имя временной таблицы, в которую будет помещен результат запроса или которая будет уничтожена
//	ЗапросНаУничтожение			- Булево
//	ВыбиратьРазрешенные 		- Булево
//
// Возвращаемое значение:
//	ЗапросВыбораСхемыЗапроса, ЗапросУничтоженияТаблицыСхемыЗапроса
//
Функция ЗапросПакета(СхемаЗапроса = Неопределено, ИмяВременнойТаблицы = "", ВыбиратьРазрешенные = Ложь, Оператор = Null, Очистить = Ложь) Экспорт
	Если СхемаЗапроса = Неопределено Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
	КонецЕсли;
	Если Очистить Тогда
		СхемаЗапроса.ПакетЗапросов.Очистить();
	КонецЕсли;
	ПакетЗапросов	= СхемаЗапроса.ПакетЗапросов;
	Если ПакетЗапросов.Количество() = 1 И СхемаЗапроса.ПолучитьТекстЗапроса() = "" Тогда
		ЗапросПакета	= ПакетЗапросов[0];//  первый запрос может быть только на выборку
	Иначе
		ЗапросПакета	= СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	КонецЕсли;
	ЗапросПакета.ТаблицаДляПомещения = ИмяВременнойТаблицы;
	ЗапросПакета.ВыбиратьРазрешенные = ВыбиратьРазрешенные;
	Если Оператор <> Null Тогда
		Оператор = Оператор(ЗапросПакета);
	КонецЕсли;
	Возврат ЗапросПакета;
КонецФункции

// Добавляет новый запрос в пакет. Запрос может быть типа: Выборка, Создание временной таблицы, Уничтожение временной таблицы.
//
// Параметры:
//	СхемаЗапроса 				- СхемаЗапроса
//	ИмяВременнойТаблицы 		- Строка - указывает имя временной таблицы, в которую будет помещен результат запроса или которая будет уничтожена
//	ЗапросНаУничтожение			- Булево
//	ВыбиратьРазрешенные 		- Булево
//
// Возвращаемое значение:
//	ЗапросВыбораСхемыЗапроса, ЗапросУничтоженияТаблицыСхемыЗапроса
//
Функция ЗапросУничтожения(СхемаЗапроса, ИмяВременнойТаблицы, Очистить = Ложь) Экспорт
	Если СхемаЗапроса = Неопределено Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
	КонецЕсли;
	ПакетЗапросов	= СхемаЗапроса.ПакетЗапросов;
	Если Очистить Тогда
		ПакетЗапросов.Очистить();
	КонецЕсли;
	Если ПакетЗапросов.Количество() = 1 И СхемаЗапроса.ПолучитьТекстЗапроса() = "" Тогда
		ЗапросПакета = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
		СхемаЗапроса.ПакетЗапросов.Удалить(0);
	Иначе
		ЗапросПакета = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	КонецЕсли;
	ЗапросПакета.ИмяТаблицы = ИмяВременнойТаблицы;
	Возврат ЗапросПакета;
КонецФункции

// Добавляет запрос пакета с источником из временной таблицы
//
// Параметры:
//	СхемаЗапроса		- СхемаЗапроса
//	ТаблицаИсточника	- ЗапросВыбораСхемыЗапроса - запрос, который будет использован в качестве источника данных
//						- Строка - имя временной таблицы, которая будет использована в качестве источника
//						- Структура - описание временной таблицы
//	ПсевдонимИсточника	- Строка - псевдоним источника, который будет добавлен в конструируемый запрос
//	ТаблицаДляПомещения	- Строка - имя таблицы для помещения результата запроса
//	ЗапросНаУничтожение	- Булево - добавляет запрос на уничтожение таблицы источника
//	ВыбиратьРазрешенные - Булево
//	ОператорВыбрать		- ОператорВыбратьСхемыЗапроса - если передать, то будет заполнен оператор выборки
//
// Возвращаемое значение:
//  ЗапросВыбораСхемыЗапроса
//
Функция ЗапросПакетаИзТаблицы(СхемаЗапроса, Знач ТаблицаИсточника, Знач ПсевдонимИсточника = "", Знач ВыбираемыеКолонки = Неопределено, ТаблицаДляПомещения = "", ЗапросНаУничтожение = Ложь, ВыбиратьРазрешенные = Ложь, ОператорВыбрать = Неопределено, Очистить = Ложь) Экспорт
	ПрефиксПоля = "";
	Если СхемаЗапроса = Неопределено Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
	КонецЕсли;
	Если Очистить Тогда
		СхемаЗапроса.ПакетЗапросов.Очистить();
	КонецЕсли;
	//Если ТипЗнч(ВыбираемыеКолонки) = ТипЗнч("Строка") Тогда
	//	ВыбираемыеКолонки = СтрРазделить(СтрЗаменить(ВыбираемыеКолонки, " ", ""), ",");
	//КонецЕсли;
	ТипЗначения = ТипЗнч(ТаблицаИсточника);
	Если ТипЗначения = Тип("Структура") Тогда
		
		Если ТаблицаИсточника.Тип = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
			ИмяТаблицы		= ТаблицаИсточника.ИмяТаблицы;
		Иначе
			ИмяТаблицы		= "";
		КонецЕсли;
		Если ПустаяСтрока(ПсевдонимИсточника) Тогда
			Если ПустаяСтрока(ТаблицаДляПомещения) Тогда
				ПсевдонимИсточника = ИмяТаблицы;
			Иначе
				ПсевдонимИсточника = ТаблицаДляПомещения;
			КонецЕсли;
		КонецЕсли;
		
		Если Лев(ИмяТаблицы, 1) = "&" Тогда
			ПрефиксПоля = ПсевдонимИсточника+".";
		КонецЕсли; 
		
		ЗапросПакета 	= бф_МодельЗапроса.ЗапросПакета(СхемаЗапроса, ТаблицаДляПомещения);
		ОператорВыбрать = бф_МодельЗапроса.Оператор(ЗапросПакета);
		Источник = бф_МодельЗапроса.Источник(ОператорВыбрать, ТаблицаИсточника, ПсевдонимИсточника);
		
		//Для каждого Поле Из ТаблицаИсточника.ДоступныеПоля Цикл
		//	Если ВыбираемыеКолонки <> Неопределено И ВыбираемыеКолонки.Найти(Поле.Имя) = Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	бф_МодельЗапроса.Поле(ЗапросПакета, ОператорВыбрать,, ?(ПустаяСтрока(ПсевдонимИсточника), "", ПсевдонимИсточника+".")+Поле.Имя, Поле.Имя);
		//КонецЦикла;
	Иначе
		Если ТипЗначения = Тип("Строка") Тогда
			Для каждого ТекущийЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
				Если ТипЗнч(ТекущийЗапросПакета) = Тип("ЗапросВыбораСхемыЗапроса")
					И ТекущийЗапросПакета.ТаблицаДляПомещения = ТаблицаИсточника Тогда
					ЗапросИсточника = ТекущийЗапросПакета;
				КонецЕсли;
			КонецЦикла;
		Иначе//ЗапросВыбораСхемыЗапроса
			ЗапросИсточника 	= ТаблицаИсточника;
			ТаблицаИсточника 	= ЗапросИсточника.ТаблицаДляПомещения;
		КонецЕсли;
		
		Если ПустаяСтрока(ПсевдонимИсточника) Тогда
			Если ПустаяСтрока(ТаблицаДляПомещения) Тогда
				ПсевдонимИсточника = СтрЗаменить(ТаблицаИсточника, ".", "");
			Иначе
				ПсевдонимИсточника = ТаблицаДляПомещения;
			КонецЕсли;
		КонецЕсли;
		ЗапросПакета 	= бф_МодельЗапроса.ДобавитьЗапросПакета(СхемаЗапроса, ТаблицаДляПомещения);
		ОператорВыбрать = бф_МодельЗапроса.ДобавитьОператор(ЗапросПакета);
		Источник = бф_МодельЗапроса.Источник(ОператорВыбрать, ТаблицаИсточника, ПсевдонимИсточника);
		//Для каждого Поле Из ЗапросИсточника.Колонки Цикл
		//	Если ВыбираемыеКолонки <> Неопределено И ВыбираемыеКолонки.Найти(Поле.Псевдоним) = Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	бф_МодельЗапроса.Поле(ЗапросПакета, ОператорВыбрать,, ПсевдонимИсточника+"."+Поле.Псевдоним, Поле.Псевдоним);
		//КонецЦикла;
	КонецЕсли;
	
	Если ВыбиратьРазрешенные Тогда
		ЗапросПакета.ВыбиратьРазрешенные = Истина;
	КонецЕсли;
	
	Если ЗапросНаУничтожение Тогда
		ЗапросПакетаНаУничтожение	= СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
		ЗапросПакетаНаУничтожение.ИмяТаблицы = ?(ТипЗнч(ТаблицаИсточника) = Тип("Строка"), ТаблицаИсточника, ТаблицаИсточника.ИмяТаблицы);
	КонецЕсли;
	
	Если ВыбираемыеКолонки <> Неопределено Тогда
		ТипВыбираемыеКолонки = ТипЗнч(ВыбираемыеКолонки);
		Если ТипВыбираемыеКолонки = Тип("Строка") 
			ИЛИ ТипВыбираемыеКолонки = Тип("Массив") 
			ИЛИ ТипВыбираемыеКолонки = Тип("ФиксированныйМассив") Тогда
			Для каждого Колонка Из бф_МодельЗапросаСлужебный.Массив(ВыбираемыеКолонки) Цикл
				Поле(ЗапросПакета, ОператорВыбрать,, ПрефиксПоля+Колонка);
			КонецЦикла;
		ИначеЕсли ТипВыбираемыеКолонки = Тип("Структура") ИЛИ ТипВыбираемыеКолонки = Тип("ФиксированнаяСтруктура") Тогда
			Для каждого Колонка Из ВыбираемыеКолонки Цикл
				Если ЗначениеЗаполнено(Колонка.Значение) Тогда
					Поле(ЗапросПакета, ОператорВыбрать,, ПрефиксПоля + Колонка.Значение, Колонка.Ключ);
				Иначе
					Поле(ЗапросПакета, ОператорВыбрать,, ПрефиксПоля + Колонка.Ключ);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ДоступныеПоля = Источник.Источник.ДоступныеПоля;
			Для каждого Колонка Из ВыбираемыеКолонки Цикл
				Если ДоступныеПоля.Найти(Колонка.Имя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Поле(ЗапросПакета, ОператорВыбрать,, ПрефиксПоля+Колонка.Имя);
			КонецЦикла;
		КонецЕсли;
		//Для каждого ПутьКПолю Из бф_МодельЗапросаСлужебный.Массив(ВыбираемыеКолонки) Цикл
		//	Поле(ЗапросПакета, ОператорВыбрать,, ПутьКПолю);
		//КонецЦикла;
	КонецЕсли;
	
	Возврат ЗапросПакета;
КонецФункции

Процедура УстановитьИндексЗапросаПакета(СхемаЗапроса, ЗапросПакета, Индекс) Экспорт 
	СхемаЗапроса.ПакетЗапросов.Переместить(ЗапросПакета, Индекс);
КонецПроцедуры

Процедура Начать(СхемаЗапроса, ЗапросПакета = Неопределено, ОператорВыбрать = Неопределено, СтруктураЗапроса = Неопределено) Экспорт
	СхемаЗапроса = Неопределено;
	ЗапросПакета = Неопределено;
	ОператорВыбрать = Неопределено;
	СтруктураЗапроса = Неопределено;
КонецПроцедуры // ()

Функция ОписаниеЗапроса(СхемаЗапроса, СтруктураЗапроса = Неопределено, ИмяЗапроса) Экспорт
	Индекс = СхемаЗапроса.ПакетЗапросов.Количество()-1;
	Если Индекс = -1 Тогда
	    СтруктураЗапроса = Неопределено;
	Иначе
		Если СтруктураЗапроса = Неопределено Тогда
			СтруктураЗапроса = Новый Структура;
		КонецЕсли;
		СтруктураЗапроса.Вставить(ИмяЗапроса, Индекс);
	КонецЕсли;
	Возврат СтруктураЗапроса;
КонецФункции // ОписаниеЗапроса()
 
#КонецОбласти

#Область Оператор
	
// Добавляет оператор выборки в запрос пакета.
//
// Параметры:
//	ЗапросПакета	- ЗапросВыбораСхемыЗапроса - запрос, в состав которого будет добавлен оператор
//	Параметры 		- Структура - значения структуры соответствуют свойствам оператора схемы запроса:
//  * ВыбиратьРазличные				- Булево
//	* ТипОбъединения				- ТипОбъединенияСхемыЗапроса - по умолчанию - ОбъединитьВсе
//	* КоличествоПолучаемыхЗаписей	- Число - по умолчанию - неограничено
//
// Возвращаемое значение:
//	ОператорВыбратьСхемыЗапроса
//
// Пример:
//	ОператорЗапроса = ДобавитьОператор(СхемаЗапроса, Новый Структура("ТипОбъединения, КоличествоПолучаемыхЗаписей", ТипОбъединенияСхемыЗапроса.Объединить, 50));
//
Функция Оператор(ЗапросПакета, Параметры = Неопределено) Экспорт
	Перем Оператор;
	Если ЗапросПакета.Операторы.Количество() = 1 Тогда
		Оператор = ЗапросПакета.Операторы[0];
		Если НЕ Оператор.Источники.Количество() = 0 ИЛИ НЕ Оператор.ВыбираемыеПоля.Количество() = 0 Тогда
			Оператор = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если Оператор = Неопределено Тогда
		Оператор = ЗапросПакета.Операторы.Добавить();
	КонецЕсли; 
	Если Параметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Оператор, Параметры);
	КонецЕсли;
	Возврат Оператор;
КонецФункции

// Добавляет оператор-копию оператора выборки в запрос пакета.
//
// Параметры:
//	ЗапросПакета	- ЗапросВыбораСхемыЗапроса - запрос, в состав которого будет добавлен оператор
//  Оператор		- ОператорВыбратьСхемыЗапроса - оператор для копирования
//	Параметры 		- Структура - значения структуры соответствуют свойствам оператора схемы запроса:
//  * ВыбиратьРазличные				- Булево
//	* ТипОбъединения				- ТипОбъединенияСхемыЗапроса - по умолчанию - ОбъединитьВсе
//	* КоличествоПолучаемыхЗаписей	- Число - по умолчанию - неограничено
//
// Возвращаемое значение:
//	ОператорВыбратьСхемыЗапроса
Функция КопияОператора(ЗапросПакета, Оператор, Параметры = Неопределено) Экспорт
	НовыйОператор = Оператор(ЗапросПакета, Параметры);
	ЗаполнитьЗначенияСвойств(НовыйОператор, Оператор,, "ВыбиратьРазличные,КоличествоПолучаемыхЗаписей,ТипОбъединения");
	Если Параметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НовыйОператор, Параметры); 
	КонецЕсли;
	//  Источники
	Для каждого ЭлементИсточника Из Оператор.Источники Цикл
		Источник 	= ЭлементИсточника.Источник;
		ТипЗначения = ТипЗнч(Источник);
		Если ТипЗначения = Тип("ТаблицаСхемыЗапроса") Тогда
			ДобавитьИсточник(НовыйОператор, Источник.ИмяТаблицы, Источник.Псевдоним, Источник.Параметры);
		ИначеЕсли ТипЗначения = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
			ВложенныйЗапрос = ДобавитьИсточник(НовыйОператор, ПолучитьОписаниеВложенногоЗапроса(), Источник.Псевдоним).Источник.Запрос;
		ИначеЕсли ТипЗначения = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
			ДобавитьИсточник(НовыйОператор, Новый Структура("Тип, ИмяТаблицы, ДоступныеПоля", Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), Источник.ИмяТаблицы, Источник.ДоступныеПоля), Источник.Псевдоним);
		КонецЕсли;
	КонецЦикла;
	//  Соединения источников
	Для каждого ЭлементИсточника Из Оператор.Источники Цикл
		Для каждого ЭлементСоединения Из ЭлементИсточника.Соединения Цикл
			ДобавитьСоединение(НовыйОператор, ЭлементИсточника.Источник.Псевдоним, ЭлементСоединения.Источник.Источник.Псевдоним, Строка(ЭлементСоединения.Условие), ЭлементСоединения.ТипСоединения);
		КонецЦикла;
	КонецЦикла;
	//  Выбираемые поля
	ВыбираемыеПоляИсточника = Оператор.ВыбираемыеПоля;
	
	ИндексОператора = ЗапросПакета.Операторы.Индекс(Оператор);
	Для Индекс = 0 По ЗапросПакета.Колонки.Количество()-1 Цикл
		Выражение = Строка(ЗапросПакета.Колонки[Индекс].Поля[ИндексОператора]);
		Если ПустаяСтрока(Выражение) Тогда // это означает, что в предыдущем операторе этого поля нет, такое возможно при нескольких объединениях, когда часть полей NULL
			Продолжить;
		КонецЕсли;
		Поле(ЗапросПакета, НовыйОператор, Индекс, Выражение);
	КонецЦикла;
	
	//Для каждого Поле Из ВыбираемыеПоляИсточника Цикл
	//	Поле(ЗапросПакета, НовыйОператор, ВыбираемыеПоляИсточника.Индекс(Поле), Строка(Поле));
	//КонецЦикла;
	//  Отбор
	Отбор = НовыйОператор.Отбор;
	Для каждого Выражение Из Оператор.Отбор Цикл
		Отбор.Добавить(Выражение);
	КонецЦикла;
	Возврат НовыйОператор;
КонецФункции

#КонецОбласти

#Область Источник

Функция ПолучитьИмяГруппыДоступныхТаблиц(Таблица) 
	СоответствиеГруппы = Новый Соответствие;
	СоответствиеГруппы.Вставить("критерийотбора"		, "КритерииОтбора");
	СоответствиеГруппы.Вставить("планобмена"			, "ПланыОбмена");
	СоответствиеГруппы.Вставить("константа"				, "Константы");
	СоответствиеГруппы.Вставить("справочник"			, "Справочники");
	СоответствиеГруппы.Вставить("документ"				, "Документы");
	СоответствиеГруппы.Вставить("последовательность"	, "Последовательности");
	СоответствиеГруппы.Вставить("журналдокументов"		, "ЖурналыДокументов");
	СоответствиеГруппы.Вставить("перечисление"			, "Перечисления");
	СоответствиеГруппы.Вставить("планвидовхарактеристик", "ПланыВидовХарактеристик");
	СоответствиеГруппы.Вставить("плансчетов"			, "ПланыСчетов");
	СоответствиеГруппы.Вставить("регистрсведений"		, "РегистрыСведений");
	СоответствиеГруппы.Вставить("регистрнакопления" 	, "РегистрыНакопления");
	СоответствиеГруппы.Вставить("регистрбухгалтерии"	, "РегистрыБухгалтерии");
	СоответствиеГруппы.Вставить("бизнеспроцесс"			, "БизнесПроцессы");
	СоответствиеГруппы.Вставить("задача"				, "Задачи");
	СоответствиеГруппы.Вставить("временнаятаблица"		, "Временные таблицы");
	Возврат СоответствиеГруппы[НРег(Лев(Таблица, СтрНайти(Таблица, ".")-1))];
КонецФункции

Функция ИмяВиртуальнойТаблицы(ИмяТаблицы) Экспорт
	МассивСлов = СтрРазделить(ИмяТаблицы, ".");
	Возврат МассивСлов[0]+"."+МассивСлов[2];
КонецФункции

Функция СтруктураПараметровВиртуальнойТаблицы(ИмяТаблицы, Параметры = Неопределено) Экспорт
	МассивСлов						= СтрРазделить(ИмяТаблицы, ".");
	ОбобщенноеИмяВиртуальнойТаблицы	= ВРег(МассивСлов[0]+"."+МассивСлов[МассивСлов.ВГраница()]);
	Если 		ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРНАКОПЛЕНИЯ.ОБОРОТЫ" Тогда
		ОписаниеПараметров = "НачалоПериода,КонецПериода,Периодичность,Условие";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРСВЕДЕНИЙ.СРЕЗПЕРВЫХ"
		ИЛИ 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРСВЕДЕНИЙ.СРЕЗПОСЛЕДНИХ" 
		ИЛИ 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРНАКОПЛЕНИЯ.ОСТАТКИ" Тогда
		ОписаниеПараметров = "Период,Условие";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРНАКОПЛЕНИЯ.ОСТАТКИИОБОРОТЫ" Тогда
		ОписаниеПараметров = "НачалоПериода,КонецПериода,Периодичность,МетодДополненияПериодов,Условие";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРБУХГАЛТЕРИИ.ОСТАТКИ" Тогда
		ОписаниеПараметров = "Период,УсловиеСчета,Субконто,Условие";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРБУХГАЛТЕРИИ.ДВИЖЕНИЯССУБКОНТО" Тогда
		ОписаниеПараметров = "НачалоПериода,КонецПериода,Условие,Порядок,Первые";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРБУХГАЛТЕРИИ.ОБОРОТЫ" Тогда
		ОписаниеПараметров = "НачалоПериода,КонецПериода,Периодичность,УсловиеСчета,Субконто,Условие,УсловиеКорСчета,КорСубконто";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРБУХГАЛТЕРИИ.ОБОРОТЫДТКТ" Тогда
		ОписаниеПараметров = "НачалоПериода,КонецПериода,Периодичность,УсловиеСчетаДт,СубконтоДт,УсловиеСчетаКт,СубконтоКт,Условие";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРБУХГАЛТЕРИИ.ОСТАТКИИОБОРОТЫ" Тогда
		ОписаниеПараметров = "НачалоПериода,КонецПериода,Периодичность,МетодДополненияПериодов,УсловиеСчета,Субконто,Условие";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРРАСЧЕТА.ФАКТИЧЕСКИЙПЕРИОДДЕЙСТВИЯ"
		Или 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРРАСЧЕТА.ДАННЫЕГРАФИКА"	Тогда
		ОписаниеПараметров = "Условие";
	ИначеЕсли 	СтрНачинаетсяС(ОбобщенноеИмяВиртуальнойТаблицы, "РЕГИСТРРАСЧЕТА.БАЗА") Тогда
		ОписаниеПараметров = "ИзмеренияОсновногоРегистра,ИзмеренияБазовогоРегистра,Разрезы,Условие";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "ЗАДАЧА.ЗАДАЧИПОИСПОЛНИТЕЛЮ" Тогда
		ОписаниеПараметров = "Условие,Исполнитель";
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	МассивПараметров	= СтрРазделить(ОписаниеПараметров, ",");
	СтруктураПараметров	= Новый Структура;
	Если Параметры = Неопределено Тогда
		Для Индекс = 0 По МассивПараметров.ВГраница() Цикл
			СтруктураПараметров.Вставить(МассивПараметров[Индекс], Индекс);
		КонецЦикла;
	Иначе
		Для Индекс = 0 По МассивПараметров.ВГраница() Цикл
			Выражение = Строка(Параметры[Индекс].Выражение);
			Если ПустаяСтрока(Выражение) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураПараметров.Вставить(МассивПараметров[Индекс], бф_МодельЗапросаСлужебный.ЭкранироватьТекст(Выражение));
		КонецЦикла;
	КонецЕсли;
	Возврат ?(СтруктураПараметров.Количество() = 0, Неопределено, СтруктураПараметров);
КонецФункции

Функция ДоступныеПоля(Колонки, ДоступныеКолонки = Неопределено, ИсключенныеКолонки = Неопределено) 
	ДоступныеПоля = Новый Массив;
	Для каждого Колонка Из Колонки Цикл
		Если ДоступныеКолонки <> Неопределено И ДоступныеКолонки.Найти(Колонка.Имя) = Неопределено
			ИЛИ ИсключенныеКолонки <> Неопределено И ИсключенныеКолонки.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если Колонка.ТипЗначения.СодержитТип(Тип("Строка")) Тогда //строковый тип нельзя привести к ограниченному, т.к. это только в описании типов возможно
			ДоступныеПоля.Добавить(Новый Структура("Имя, ТипЗначения", Колонка.Имя, Неопределено));
		Иначе
			ДоступныеПоля.Добавить(Новый Структура("Имя, ТипЗначения", Колонка.Имя, Колонка.ТипЗначения));
		КонецЕсли;
	КонецЦикла;
	Возврат ДоступныеПоля;
КонецФункции

// Возвращает структуру с описанием источника. Если нет уверенности, что временная таблица описана в текущей запросе, то эта функция безопасно проверить наличие
// таблицы в менеджере временных таблиц. В случае если таблица отсутствует в менеджере, будет возвращено строковое имя таблицы, что означает, что таблица описана\
// в текущей схеме.
//
// Параметры:
//	ИмяТаблицы 			- Строка - имя таблицы, для таблицы из параметра запроса имя начинается с '&'
//	Источник 			- МенеджерВременныхТаблиц, ТаблицаЗначений
//	КоллекцияКолонок	- Строка, КоллекцияКолонокРезультатаЗапроса, КоллекцияКолонокТаблицыЗначений, КоллекцияКолонокДереваЗначений - список колонок из источника
//
// Возвращаемое значение:
//	Структура
//	*Тип - ОписаниеВременнойТаблицыСхемыЗапроса - Тип("ОписаниеВременнойТаблицыСхемыЗапроса")
//	*ИмяТаблицы - Строка - имя таблицы, для таблицы из параметра запроса имя начинается с '&'
//	*ДоступныеПоля - Массив - элементы вида Структура("Имя, ТипЗначения"), где Имя - имя поля, ТипЗначения - ОписаниеТипов
//
Функция ОписаниеВременнойТаблицы(ИмяТаблицы, ИсточникДанных = Неопределено, КоллекцияКолонок = Неопределено) Экспорт
	Если ТипЗнч(КоллекцияКолонок) = Тип("Строка") Тогда
		мКолонки = бф_МодельЗапросаСлужебный.Массив(КоллекцияКолонок);
	Иначе
		мКолонки = КоллекцияКолонок;
	КонецЕсли;
	ДоступныеПоля = Неопределено;
	ТипЗначенияИсточника = ТипЗнч(ИсточникДанных);
	Если ТипЗначенияИсточника = Тип("МенеджерВременныхТаблиц") Тогда
		Если ИсточникДанных.Таблицы.Найти(ИмяТаблицы) = Неопределено Тогда
			Возврат ИмяТаблицы;
		КонецЕсли;
		ДоступныеПоля = ДоступныеПоля(ИсточникДанных.Таблицы[ИмяТаблицы].Колонки, мКолонки);
	ИначеЕсли ТипЗначенияИсточника = Тип("ТаблицаЗначений") Тогда
		ДоступныеПоля = ДоступныеПоля(ИсточникДанных.Колонки, мКолонки);
	ИначеЕсли ТипЗначенияИсточника = Тип("ДанныеФормыКоллекция") Тогда
		ДоступныеПоля = ДоступныеПоля(ИсточникДанных.Выгрузить(Новый Массив).Колонки, мКолонки, ЗначениеВМассиве("ИсходныйНомерСтроки"));
	ИначеЕсли СтрНайти(ИсточникДанных, "ТабличнаяЧасть.") > 0 Тогда
		ДоступныеПоля = ДоступныеПоля(ИсточникДанных.Выгрузить(Новый Массив).Колонки, мКолонки);
	ИначеЕсли мКолонки <> Неопределено Тогда
		ДоступныеПоля = Новый Массив;
		Если ТипЗнч(мКолонки) = Тип("Массив") Тогда
			Для каждого Колонка Из мКолонки Цикл
				ДоступныеПоля.Добавить(Новый Структура("Имя, ТипЗначения", Колонка, Неопределено));
			КонецЦикла;
		Иначе
			Для каждого Колонка Из мКолонки Цикл
				ДоступныеПоля.Добавить(Новый Структура("Имя, ТипЗначения", Колонка.Имя, Неопределено));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 
	Возврат Новый Структура("Тип, ИмяТаблицы, ДоступныеПоля", Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), ИмяТаблицы, ДоступныеПоля);
КонецФункции

Функция ОписаниеВложенногоЗапроса(ДоступныеПоля = Неопределено) Экспорт
	Возврат Новый Структура("Тип, ДоступныеПоля", Тип("ВложенныйЗапросСхемыЗапроса"), ДоступныеПоля);
КонецФункции

Функция ПараметрыВиртуальнойТаблицы(ИмяТаблицы, Параметры = Неопределено) Экспорт
	МассивСлов						= СтрРазделить(ИмяТаблицы, ".");
	ОбобщенноеИмяВиртуальнойТаблицы	= ВРег(МассивСлов[0]+"."+МассивСлов[МассивСлов.ВГраница()]);
	Если 		ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРНАКОПЛЕНИЯ.ОБОРОТЫ" Тогда
		ОписаниеПараметров = "НачалоПериода,КонецПериода,Периодичность,Условие";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРСВЕДЕНИЙ.СРЕЗПЕРВЫХ"
		ИЛИ 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРСВЕДЕНИЙ.СРЕЗПОСЛЕДНИХ" 
		ИЛИ 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРНАКОПЛЕНИЯ.ОСТАТКИ" Тогда
		ОписаниеПараметров = "Период,Условие";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРНАКОПЛЕНИЯ.ОСТАТКИИОБОРОТЫ" Тогда
		ОписаниеПараметров = "НачалоПериода,КонецПериода,Периодичность,МетодДополненияПериодов,Условие";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРБУХГАЛТЕРИИ.ОСТАТКИ" Тогда
		ОписаниеПараметров = "Период,УсловиеСчета,Субконто,Условие";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРБУХГАЛТЕРИИ.ДВИЖЕНИЯССУБКОНТО" Тогда
		ОписаниеПараметров = "НачалоПериода,КонецПериода,Условие,Порядок,Первые";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРБУХГАЛТЕРИИ.ОБОРОТЫ" Тогда
		ОписаниеПараметров = "НачалоПериода,КонецПериода,Периодичность,УсловиеСчета,Субконто,Условие,УсловиеКорСчета,КорСубконто";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРБУХГАЛТЕРИИ.ОБОРОТЫДТКТ" Тогда
		ОписаниеПараметров = "НачалоПериода,КонецПериода,Периодичность,УсловиеСчетаДт,СубконтоДт,УсловиеСчетаКт,СубконтоКт,Условие";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРБУХГАЛТЕРИИ.ОСТАТКИИОБОРОТЫ" Тогда
		ОписаниеПараметров = "НачалоПериода,КонецПериода,Периодичность,МетодДополненияПериодов,УсловиеСчета,Субконто,Условие";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРРАСЧЕТА.ФАКТИЧЕСКИЙПЕРИОДДЕЙСТВИЯ"
		Или 	ОбобщенноеИмяВиртуальнойТаблицы = "РЕГИСТРРАСЧЕТА.ДАННЫЕГРАФИКА"	Тогда
		ОписаниеПараметров = "Условие";
	ИначеЕсли 	СтрНачинаетсяС(ОбобщенноеИмяВиртуальнойТаблицы, "РЕГИСТРРАСЧЕТА.БАЗА") Тогда
		ОписаниеПараметров = "ИзмеренияОсновногоРегистра,ИзмеренияБазовогоРегистра,Разрезы,Условие";
	ИначеЕсли 	ОбобщенноеИмяВиртуальнойТаблицы = "ЗАДАЧА.ЗАДАЧИПОИСПОЛНИТЕЛЮ" Тогда
		ОписаниеПараметров = "Условие,Исполнитель";
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	МассивПараметров	= СтрРазделить(ОписаниеПараметров, ",");
	СтруктураПараметров	= Новый Структура;
	Если Параметры = Неопределено Тогда
		Для Индекс = 0 По МассивПараметров.ВГраница() Цикл
			СтруктураПараметров.Вставить(МассивПараметров[Индекс], Индекс);
		КонецЦикла;
	Иначе
		Для Индекс = 0 По МассивПараметров.ВГраница() Цикл
			Выражение = Строка(Параметры[Индекс].Выражение);
			Если ПустаяСтрока(Выражение) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураПараметров.Вставить(МассивПараметров[Индекс], бф_МодельЗапросаСлужебный.ЭкранироватьТекст(Выражение));
		КонецЦикла;
	КонецЕсли;
	Возврат ?(СтруктураПараметров.Количество() = 0, Неопределено, СтруктураПараметров);
КонецФункции

Процедура УстановитьПараметрыВиртуальнойТаблицы(Источник, ПараметрыВиртуальнойТаблицы) Экспорт
	ПараметрыИсточника	= Источник.Источник.Параметры;
	ТипЗначения = ТипЗнч(ПараметрыВиртуальнойТаблицы);
	Если ТипЗначения = Тип("Структура") Тогда 
		СтруктураПараметров = СтруктураПараметровВиртуальнойТаблицы(ИмяВиртуальнойТаблицы(Источник.Источник.ИмяТаблицы));
		Для каждого ЭлементПараметров Из ПараметрыВиртуальнойТаблицы Цикл
			Если ЭлементПараметров.Значение = "*" Тогда
				ПараметрыИсточника[СтруктураПараметров[ЭлементПараметров.Ключ]].Выражение = Новый ВыражениеСхемыЗапроса("&"+ЭлементПараметров.Ключ);
			Иначе
				ПараметрыИсточника[СтруктураПараметров[ЭлементПараметров.Ключ]].Выражение = Новый ВыражениеСхемыЗапроса(ЭлементПараметров.Значение);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗначения = Тип("ПараметрыТаблицыСхемыЗапроса") Тогда
		Индекс = -1;
		Для каждого Параметр Из ПараметрыВиртуальнойТаблицы Цикл
			Индекс = Индекс + 1;
			ПараметрыИсточника[Индекс].Выражение = Параметр.Выражение;
		КонецЦикла;
	Иначе //  массив
		Для Индекс = 0 По ПараметрыВиртуальнойТаблицы.ВГраница() Цикл
			ПараметрыИсточника[Индекс].Выражение = Новый ВыражениеСхемыЗапроса(ПараметрыВиртуальнойТаблицы[Индекс]);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Добавляет источник данных в оператор запроса.
// Для источника типа вложенного запроса доступ к вложенному запросу схемы запроса осуществляется так: Источник.Источник.Запрос.
//
// Параметры:
//	Оператор 		- ОператорВыбратьСхемыЗапроса.
//	ОписаниеТаблицы - Строка 	- имя таблицы. В качестве имени можно указать физическую или виртуальную таблицу.
//					- Структура - Структуру можно получить из сервисных функций (см. функцию бф_МодельЗапроса.ПолучитьОписаниеВложенногоЗапроса(), бф_МодельЗапроса.ПолучитьОписаниеВременнойТаблицы(ИмяТаблицы)).
//	Псевдоним 		- Строка 	- имя псевдонима, которое можно будет использовать при обращении к источнику
//	ПараметрыВиртуальнойТаблицы - Массив 	- параметры определяются индексом элемента массива. В качестве значения параметров выступает текстовое описание (см. встроенная справка - работа с запросом - таблицы - параметры).
//								- Структура - ключи структуры соответствуют названиям параметров виртуальной таблицы из справки в конфигураторе без пробелов. 
//
// Возвращаемое значение:
//	ИсточникСхемыЗапроса
//
Функция Источник(Оператор, ОписаниеТаблицы, Псевдоним = "", ПараметрыВиртуальнойТаблицы = Неопределено) Экспорт
	Если ТипЗнч(ОписаниеТаблицы) = Тип("Структура") Тогда
		Таблица			= ОписаниеТаблицы.Тип;
		Если Таблица = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
			ИмяТаблицы		= ОписаниеТаблицы.ИмяТаблицы;
		КонецЕсли;
		ДоступныеПоля 	= ОписаниеТаблицы.ДоступныеПоля;
	Иначе
		Таблица			= ОписаниеТаблицы;
		Если ТипЗнч(Таблица) = Тип("Строка") Тогда
			ИмяТаблицы		= Таблица;
			Если ПустаяСтрока(Псевдоним) Тогда
				Псевдоним = СтрЗаменить(бф_МодельЗапросаСлужебный.ОкончаниеСтрокиПослеРазделителя(Таблица), "&", "");
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Псевдоним) Тогда
				Если Таблица = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
					Псевдоним = бф_МодельЗапросаСлужебный.ИмяПоУникальномуИдентификатору(Новый УникальныйИдентификатор);
				КонецЕсли;
			КонецЕсли;
			ИмяТаблицы = Псевдоним;
		КонецЕсли;
		ДоступныеПоля 	= Неопределено;
	КонецЕсли;
	Если Таблица = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
		Оператор.Источники.Добавить(Таблица, ИмяТаблицы, Псевдоним);
	Иначе
		Оператор.Источники.Добавить(Таблица, Псевдоним);
	КонецЕсли;
	Для Каждого Источник Из Оператор.Источники Цикл
		Соединения = Источник.Соединения;
		Соединение = Соединения.НайтиПоПсевдониму(Псевдоним);
		Пока Соединение <> Неопределено Цикл
			Соединения.Удалить(Соединения.Индекс(Соединение));
			Соединение = Соединения.НайтиПоПсевдониму(Псевдоним);
		КонецЦикла;
	КонецЦикла;
	Источник = Оператор.Источники[Оператор.Источники.Количество()-1];
	Источник.Соединения.Очистить();
	Если ДоступныеПоля <> Неопределено Тогда
		ДоступныеПоляИсточника = Источник.Источник.ДоступныеПоля;
		ТипСтрока = Тип("Строка");
		Для Каждого СтруктураПоля Из ДоступныеПоля Цикл
			ТипЗначения = СтруктураПоля.ТипЗначения;
			Если ТипЗначения = Неопределено ИЛИ ТипЗначения.Типы().ВГраница() = -1 ИЛИ ТипЗначения.Типы()[0] = ТипСтрока Тогда
				//  Для типа строка нельзя задать ограниченный тип и из-за этого возникает ошибка выбора из временной таблицы
				ДоступныеПоляИсточника.Добавить(СтруктураПоля.Имя); 
			Иначе
				//  Нельзя передать составной тип, поэтому передается первый
				ДоступныеПоляИсточника.Добавить(СтруктураПоля.Имя, ТипЗначения.Типы()[0]); 
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	Если ПараметрыВиртуальнойТаблицы <> Неопределено Тогда
		УстановитьПараметрыВиртуальнойТаблицы(Источник, ПараметрыВиртуальнойТаблицы);
	КонецЕсли;
	Возврат Источник;
КонецФункции

Функция УдалитьИсточник(Оператор, Псевдоним) Экспорт
	Если ТипЗнч(Псевдоним) = Тип("Строка") Тогда
		Источник = Оператор.Источники.НайтиПоПсевдониму(Псевдоним);
	Иначе
		Источник = Псевдоним;
	КонецЕсли;
	Если ЗначениеЗаполнено(Источник) Тогда
		Оператор.Источники.Удалить(Оператор.Источники.Индекс(Источник));
	КонецЕсли;
КонецФункции

// Заменяет источник оператора выбрать с сохранением соединений и псевдонима.
//
// Параметры:
//  ЗапросПакета - ЗапросСхемыЗапроса
//  Оператор     - ОператорСхемыЗапроса
//  Источник     - Строка - Псевдоним источника
//			     - ИсточникСхемыЗапроса
//  Таблица      - Строка - Имя доступной таблицы (формат в справке Работа с запросами - Таблицы запросов). Если нужно передать имя временной таблицы, то указать ВременнаяТаблица.ИмяТаблицы
//				 - ИсточникСхемыЗапроса - 
//  Псевдоним    - Строка - если задан, то будет заменен на псевдоним. Если использовать "*", то будет использован псевдоним по-умолчанию из имени таблицы
//	ПараметрыВиртуальнойТаблицы - Структура
//
// Пример:
//  ЗаменитьИсточник(ЗапросПакета, ОператорВыбрать, "Документы", "Документ.ПоступлениеНаРасчетныйСчет");
//  ЗаменитьИсточник(ЗапросПакета, ОператорВыбрать, "Документы", "ВТ_РЕЗУЛЬТАТ");
Процедура ЗаменитьИсточник(ЗапросПакета, Оператор = Неопределено, Знач Источник, Таблица, Знач Псевдоним = "", ПараметрыВиртуальнойТаблицы = Неопределено) Экспорт
	Если Оператор = Неопределено Тогда
		Оператор = ЗапросПакета.Операторы[ЗапросПакета.Операторы.Количество()-1];
	КонецЕсли;
	Если ТипЗнч(Источник) = Тип("Строка") Тогда
		ПсевдонимИсточника = Источник;
		Источник  = Оператор.Источники.НайтиПоПсевдониму(ПсевдонимИсточника);
	Иначе 
		ПсевдонимИсточника = Источник.Источник.Псевдоним;
	КонецЕсли;
	ИндексИсточника = Оператор.Источники.Индекс(Источник);
	ИндексОператора = ЗапросПакета.Операторы.Индекс(Оператор);
	ВыбираемыеПоля  = Новый Массив;
	Для каждого Колонка Из ЗапросПакета.Колонки Цикл
		Выражение =  Строка(Колонка.Поля[ИндексОператора]);
		Если ПустаяСтрока(Выражение) Тогда // при нескольких объединениях часть полей может отсутствовать (NULL поля)
			Продолжить;
		КонецЕсли;
		ВыбираемыеПоля.Добавить(Новый Структура("Выражение, Псевдоним", Строка(Колонка.Поля[ИндексОператора]), Колонка.Псевдоним));
	КонецЦикла;
	Отборы = Новый Массив;
	Для каждого Отбор Из Оператор.Отбор Цикл
		Отборы.Добавить(Строка(Отбор));
	КонецЦикла;
	Соединения = Новый Массив;
	Для каждого _Источник Из Оператор.Источники Цикл
		Для каждого _Соединение Из _Источник.Соединения Цикл
			Если СтрНайти(_Соединение.Условие, ПсевдонимИсточника)>0 Тогда
				Соединения.Добавить(Новый Структура("ИсточникСлева,ИсточникСправа,ТипСоединения,Условие", _Источник.Источник.Псевдоним, _Соединение.Источник.Источник.Псевдоним, _Соединение.ТипСоединения, Строка(_Соединение.Условие)));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Оператор.Источники.Удалить(ИндексИсточника);
	Оператор.Отбор.Очистить();
	Если ТипЗнч(Таблица) = Тип("Строка") И СтрНачинаетсяС(Таблица, "ВременнаяТаблица.") Тогда
		Таблица = СтрЗаменить(Таблица, "ВременнаяТаблица.", "");
	КонецЕсли;
	Если ПустаяСтрока(Псевдоним) Тогда
		Псевдоним = ПсевдонимИсточника;
	КонецЕсли;
	НовыйИсточник = Источник(Оператор, Таблица, Псевдоним, ПараметрыВиртуальнойТаблицы);
	Если Псевдоним <> ПсевдонимИсточника Тогда
		Для каждого _Соединение Из Соединения Цикл
			Соединение(Оператор, СтрЗаменить(_Соединение.ИсточникСлева, ПсевдонимИсточника, Псевдоним), СтрЗаменить(_Соединение.ИсточникСправа, ПсевдонимИсточника, Псевдоним), СтрЗаменить(_Соединение.Условие, ПсевдонимИсточника, Псевдоним), _Соединение.ТипСоединения);
		КонецЦикла;
		Для каждого Поле Из ВыбираемыеПоля Цикл
			Попытка
				Поле(ЗапросПакета, Оператор,, СтрЗаменить(Поле.Выражение, ПсевдонимИсточника, Псевдоним), Поле.Псевдоним);
			Исключение
			КонецПопытки;
		КонецЦикла;
		Для каждого Отбор Из Отборы Цикл
			Оператор.Отбор.Добавить(СтрЗаменить(Отбор, ПсевдонимИсточника, Псевдоним));
		КонецЦикла;
	Иначе
		Для каждого _Соединение Из Соединения Цикл
			Соединение(Оператор, _Соединение.ИсточникСлева, _Соединение.ИсточникСправа, _Соединение.Условие, _Соединение.ТипСоединения);
		КонецЦикла;
		Для каждого Поле Из ВыбираемыеПоля Цикл
			Попытка
				Поле(ЗапросПакета, Оператор,, Поле.Выражение, Поле.Псевдоним);
			Исключение
			КонецПопытки;
		КонецЦикла;
		Для каждого Отбор Из Отборы Цикл
			Оператор.Отбор.Добавить(Отбор);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Поле
	
// Добавляет поле оператора Выбрать с одновременным размещением в колонке запроса. Может использоваться для подмены поля,
// например в копии оператора.
//
// Параметры:
//	ЗапросПакета 	- ЗапросВыбораСхемыЗапроса
//	Оператор 		- ОператорВыбратьСхемыЗапроса - если не задан, то используется последний
//	ИндексКолонки 	- Число - индекс колонки, в которой будет размещено поле оператора Выбрать.
//	ПутьКПолю 		- Строка - псевдоним источника.имя поля. Если вместо имени поля указать "*", то будут выбраны все доступные поля, которые еще не были добавлены
//	Псевдоним 		- Строка - псевдоним колонки, которая будет ассоциирована с полем оператора. Если использовать уже существующий, то произойдет замена
//
// Возвращаемое значение:
//	ПоляСхемыЗапроса.
//
// Примеры:
//  Новое поле:
//		бф_МодельЗапроса.Поле(ЗапросПакета, ОператорВыбрать,, "Документ.Контрагент", "Контрагент");
// 	Установка поля или подмена в копии оператора, можно подменить путь или выражение для колонки запроса:
//		бф_МодельЗапроса.Поле(ЗапросПакета, ОператорВыбрать,, "ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)", "Контрагент");
//
Функция Поле(ЗапросПакета, Оператор = Неопределено, ИндексКолонки = Неопределено, ПутьКПолю, Псевдоним = "") Экспорт
	Если Оператор = Неопределено Тогда
		ИндексОператора = ЗапросПакета.Операторы.Количество()-1;
		Оператор = ЗапросПакета.Операторы[ИндексОператора];
	Иначе
		ИндексОператора = ЗапросПакета.Операторы.Индекс(Оператор);
	КонецЕсли;
	ВыбираемыеПоля	= Оператор.ВыбираемыеПоля;
	Колонки = ЗапросПакета.Колонки;
	Если СтрЗаканчиваетсяНа(ПутьКПолю, "*") Тогда
		ПозицияТочки = СтрНайти(ПутьКПолю, ".");
		Если ПозицияТочки = 0 Тогда // поля по всем источникам, доступным из оператора
			Для каждого Источник Из Оператор.Источники Цикл
				ПсевдонимИсточника = Источник.Источник.Псевдоним;
				Для каждого ДоступноеПоле Из Источник.Источник.ДоступныеПоля Цикл
					мПутьКПолю = ПсевдонимИсточника+"."+ДоступноеПоле.Имя;
					//Если Колонки.Найти(ДоступноеПоле.Имя) <> Неопределено ИЛИ ВыбираемыеПоля.Найти(мПутьКПолю) <> Неопределено Тогда
					Колонка = Колонки.Найти(ДоступноеПоле.Имя);
					Если ВыбираемыеПоля.Найти(мПутьКПолю) <> Неопределено ИЛИ Колонка <> Неопределено И Колонка.Поля[ИндексОператора] <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Если ТипЗнч(ДоступноеПоле) = Тип("ДоступноеПолеСхемыЗапроса") Тогда
						Если Колонка <> Неопределено Тогда
							Поле = ВыбираемыеПоля.Добавить(мПутьКПолю, Колонки.Индекс(Колонка));
						Иначе
							Поле = ВыбираемыеПоля.Добавить(мПутьКПолю);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		Иначе// поля из указанного до точки источником
			ПсевдонимИсточника = Лев(ПутьКПолю, ПозицияТочки-1);
			Для каждого ДоступноеПоле Из Оператор.Источники.НайтиПоПсевдониму(ПсевдонимИсточника).Источник.ДоступныеПоля Цикл
				мПутьКПолю = ПсевдонимИсточника+"."+ДоступноеПоле.Имя;
				//Если Колонки.Найти(ДоступноеПоле.Имя) <> Неопределено ИЛИ ВыбираемыеПоля.Найти(мПутьКПолю) <> Неопределено Тогда
				Колонка = Колонки.Найти(ДоступноеПоле.Имя);
				Если ВыбираемыеПоля.Найти(мПутьКПолю) <> Неопределено ИЛИ Колонка <> Неопределено И Колонка.Поля[ИндексОператора] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ТипЗнч(ДоступноеПоле) = Тип("ДоступноеПолеСхемыЗапроса") Тогда
					Если Колонка <> Неопределено Тогда
						Поле = ВыбираемыеПоля.Добавить(мПутьКПолю, Колонки.Индекс(Колонка));
					Иначе
						Поле = ВыбираемыеПоля.Добавить(мПутьКПолю);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе 
		Если ИндексКолонки = Неопределено И НЕ ПустаяСтрока(Псевдоним) Тогда // найти индекс колонки по псевдониму
			Колонка = Колонки.Найти(Псевдоним);
			Если Колонка <> Неопределено Тогда
				ИндексКолонки = Колонки.Индекс(Колонка);
			КонецЕсли;
		КонецЕсли;
		Если ИндексКолонки = Неопределено Тогда
			Если ИндексОператора > 0 И НЕ ПустаяСтрока(Псевдоним) Тогда
				//  Добавление колонки Null, чтобы добавить поле в существующий индекс добавленной колонки
				ЗапросПакета.Операторы[0].ВыбираемыеПоля.Добавить("Null");
				ИндексКолонки = Колонки.Количество() - 1;
				Колонки[ИндексКолонки].Псевдоним = Псевдоним;
				Поле = ВыбираемыеПоля.Добавить(ПутьКПолю, ИндексКолонки);
			Иначе
				Поле = ВыбираемыеПоля.Добавить(ПутьКПолю);
				Если НЕ ПустаяСтрока(Псевдоним) Тогда
					ИндексКолонки = Колонки.Количество()-1;
					Колонки[ИндексКолонки].Псевдоним = Псевдоним;
				КонецЕсли; 
			КонецЕсли;
		Иначе
			Поле = ВыбираемыеПоля.Добавить(ПутьКПолю, ИндексКолонки);
			Если НЕ ПустаяСтрока(Псевдоним) Тогда
				Колонки[ИндексКолонки].Псевдоним = Псевдоним;// восстановление псевдонима, который сбрасывается при добавлении поля по дефолту
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	Возврат Поле;
КонецФункции

Процедура УдалитьПоле(Оператор, ИмяПоля) Экспорт
	ВыбираемыеПоля 	= Оператор.ВыбираемыеПоля;
	Попытка
		Поле = ВыбираемыеПоля.Найти(ИмяПоля);
	Исключение
		Возврат;
	КонецПопытки;
	Если Поле <> Неопределено Тогда
		ВыбираемыеПоля.Удалить(ВыбираемыеПоля.Индекс(Поле));
	КонецЕсли;
КонецПроцедуры

// Устанавливает новое выражение поля. Может использоваться для установки агрегатных функций или для подмены выражения поля. Во втором случае
// подменяемое поле ищется по пути к данным. Если нужно подменить поле по названию, то нужно использовать фунцию Поле (см.примеры).
// !Используется для уже выбранного ранее поля оператора выбрать, может не сохранять позицию по колонке всего запроса (зависит от генерируемого псевдонима).
//
// Параметры:
//	Оператор		  	- ОператорВыбратьСхемыЗапроса
//						- ПоляСхемыЗапроса
//	АгрегатнаяФункция 	- Строка - имя агрегатной функции, которая будет применена для конструирования выражения
//	ПутьКПолю			- Строка - полный путь к полю или прежнее выражение поля
//	Выражение			- Строка - новое выражение поля
//						- ВыражениеСхемыЗапроса - 
//
// Примеры:
// 	Пример для агрегатной функции:
//		бф_МодельЗапроса.ВыражениеПоля(ОператорВыбрать, "СУММА", "Документ.СуммаДокумента");
// 	Пример для подмены, можно подменить на существующее поле или выражение:
//		бф_МодельЗапроса.ВыражениеПоля(ОператорВыбрать,, "Документ.Контрагент", "ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)");
//		бф_МодельЗапроса.ВыражениеПоля(ОператорВыбрать,, "Документ.Контрагент", "Документ.Организация");
// 	Аналогично можно добиться подмены и так, можно подменить путь или выражение для колонки запроса:
//		бф_МодельЗапроса.Поле(ЗапросПакета, ОператорВыбрать,, "ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)", "Контрагент");
//
Функция ВыражениеПоля(Оператор, АгрегатнаяФункция = "", ПутьКПолю, Знач Выражение = Неопределено) Экспорт
	Если ТипЗнч(ПутьКПолю) <> Тип("Строка") Тогда
	    Для каждого Поле Из ПутьКПолю Цикл
			ВыражениеПоля(Оператор, АгрегатнаяФункция, Поле.Имя);
		КонецЦикла;
	    Возврат Выражение;
	КонецЕсли;
	Если АгрегатнаяФункция <> "" Тогда
		Если Выражение <> Неопределено Тогда
			Выражение = АгрегатнаяФункция+"("+Строка(Выражение)+")";
		Иначе
			Выражение = АгрегатнаяФункция+"("+ПутьКПолю+")";
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Выражение) = Тип("Строка") Тогда
		Выражение = Новый ВыражениеСхемыЗапроса(Выражение);
	КонецЕсли;
	Если ТипЗнч(Оператор) = Тип("ПоляСхемыЗапроса") Тогда
		ВыбираемыеПоля = Оператор;
	Иначе
		ВыбираемыеПоля = Оператор.ВыбираемыеПоля;
	КонецЕсли;
	Поле = ВыбираемыеПоля.Найти(ПутьКПолю);
	ВыбираемыеПоля.Установить(ВыбираемыеПоля.Индекс(Поле), Выражение);
	Возврат Выражение;
КонецФункции

// Аналог функции УстановитьВыражениеПоля, но для массива полей
//
// Параметры:
//	Оператор		  	- ОператорВыбратьСхемыЗапроса
//						- ПоляСхемыЗапроса
//	АгрегатнаяФункция 	- Строка - имя агрегатной функции, которая будет применена для конструирования выражения
//	ИмяПоля				- Строка - псевдоним поля или полный путь к полю, можно передать массив полей через запятую
//						- Массив - 
// Пример:
//	УстановитьВыражениеПолей(ОператорВыбрать, "СУММА", "СуммаВзаиморасчетовОстаток,СуммаОстаток,СуммаУпрОстаток,СуммаЛимитаОстаток,СуммаВзаиморасчетовРазмещено,СуммаРазмещено,СуммаУпрРазмещено,СуммаЛимитаРазмещено,СуммаВзаиморасчетовРезерв,СуммаРезерв,СуммаУпрРезерв,СуммаЛимитаРезерв");
//
Процедура УстановитьВыражениеПолей(Оператор, АгрегатнаяФункция, ИмяПоля) Экспорт
	Если ТипЗнч(ИмяПоля) = Тип("Строка") Тогда
		МассивПолей = СтрРазделить(СтрЗаменить(ИмяПоля, " ", ""), ",");
	Иначе
		МассивПолей = ИмяПоля;
	КонецЕсли; 
	Для каждого Поле Из МассивПолей Цикл
		УстановитьВыражениеПоля(Оператор, АгрегатнаяФункция, Поле);
	КонецЦикла;
КонецПроцедуры

// Добавляет порядок по колонке запроса. Удобно в одной строке сразу указать направление.
//
// Параметры:
//	ЗапросПакета 	- ЗапросВыбораСхемыЗапроса
//	Поле			- Строка - псевдоним колонки запроса
//					- ДоступноеПолеСхемыЗапроса,КолонкаСхемыЗапроса,ВыражениеСхемыЗапроса.
//	Направление		- НаправлениеПорядкаСхемыЗапроса.
//
Функция Порядок(ЗапросПакета, Поле, Направление = Неопределено) Экспорт
	ВыражениеПорядка = ЗапросПакета.Порядок.Добавить(Поле);
	ВыражениеПорядка.Направление = ?(Направление = Неопределено, НаправлениеПорядкаСхемыЗапроса.ПоВозрастанию, Направление);
	Возврат ВыражениеПорядка;
КонецФункции

//
// Пример:
//  бф_МодельЗапроса.ИзменитьПсевдонимКолонки(ЗапросПакета, "СуммаОстаток", "СуммаРазмещено");
//
Функция ИзменитьПсевдонимКолонки(ЗапросПакета, ПсевдонимБыл, ПсевдонимСтал) Экспорт
	Колонки = ЗапросПакета.Колонки;
	Колонка = Колонки.Найти(ПсевдонимБыл);
	Колонка.Псевдоним = ПсевдонимСтал;
	Возврат Колонка;
КонецФункции

Процедура УдалитьКолонку(ЗапросПакета, Псевдоним) Экспорт
	Колонки = ЗапросПакета.Колонки;
	Попытка
		Колонка = Колонки.Найти(Псевдоним);
	Исключение
		Возврат;
	КонецПопытки;
	Если Колонка <> Неопределено Тогда
		Колонки.Удалить(Колонки.Индекс(Колонка));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Соединение

Функция УсловиеСоединения(Поля) Экспорт
	МассивУсловий = Новый Массив;
	Если ТипЗнч(Поля) = Тип("Строка") ИЛИ ТипЗнч(Поля) = Тип("Массив") Тогда
		Для каждого Поле Из бф_МодельЗапросаСлужебный.Массив(Поля) Цикл
			СоставПолей = СтрРазделить(Поле, "= ", Ложь);
			Если СоставПолей.ВГраница() = 0 Тогда
				ПолеСлева = СоставПолей[0];
				ПолеСправа = СоставПолей[0];
			Иначе
				ПолеСлева = СоставПолей[0];
				ПолеСправа = СоставПолей[1];
			КонецЕсли;
			МассивУсловий.Добавить(СтрШаблон("%%1.%1 = %%2.%2", ПолеСлева, ПолеСправа));
		КонецЦикла; 
	Иначе
		Для каждого Поле Из Поля Цикл
			МассивУсловий.Добавить(СтрШаблон("%%1.%1 = %%2.%1", Поле.Имя));
		КонецЦикла; 
	КонецЕсли; 
	Возврат СтрСоединить(МассивУсловий, " И ");	
КонецФункции // УсловиеСоединения()

// Формирует текст запроса вида (Поле1, Поле2, ...) В (ВЫБРАТЬ ЗначениеПоля1, ЗначениеПоля2, ... ИЗ Источник КАК Источник)
//
// Параметры:
//	Источник 		- Имя временной таблицы
//	ИсточникДанных 	- МенеджерВременныхТаблиц, Таблица, ТабличнаяЧасть - если имя не указано, то таблица должна быть описана в текущей схеме запроса
//	Поля			- Строка, Массив - поля условий. Если имена полей не совпадают с источником, то имя поля пишется двойным: Поле1 = ПолеИсточника1
//
// Возвращаемое значение:
//	Строка
//
Функция УсловиеВхождения(Источник, ИсточникДанных = Неопределено, Поля = "*") Экспорт
	Перем СхемаЗапроса, ОператорВыбрать;
	МассивПолей = Новый Массив;
	Если Поля = "*" Тогда
		Если ТипЗнч(ИсточникДанных) = Тип("МенеджерВременныхТаблиц") Тогда
			Для каждого Колонка Из ИсточникДанных.Таблицы[Источник].Колонки Цикл
				МассивПолей.Добавить(Колонка.Имя);
			КонецЦикла;
		Иначе
			Для каждого Колонка Из ИсточникДанных.Колонки Цикл
				МассивПолей.Добавить(Колонка.Имя);
			КонецЦикла;
		КонецЕсли;
	Иначе
		МассивПолей = бф_МодельЗапросаСлужебный.Массив(Поля);
	КонецЕсли;
	МассивПолейСлева = Новый Массив;
	МассивПолейСправа = Новый Массив;
	Для каждого Поле Из МассивПолей Цикл
		ПоляСоединения = СтрРазделить(Поле, "= ", Ложь);
		ВГраница = ПоляСоединения.ВГраница();
		Если ВГраница = 0 Тогда
			Если Лев(Поле, 1) = "&" Тогда
				МассивПолейСлева.Добавить(Прав(Поле, СтрДлина(Поле) - 1));
				МассивПолейСправа.Добавить(Поле);
			Иначе
				МассивПолейСлева.Добавить(Поле);
				МассивПолейСправа.Добавить(Поле);
			КонецЕсли;
		Иначе
			МассивПолейСлева.Добавить(ПоляСоединения[0]);
			МассивПолейСправа.Добавить(ПоляСоединения[ВГраница]);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Источник) Тогда
		ЗапросПакета = бф_МодельЗапроса.ЗапросПакетаИзТаблицы(СхемаЗапроса, бф_МодельЗапроса.ОписаниеВременнойТаблицы(Источник, ИсточникДанных, МассивПолейСправа),, МассивПолейСправа,,,, ОператорВыбрать);
		ОператорВыбрать.ВыбиратьРазличные = Истина;
	Иначе
		ЗапросПакета = бф_МодельЗапроса.ЗапросПакета(СхемаЗапроса,,, ОператорВыбрать);
		Для Индекс = 0 По МассивПолейСлева.ВГраница() Цикл
			бф_МодельЗапроса.Поле(ЗапросПакета, ОператорВыбрать,, МассивПолейСправа[Индекс], МассивПолейСлева[Индекс]);
		КонецЦикла;
	КонецЕсли;
	Возврат СтрШаблон("(%1) В (%2)",
		СтрСоединить(МассивПолейСлева, ","),
		ЗапросПакета.ПолучитьТекстЗапроса());
КонецФункции // УсловиеСоединения()

// Добавляет условие к существующим условиям соединения источников.
//
// Параметры:
//		ИсточникСлева - Строка - псевдоним источника
//		ИсточникСправа - Строка - псевдоним источника
//
Процедура ДобавитьУсловиеСоединения(Соединение, Условие) Экспорт
	УсловиеСоединения = Строка(Соединение.Условие);
	Если ПустаяСтрока(УсловиеСоединения) Тогда
		Соединение.Условие = Новый ВыражениеСхемыЗапроса(УсловиеСоединения);
		Возврат;
	КонецЕсли;
	Соединение.Условие = Новый ВыражениеСхемыЗапроса(СтрШаблон("(%1) И (%2)", УсловиеСоединения, Условие));
КонецПроцедуры

// Добавляет соединение источников. Если соединение уже добавлено, то к существующему условию добавляется текущее условие соединения.
//
// Параметры:
//	Оператор 		- ОператорВыбратьСхемыЗапроса - обязательный, если ИсточникСлева типа Строка.
//	ИсточникСлева 	- Строка - псевдоним источника
//					- ИсточникСхемыЗапроса
//	ИсточникСправа 	- Строка - псевдоним источника
//					- ИсточникСхемыЗапроса
//	Условие 		- Строка - Условие соединения в виде текста. В тексте используются псевдонимы источников. Если указать "*", то соединение по общим полям
//	ТипСоединения 	- ТипСоединенияСхемыЗапроса - по умолчанию ЛевоеВнешнее.
//
Функция Соединение(Оператор = Неопределено, Знач ИсточникСлева, ИсточникСправа, Условие = "", ТипСоединения = Неопределено, Заменить = Ложь) Экспорт
	Если ТипСоединения = Неопределено Тогда
		ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
	КонецЕсли; 
	Если ТипЗнч(ИсточникСлева) = Тип("ИсточникСхемыЗапроса") Тогда
		ПсевдонимИсточникаСлева = ИсточникСлева.Источник.Псевдоним;
	Иначе
		ПсевдонимИсточникаСлева = ИсточникСлева;
		ИсточникСлева = Оператор.Источники.НайтиПоПсевдониму(ИсточникСлева);
	КонецЕсли; 
	Если ТипЗнч(ИсточникСправа) = Тип("ИсточникСхемыЗапроса") Тогда
		ПсевдонимИсточникаСправа = ИсточникСправа.Источник.Псевдоним;
	Иначе
		ПсевдонимИсточникаСправа = ИсточникСправа;
	КонецЕсли; 
	
	Соединение = Неопределено;
	Если Заменить Тогда
		ИсточникСлева.Соединения.Очистить();
	Иначе
		Соединение	= ИсточникСлева.Соединения.НайтиПоПсевдониму(ПсевдонимИсточникаСправа);
	КонецЕсли;
	Если Условие = "*" Тогда
		МассивОбщихПолейИсточников = Новый Массив;
		Для каждого Поле Из ИсточникСлева.Источник.ДоступныеПоля Цикл
			Если ИсточникСправа.Источник.ДоступныеПоля.Найти(Поле.Имя) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивОбщихПолейИсточников.Добавить(ИсточникСлева.Источник.Псевдоним+"."+Поле.Имя+" = "+ИсточникСправа.Источник.Псевдоним+"."+Поле.Имя);
		КонецЦикла;
		Условие = СтрСоединить(МассивОбщихПолейИсточников, " И ");
	Иначе
		Условие = СтрЗаменить(Условие, "%1", ПсевдонимИсточникаСлева); 
		Условие = СтрЗаменить(Условие, "%2", ПсевдонимИсточникаСправа); 
	КонецЕсли;
	Если Соединение = Неопределено Тогда
		ИсточникСлева.Соединения.Добавить(ПсевдонимИсточникаСправа, Условие);
		Соединение = ИсточникСлева.Соединения[ИсточникСлева.Соединения.Количество()-1];
		Соединение.ТипСоединения = ТипСоединения; 
	Иначе
		ДобавитьУсловиеСоединения(Соединение, Условие);
	КонецЕсли;
	Возврат Соединение;
КонецФункции

Процедура ДобавитьУсловиеПодобно(СхемаЗапроса, Источник = "Источник", Поля, СтрокаПоиска, СпособПоискаСтроки) Экспорт
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска, """", """""");
	СтрокаШаблон = ?(СпособПоискаСтроки = СпособПоискаСтрокиПриВводеПоСтроке.Начало, "Источник.%1 ПОДОБНО ""%2%%""", "Источник.%1 ПОДОБНО ""%%%2%%""");
	
	МассивСтрокПоиска = Новый Массив;
	Для каждого ИмяПоля из Поля Цикл
		МассивСтрокПоиска.Добавить(СтрШаблон(СтрокаШаблон, ИмяПоля, СтрокаПоиска)); 	
	КонецЦикла;
	
	Оператор	= СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество()-1].Операторы[0];
	Оператор.Отбор.Добавить("(" + СтрСоединить(МассивСтрокПоиска, " ИЛИ ") + ")");
КонецПроцедуры

// Добавляет соединение источника с таблицей характеристик
//
// Параметры:
//	Оператор 		- ОператорВыбратьСхемыЗапроса - обязательный, если ИсточникОбъекта типа Строка.
//	ИсточникОбъекта	- Строка - псевдоним источника
//					- ИсточникСхемыЗапроса
//	ИсточникХарактеристики 		- Строка - псевдоним источника
//								- ИсточникСхемыЗапроса
//  ПолеОбъектаИсточника		-
//  ПолеОбъектаХарактеристики	-
//	ПолеВидаХарактеристики		- 
//	ВыражениеПараметраВида		- Строка - описание правого значения из условия "ИсточникХарактеристики.ПолеВидаХарактеристики = ВыражениеПараметраВида". В тексте используются псевдонимы источников.
//	ТипСоединения 	- ТипСоединенияСхемыЗапроса - по умолчанию ЛевоеВнешнее.
//
// Пример:
//	бф_МодельЗапроса.ДобавитьСоединениеХарактеристики(ОператорВыбрать, "ВТ_ДВИЖЕНИЯ_ОПЕРАЦИИ", "СтатьяИсточникАналитика1",
//		"СтатьяИсточник", "Ссылка", "НомерСтроки", "1");
//
Процедура ДобавитьСоединениеХарактеристики(Оператор, Знач ИсточникОбъекта, Знач ИсточникХарактеристики, ПолеОбъектаИсточника = "Ссылка", 
																ПолеОбъектаХарактеристики = "Объект", ПолеВидаХарактеристики = "Свойство", ВыражениеПараметраВида, ТипСоединения = Неопределено) Экспорт
	Если ТипСоединения = Неопределено Тогда
		ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
	КонецЕсли; 
	
	Если ТипЗнч(ИсточникОбъекта) = Тип("Строка") Тогда
		ИсточникОбъекта = Оператор.Источники.НайтиПоПсевдониму(ИсточникОбъекта);
	КонецЕсли; 
	
	Если ТипЗнч(ИсточникХарактеристики) = Тип("Строка") Тогда
		ИсточникХарактеристики = Оператор.Источники.НайтиПоПсевдониму(ИсточникХарактеристики);
	КонецЕсли; 

	ПсевдонимИсточника					= ИсточникОбъекта.Источник.Псевдоним;
	ПсевдонимИсточникаХарактеристики 	= ИсточникХарактеристики.Источник.Псевдоним;
	бф_МодельЗапроса.ДобавитьСоединение(,
		ИсточникОбъекта,
		ПсевдонимИсточникаХарактеристики,
		ПсевдонимИсточника+"."+ПолеОбъектаИсточника+" = "+ПсевдонимИсточникаХарактеристики+"."+ПолеОбъектаХарактеристики+"
		| И "+ПсевдонимИсточникаХарактеристики+"."+ПолеВидаХарактеристики+" = "+ВыражениеПараметраВида,
		ТипСоединения
	);
КонецПроцедуры

// Параметры:
//	Оператор 				- ОператорВыбратьСхемыЗапроса
//	Источник 				- Строка - псевдоним источника
//							- ИсточникСхемыЗапроса
//	ИсточникЗначений		- Строка - имя таблицы, в которой хранятся значения характеристик объекта
//							- ИсточникСхемыЗапроса
//	ПолеОбъекта 			- Строка
//	ПолеВида 				- Строка
//	ПолеЗначения 			- Строка - если не задано, то отбор существования свойства.
//	ВыражениеПараметраВида 		- Строка - если не задан, то генерируется автоматически.
//	ВыражениеПараметраЗначения	- Строка - если не задан, то генерируется автоматически. Если ПолеЗначения не задано, то в этом параметре передается значение существования свойства (Истина - существует по умолчанию, Ложь - нет).
//
Процедура ДобавитьУсловиеХарактеристики(Оператор, Источник, ИсточникЗначений, ПолеОбъектаИсточника = "Ссылка", ПолеОбъекта = "Объект", ПолеВида = "Свойство", ПолеЗначения = "Значение", ВыражениеПараметраВида = "", ВыражениеПараметраЗначения = "") Экспорт 
	Если ПустаяСтрока(ВыражениеПараметраВида) Тогда
		ВыражениеПараметраВида 		= "&"+бф_МодельЗапросаСлужебный.ИмяПоУникальномуИдентификатору(Новый УникальныйИдентификатор);
	КонецЕсли;
	Если ПустаяСтрока(ВыражениеПараметраЗначения) Тогда
		ВыражениеПараметраЗначения 	= "&"+бф_МодельЗапросаСлужебный.ИмяПоУникальномуИдентификатору(Новый УникальныйИдентификатор);
	КонецЕсли;
	ПсевдонимИсточника			= Источник.Источник.Псевдоним;
	ПсевдонимИсточникаЗначений	= ПсевдонимИсточника+ВыражениеПараметраВида;
	бф_МодельЗапроса.ДобавитьИсточник(Оператор, 
		ИсточникЗначений,
		ПсевдонимИсточникаЗначений
	);
	Если ПустаяСтрока(ПолеЗначения) Тогда
		Если ВыражениеПараметраЗначения = Истина Тогда
			бф_МодельЗапроса.ДобавитьСоединение(,
				Источник,
				ПсевдонимИсточникаЗначений,
				ПсевдонимИсточника+".Ссылка = "+ПсевдонимИсточникаЗначений+"."+ПолеОбъекта+"
				| И "+ПсевдонимИсточникаЗначений+"."+ПолеВида+" = "+ВыражениеПараметраВида,
				ТипСоединенияСхемыЗапроса.Внутреннее
			);
		Иначе
			бф_МодельЗапроса.ДобавитьСоединение(,
				Источник,
				ПсевдонимИсточникаЗначений,
				ПсевдонимИсточника+".Ссылка = "+ПсевдонимИсточникаЗначений+"."+ПолеОбъекта+"
				| И "+ПсевдонимИсточникаЗначений+"."+ПолеВида+" = "+ВыражениеПараметраВида,
			);
			Оператор.Отбор.Добавить(ПсевдонимИсточникаЗначений+"."+ПолеОбъекта+" Есть Null");
		КонецЕсли;
	Иначе
		бф_МодельЗапроса.ДобавитьСоединение(,
			Источник,
			ПсевдонимИсточникаЗначений,
			ПсевдонимИсточника+".Ссылка = "+ПсевдонимИсточникаЗначений+"."+ПолеОбъекта+"
			|  И "+ПсевдонимИсточникаЗначений+"."+ПолеВида+" = "+ВыражениеПараметраВида+"
			|  И "+ПсевдонимИсточникаЗначений+"."+ПолеЗначения+" = "+ВыражениеПараметраЗначения,
			ТипСоединенияСхемыЗапроса.Внутреннее
		);
	КонецЕсли;
КонецПроцедуры

//
// Пример:
//	бф_МодельЗапроса.ДобавитьУсловиеОграниченияПоВидуДоступа(СхемаЗапроса, ОператорИсточника,, "ЦФО");
//	ПараметрыЗапроса.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
//
Процедура ДобавитьУсловиеОграниченияПоВидуДоступа(СхемаЗапроса, ОператорИсточника, ПсевдонимИсточника = "Источник", ВидДоступа) Экспорт
	////////////////////////////////////////////////////////////////////////////////
	//  ЗАПРОС ПАКЕТА 0
	ЗапросПакета 	= бф_МодельЗапроса.ДобавитьЗапросПакета(СхемаЗапроса, "ВТ_ЗНАЧЕНИЯ_ДОСТУПА");
	ОператорВыбрать = бф_МодельЗапроса.ДобавитьОператор(ЗапросПакета, Новый Структура("ВыбиратьРазличные", Истина));
	бф_МодельЗапроса.ДобавитьИсточник(ОператорВыбрать, "Справочник.Пользователи"					, "СправочникПользователи");
	бф_МодельЗапроса.ДобавитьИсточник(ОператорВыбрать, "Справочник.ГруппыДоступа");
	бф_МодельЗапроса.ДобавитьИсточник(ОператорВыбрать, "Справочник.ГруппыДоступа.ЗначенияДоступа"	, "ГруппыДоступаЗначенияДоступа");
	бф_МодельЗапроса.ДобавитьИсточник(ОператорВыбрать, "Справочник.ГруппыДоступа.ВидыДоступа"		, "ГруппыДоступаВидыДоступа");
	бф_МодельЗапроса.ДобавитьСоединение(ОператорВыбрать, "СправочникПользователи"		, "ГруппыДоступа"				, "СправочникПользователи.Ссылка = ГруппыДоступа.Пользователь", ТипСоединенияСхемыЗапроса.Внутреннее);
	бф_МодельЗапроса.ДобавитьСоединение(ОператорВыбрать, "ГруппыДоступа"				, "ГруппыДоступаЗначенияДоступа", "ГруппыДоступа.Ссылка = ГруппыДоступаЗначенияДоступа.Ссылка", ТипСоединенияСхемыЗапроса.Внутреннее);
	бф_МодельЗапроса.ДобавитьСоединение(ОператорВыбрать, "ГруппыДоступаЗначенияДоступа", "ГруппыДоступаВидыДоступа"	, 
		"ГруппыДоступаЗначенияДоступа.Ссылка = ГруппыДоступаВидыДоступа.Ссылка
		|  И ГруппыДоступаЗначенияДоступа.ВидДоступа = ГруппыДоступаВидыДоступа.ВидДоступа", 
		ТипСоединенияСхемыЗапроса.Внутреннее
	);
	ОператорВыбрать.Отбор.Добавить("СправочникПользователи.Ссылка = &ТекущийПользователь
	|  И ГруппыДоступаВидыДоступа.ВидДоступа = ЗНАЧЕНИЕ(Справочник."+ВидДоступа+".ПустаяСсылка)");
	бф_МодельЗапроса.Поле(ЗапросПакета, ОператорВыбрать,, "ГруппыДоступаЗначенияДоступа.ВидДоступа");
	бф_МодельЗапроса.Поле(ЗапросПакета, ОператорВыбрать,, "ГруппыДоступаВидыДоступа.ВсеРазрешены");
	бф_МодельЗапроса.Поле(ЗапросПакета, ОператорВыбрать,, "ГруппыДоступаЗначенияДоступа.ЗначениеДоступа");
	//  Переместить запрос пакета в начало
	бф_МодельЗапроса.УстановитьИндексЗапросаПакета(СхемаЗапроса, ЗапросПакета, 0);
	////////////////////////////////////////////////////////////////////////////////
	//  ЗАПРОС ПАКЕТА 1
	бф_МодельЗапроса.ДобавитьИсточник(ОператорИсточника, "ВТ_ЗНАЧЕНИЯ_ДОСТУПА", "ВТ_ЗНАЧЕНИЯ_ДОСТУПА_ИСКЛЮЧИТЬ");
	бф_МодельЗапроса.ДобавитьИсточник(ОператорИсточника, "ВТ_ЗНАЧЕНИЯ_ДОСТУПА", "ВТ_ЗНАЧЕНИЯ_ДОСТУПА_ВКЛЮЧИТЬ");
	бф_МодельЗапроса.ДобавитьСоединение(ОператорИсточника, ПсевдонимИсточника, "ВТ_ЗНАЧЕНИЯ_ДОСТУПА_ИСКЛЮЧИТЬ", ПсевдонимИсточника+".Ссылка = ВТ_ЗНАЧЕНИЯ_ДОСТУПА_ИСКЛЮЧИТЬ.ЗначениеДоступа");
	бф_МодельЗапроса.ДобавитьСоединение(ОператорИсточника, ПсевдонимИсточника, "ВТ_ЗНАЧЕНИЯ_ДОСТУПА_ИСКЛЮЧИТЬ", "ВТ_ЗНАЧЕНИЯ_ДОСТУПА_ИСКЛЮЧИТЬ.ВсеРазрешены");
	бф_МодельЗапроса.ДобавитьСоединение(ОператорИсточника, ПсевдонимИсточника, "ВТ_ЗНАЧЕНИЯ_ДОСТУПА_ВКЛЮЧИТЬ" , ПсевдонимИсточника+".Ссылка = ВТ_ЗНАЧЕНИЯ_ДОСТУПА_ВКЛЮЧИТЬ.ЗначениеДоступа");
	бф_МодельЗапроса.ДобавитьСоединение(ОператорИсточника, ПсевдонимИсточника, "ВТ_ЗНАЧЕНИЯ_ДОСТУПА_ВКЛЮЧИТЬ" , "НЕ ВТ_ЗНАЧЕНИЯ_ДОСТУПА_ВКЛЮЧИТЬ.ВсеРазрешены");
	ОператорИсточника.Отбор.Добавить("(ВТ_ЗНАЧЕНИЯ_ДОСТУПА_ИСКЛЮЧИТЬ.ЗначениеДоступа ЕСТЬ NULL
	|	ИЛИ НЕ ВТ_ЗНАЧЕНИЯ_ДОСТУПА_ВКЛЮЧИТЬ.ЗначениеДоступа ЕСТЬ NULL)");
КонецПроцедуры

#КонецОбласти

#Область ЗапросИтоги
	
// Создает запрос и устанавливает текст запроса из схемы запроса.
//
// Параметры:
//	СхемаЗапроса - СхемаЗапроса
//  Параметры	 - Структура - параметры запроса
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//  СоздатьМенеджерВременныхТаблиц - Булево - если Да, то в переменную МенеджерВременныхТаблиц будет помещен созданный одноименный объект
//
Функция Запрос(СхемаЗапроса, Параметры = Неопределено, МенеджерВременныхТаблиц = Null, СоздатьМенеджерВременныхТаблиц = Ложь, ОчиститьСхему = Истина) Экспорт
	Запрос = Новый Запрос;
	Если СоздатьМенеджерВременныхТаблиц ИЛИ МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли; 
	Если МенеджерВременныхТаблиц <> Null Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли; 
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Если Параметры <> Неопределено Тогда
		Для каждого ЭлементПараметра Из Параметры Цикл
			Запрос.Параметры.Вставить(ЭлементПараметра.Ключ, ЭлементПараметра.Значение);
		КонецЦикла;
	КонецЕсли;
	Если ОчиститьСхему Тогда
	    СхемаЗапроса.ПакетЗапросов.Очистить();
	КонецЕсли;
	Возврат Запрос;
КонецФункции

// Добавляет группировочное поле Итоги по. Для добавления выражения итогов нужно использовать ВыраженияИтогов:
//		бф_МодельЗапроса.Итог(ЗапросПакета, "Контрагент");
//		ЗапросПакета.ВыраженияИтогов.Добавить("СУММА(СуммаУпр)", "СуммаУпр");
//	или можно через выражение:
//		бф_МодельЗапроса.Итог(ЗапросПакета, "Контрагент.ИНН+Контрагент.КПП", "ИННКПП");
//		ЗапросПакета.ВыраженияИтогов.Добавить("СУММА(СуммаУпр)", "СуммаУпр");
//
// Параметры:
//  ЗапросПакета - ЗапросСхемыЗапроса
//  Выражение    - Строка 	- Имя поля группировки итогов или Выражение. Пример имени: "Контрагент", пример выражения: "Контрагент.ИНН+Контрагент.КПП"
//  ИмяКолонки   - Строка 	- Псевдоним колонки запроса, возможно новая колонка
//  ТипКонтрольнойТочки   	- ТипКонтрольнойТочкиСхемыЗапроса - Иерархия, ТолькоИерархия, Элементы
//  ТипДополненияПериодами  - ТипДополненияПериодамиСхемыЗапроса - 
//	НачалоПериода - Дата 	- 
//				  - Строка	- строка в формате "ДАТАВРЕМЯ(ГГГГ, ММ, ДД)" или "ДАТАВРЕМЯ(ГГГГ, ММ, ДД, ЧЧ, ММ, СС)"
//	КонецПериода  - Дата 	- 
//				  - Строка	- строка в формате "ДАТАВРЕМЯ(ГГГГ, ММ, ДД)" или "ДАТАВРЕМЯ(ГГГГ, ММ, ДД, ЧЧ, ММ, СС)"
//
Функция Итог(ЗапросПакета, Выражение, ИмяКолонки = "", ТипКонтрольнойТочки = Неопределено, ТипДополненияПериодами = Неопределено, НачалоПериода = "", КонецПериода = "") Экспорт
	КонтрольнаяТочка = ЗапросПакета.КонтрольныеТочкиИтогов.Добавить(Выражение);
	КонтрольнаяТочка.ИмяКолонки					= ИмяКолонки;
	КонтрольнаяТочка.ТипКонтрольнойТочки 		= ?(ТипКонтрольнойТочки 	= Неопределено, ТипКонтрольнойТочкиСхемыЗапроса.Элементы, ТипКонтрольнойТочки);
	КонтрольнаяТочка.ТипДополненияПериодами 	= ?(ТипДополненияПериодами 	= Неопределено, ТипДополненияПериодамиСхемыЗапроса.БезДополнения, ТипДополненияПериодами);
	КонтрольнаяТочка.НачалоПериодаДополнения 	= ?(ТипЗнч(НачалоПериода) 	= Тип("Строка"), НачалоПериода, бф_МодельЗапросаСлужебный.ФорматДатаВремя(НачалоПериода));
	КонтрольнаяТочка.КонецПериодаДополнения 	= ?(ТипЗнч(КонецПериода) 	= Тип("Строка"), КонецПериода, бф_МодельЗапросаСлужебный.ФорматДатаВремя(КонецПериода));
	Возврат КонтрольнаяТочка;
КонецФункции

Функция ВыбратьСледующий(РезультатЗапроса, Выборка = Неопределено) Экспорт
	Выборка = РезультатЗапроса.Выбрать();
	Возврат Выборка.Следующий();
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Использовать ЗапросПакета.
// Добавляет новый запрос в пакет. Запрос может быть типа: Выборка, Создание временной таблицы, Уничтожение временной таблицы.
//
// Параметры:
//	СхемаЗапроса 				- СхемаЗапроса
//	ИмяВременнойТаблицы 		- Строка - указывает имя временной таблицы, в которую будет помещен результат запроса или которая будет уничтожена
//	ЗапросНаУничтожение			- Булево
//	ВыбиратьРазрешенные 		- Булево
//
// Возвращаемое значение:
//	ЗапросВыбораСхемыЗапроса, ЗапросУничтоженияТаблицыСхемыЗапроса
//
Функция ДобавитьЗапросПакета(СхемаЗапроса, ИмяВременнойТаблицы = "", ЗапросНаУничтожение = Ложь, ВыбиратьРазрешенные = Ложь) Экспорт
	ОписаниеЗапроса = ?(ОписаниеЗапроса = Неопределено, Тип("ЗапросВыбораСхемыЗапроса"), ОписаниеЗапроса);
	Если ЗапросНаУничтожение Тогда
		ТипЗапроса = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса");
	Иначе
		ТипЗапроса = Тип("ЗапросВыбораСхемыЗапроса");
	КонецЕсли; 
	ПакетЗапросов	= СхемаЗапроса.ПакетЗапросов;
	Если ПакетЗапросов.Количество() = 1 И СхемаЗапроса.ПолучитьТекстЗапроса() = "" Тогда
		ЗапросПакета	= ПакетЗапросов[0];//  первый запрос может быть только на выборку
	Иначе
		ЗапросПакета	= СхемаЗапроса.ПакетЗапросов.Добавить(ТипЗапроса);
		Если ТипЗапроса = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			ЗапросПакета.ИмяТаблицы = ИмяВременнойТаблицы;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗапросНаУничтожение Тогда
		ЗапросПакета.ТаблицаДляПомещения = ИмяВременнойТаблицы;
	КонецЕсли;
	Если ВыбиратьРазрешенные Тогда
		ЗапросПакета.ВыбиратьРазрешенные = Истина;
	КонецЕсли;
	Возврат ЗапросПакета;
КонецФункции

// Устарела. Использовать ЗапросПакетаИзТаблицы. 
// Добавляет запрос пакета с источником из временной таблицы
//
// Параметры:
//	СхемаЗапроса		- СхемаЗапроса
//	ТаблицаИсточника	- ЗапросВыбораСхемыЗапроса - запрос, который будет использован в качестве источника данных
//						- Строка - имя временной таблицы, которая будет использована в качестве источника
//						- Структура - описание временной таблицы
//	ПсевдонимИсточника	- Строка - псевдоним источника, который будет добавлен в конструируемый запрос
//	ТаблицаДляПомещения	- Строка - имя таблицы для помещения результата запроса
//	ЗапросНаУничтожение	- Булево - добавляет запрос на уничтожение таблицы источника
//	ВыбиратьРазрешенные - Булево
//	ОператорВыбрать		- ОператорВыбратьСхемыЗапроса - если передать, то будет заполнен оператор выборки
//
// Возвращаемое значение:
//  ЗапросВыбораСхемыЗапроса
//
Функция ДобавитьЗапросПакетаИзТаблицы(СхемаЗапроса, Знач ТаблицаИсточника, Знач ПсевдонимИсточника = "", Знач ВыбираемыеКолонки = Неопределено, ТаблицаДляПомещения = "", ЗапросНаУничтожение = Ложь, ВыбиратьРазрешенные = Ложь, ОператорВыбрать = Неопределено) Экспорт
	Если ТипЗнч(ВыбираемыеКолонки) = ТипЗнч("Строка") Тогда
		ВыбираемыеКолонки = СтрРазделить(СтрЗаменить(ВыбираемыеКолонки, " ", ""), ",");
	КонецЕсли;
	ТипЗначения = ТипЗнч(ТаблицаИсточника);
	Если ТипЗначения = Тип("Структура") Тогда
		
		Если ТаблицаИсточника.Тип = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
			ИмяТаблицы		= ТаблицаИсточника.ИмяТаблицы;
		Иначе
			ИмяТаблицы		= "";
		КонецЕсли;
		Если ПустаяСтрока(ПсевдонимИсточника) Тогда
			Если ПустаяСтрока(ТаблицаДляПомещения) Тогда
				ПсевдонимИсточника = ИмяТаблицы;
			Иначе
				ПсевдонимИсточника = ТаблицаДляПомещения;
			КонецЕсли;
		КонецЕсли;
		
		ЗапросПакета 	= бф_МодельЗапроса.ДобавитьЗапросПакета(СхемаЗапроса, ТаблицаДляПомещения);
		ОператорВыбрать = бф_МодельЗапроса.ДобавитьОператор(ЗапросПакета);
		бф_МодельЗапроса.ДобавитьИсточник(ОператорВыбрать, ТаблицаИсточника, ПсевдонимИсточника);
		Для каждого Поле Из ТаблицаИсточника.ДоступныеПоля Цикл
			бф_МодельЗапроса.Поле(ЗапросПакета, ОператорВыбрать,, ?(ПустаяСтрока(ПсевдонимИсточника), "", ПсевдонимИсточника+".")+Поле.Имя, Поле.Имя);
		КонецЦикла;
	Иначе
		Если ТипЗначения = Тип("Строка") Тогда
			Для каждого ТекущийЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
				Если ТипЗнч(ТекущийЗапросПакета) = Тип("ЗапросВыбораСхемыЗапроса")
					И ТекущийЗапросПакета.ТаблицаДляПомещения = ТаблицаИсточника Тогда
					ЗапросИсточника = ТекущийЗапросПакета;
				КонецЕсли;
			КонецЦикла;
		Иначе//ЗапросВыбораСхемыЗапроса
			ЗапросИсточника 	= ТаблицаИсточника;
			ТаблицаИсточника 	= ЗапросИсточника.ТаблицаДляПомещения;
		КонецЕсли;
		
		Если ПустаяСтрока(ПсевдонимИсточника) Тогда
			Если ПустаяСтрока(ТаблицаДляПомещения) Тогда
				ПсевдонимИсточника = ТаблицаИсточника;
			Иначе
				ПсевдонимИсточника = ТаблицаДляПомещения;
			КонецЕсли;
		КонецЕсли;
		ЗапросПакета 	= бф_МодельЗапроса.ДобавитьЗапросПакета(СхемаЗапроса, ТаблицаДляПомещения);
		ОператорВыбрать = бф_МодельЗапроса.ДобавитьОператор(ЗапросПакета);
		бф_МодельЗапроса.ДобавитьИсточник(ОператорВыбрать, ТаблицаИсточника, ПсевдонимИсточника);
		Для каждого Поле Из ЗапросИсточника.Колонки Цикл
			Если ВыбираемыеКолонки <> Неопределено И ВыбираемыеКолонки.Найти(Поле.Псевдоним) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			бф_МодельЗапроса.Поле(ЗапросПакета, ОператорВыбрать,, ПсевдонимИсточника+"."+Поле.Псевдоним, Поле.Псевдоним);
		КонецЦикла;
	КонецЕсли;
	
	Если ВыбиратьРазрешенные Тогда
		ЗапросПакета.ВыбиратьРазрешенные = Истина;
	КонецЕсли;
	
	Если ЗапросНаУничтожение Тогда
		ЗапросПакетаНаУничтожение	= СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
		ЗапросПакетаНаУничтожение.ИмяТаблицы = ТаблицаИсточника;
	КонецЕсли;
	
	Возврат ЗапросПакета;
КонецФункции

// Устарела. Использовать Оператор.
// Добавляет оператор выборки в запрос пакета.
//
// Параметры:
//	ЗапросПакета	- ЗапросВыбораСхемыЗапроса - запрос, в состав которого будет добавлен оператор
//	Параметры 		- Структура - значения структуры соответствуют свойствам оператора схемы запроса:
//  * ВыбиратьРазличные				- Булево
//	* ТипОбъединения				- ТипОбъединенияСхемыЗапроса - по умолчанию - ОбъединитьВсе
//	* КоличествоПолучаемыхЗаписей	- Число - по умолчанию - неограничено
//
// Возвращаемое значение:
//	ОператорВыбратьСхемыЗапроса
//
// Пример:
//	ОператорЗапроса = ДобавитьОператор(СхемаЗапроса, Новый Структура("ТипОбъединения, КоличествоПолучаемыхЗаписей", ТипОбъединенияСхемыЗапроса.Объединить, 50));
//
Функция ДобавитьОператор(ЗапросПакета, Параметры = Неопределено) Экспорт
	Перем Оператор;
	Если ЗапросПакета.Операторы.Количество() = 1 Тогда
		Оператор = ЗапросПакета.Операторы[0];
		Если НЕ Оператор.Источники.Количество() = 0 ИЛИ НЕ Оператор.ВыбираемыеПоля.Количество() = 0 Тогда
			Оператор = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если Оператор = Неопределено Тогда
		Оператор = ЗапросПакета.Операторы.Добавить();
	КонецЕсли; 
	Если Параметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Оператор, Параметры);
	КонецЕсли;
	Возврат Оператор;
КонецФункции

// Устарела. Использовать КопияОператора.
// Добавляет оператор-копию оператора выборки в запрос пакета.
//
// Параметры:
//	ЗапросПакета	- ЗапросВыбораСхемыЗапроса - запрос, в состав которого будет добавлен оператор
//  Оператор		- ОператорВыбратьСхемыЗапроса - оператор для копирования
//	Параметры 		- Структура - значения структуры соответствуют свойствам оператора схемы запроса:
//  * ВыбиратьРазличные				- Булево
//	* ТипОбъединения				- ТипОбъединенияСхемыЗапроса - по умолчанию - ОбъединитьВсе
//	* КоличествоПолучаемыхЗаписей	- Число - по умолчанию - неограничено
//
// Возвращаемое значение:
//	ОператорВыбратьСхемыЗапроса
Функция ДобавитьКопиюОператора(ЗапросПакета, Оператор, Параметры = Неопределено) Экспорт
	НовыйОператор = ДобавитьОператор(ЗапросПакета, Параметры);
	ЗаполнитьЗначенияСвойств(НовыйОператор, Оператор,, "ВыбиратьРазличные,КоличествоПолучаемыхЗаписей,ТипОбъединения");
	Если Параметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НовыйОператор, Параметры); 
	КонецЕсли;
	//  Источники
	Для каждого ЭлементИсточника Из Оператор.Источники Цикл
		Источник 	= ЭлементИсточника.Источник;
		ТипЗначения = ТипЗнч(Источник);
		Если ТипЗначения = Тип("ТаблицаСхемыЗапроса") Тогда
			ДобавитьИсточник(НовыйОператор, Источник.ИмяТаблицы, Источник.Псевдоним, Источник.Параметры);
		ИначеЕсли ТипЗначения = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
			ВложенныйЗапрос = ДобавитьИсточник(НовыйОператор, ПолучитьОписаниеВложенногоЗапроса(), Источник.Псевдоним).Источник.Запрос;
		ИначеЕсли ТипЗначения = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
			ДобавитьИсточник(НовыйОператор, ОписаниеВременнойТаблицы(Источник.ИмяТаблицы), Источник.Псевдоним);
		КонецЕсли;
	КонецЦикла;
	//  Соединения источников
	Для каждого ЭлементИсточника Из Оператор.Источники Цикл
		Для каждого ЭлементСоединения Из ЭлементИсточника.Соединения Цикл
			ДобавитьСоединение(НовыйОператор, ЭлементИсточника.Источник.Псевдоним, ЭлементСоединения.Источник.Источник.Псевдоним, Строка(ЭлементСоединения.Условие), ЭлементСоединения.ТипСоединения);
		КонецЦикла;
	КонецЦикла;
	//  Выбираемые поля
	ВыбираемыеПоляИсточника = Оператор.ВыбираемыеПоля;
	Для каждого Поле Из ВыбираемыеПоляИсточника Цикл
		Поле(ЗапросПакета, НовыйОператор, ВыбираемыеПоляИсточника.Индекс(Поле), Строка(Поле));
	КонецЦикла;
	//  Отбор
	Отбор = НовыйОператор.Отбор;
	Для каждого Выражение Из Оператор.Отбор Цикл
		Отбор.Добавить(Выражение);
	КонецЦикла;
	Возврат НовыйОператор;
КонецФункции

// Устарела. Использовать Источник.
// Добавляет источник данных в оператор запроса.
// Для источника типа вложенного запроса доступ к вложенному запросу схемы запроса осуществляется так: Источник.Источник.Запрос.
//
// Параметры:
//	Оператор 		- ОператорВыбратьСхемыЗапроса.
//	ОписаниеТаблицы - Строка 	- имя таблицы. В качестве имени можно указать физическую или виртуальную таблицу.
//					- Структура - Структуру можно получить из сервисных функций (см. функцию бф_МодельЗапроса.ПолучитьОписаниеВложенногоЗапроса(), бф_МодельЗапроса.ПолучитьОписаниеВременнойТаблицы(ИмяТаблицы)).
//	Псевдоним 		- Строка 	- имя псевдонима, которое можно будет использовать при обращении к источнику
//	ПараметрыВиртуальнойТаблицы - Массив 	- параметры определяются индексом элемента массива. В качестве значения параметров выступает текстовое описание (см. встроенная справка - работа с запросом - таблицы - параметры).
//								- Структура - ключи структуры соответствуют названиям параметров виртуальной таблицы из справки в конфигураторе без пробелов. 
//
// Возвращаемое значение:
//	ИсточникСхемыЗапроса
//
Функция ДобавитьИсточник(Оператор, ОписаниеТаблицы, Псевдоним = "", ПараметрыВиртуальнойТаблицы = Неопределено) Экспорт
	Если ТипЗнч(ОписаниеТаблицы) = Тип("Структура") Тогда
		Таблица			= ОписаниеТаблицы.Тип;
		Если Таблица = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
			ИмяТаблицы		= ОписаниеТаблицы.ИмяТаблицы;
		КонецЕсли;
		ДоступныеПоля 	= ОписаниеТаблицы.ДоступныеПоля;
	Иначе
		Таблица			= ОписаниеТаблицы;
		Если ТипЗнч(Таблица) = Тип("Строка") Тогда
			ИмяТаблицы		= Таблица;
			Если ПустаяСтрока(Псевдоним) Тогда
				Псевдоним = бф_МодельЗапросаСлужебный.ОкончаниеСтрокиПослеРазделителя(Таблица);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Псевдоним) Тогда
				Если Таблица = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
					Псевдоним = бф_МодельЗапросаСлужебный.ИмяПоУникальномуИдентификатору(Новый УникальныйИдентификатор);
				КонецЕсли;
			КонецЕсли;
			ИмяТаблицы = Псевдоним;
		КонецЕсли;
		ДоступныеПоля 	= Неопределено;
	КонецЕсли;
	Если Таблица = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
		Оператор.Источники.Добавить(Таблица, ИмяТаблицы, Псевдоним);
	Иначе
		Оператор.Источники.Добавить(Таблица, Псевдоним);
	КонецЕсли;
	Для Каждого Источник Из Оператор.Источники Цикл
		Соединения = Источник.Соединения;
		Соединение = Соединения.НайтиПоПсевдониму(Псевдоним);
		Пока Соединение <> Неопределено Цикл
			Соединения.Удалить(Соединения.Индекс(Соединение));
			Соединение = Соединения.НайтиПоПсевдониму(Псевдоним);
		КонецЦикла;
	КонецЦикла;
	Источник = Оператор.Источники[Оператор.Источники.Количество()-1];
	Источник.Соединения.Очистить();
	Если ДоступныеПоля <> Неопределено Тогда
		ДоступныеПоляИсточника = Источник.Источник.ДоступныеПоля;
		Для Каждого СтруктураПоля Из ДоступныеПоля Цикл
			Если СтруктураПоля.ТипЗначения <> Неопределено И СтруктураПоля.ТипЗначения.Типы().ВГраница()<>-1 Тогда
				ДоступныеПоляИсточника.Добавить(СтруктураПоля.Имя, СтруктураПоля.ТипЗначения.Типы()[0]); 
			Иначе
				ДоступныеПоляИсточника.Добавить(СтруктураПоля.Имя); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ПараметрыВиртуальнойТаблицы <> Неопределено Тогда
		УстановитьПараметрыВиртуальнойТаблицы(Источник, ПараметрыВиртуальнойТаблицы);
	КонецЕсли;
	Возврат Источник;
КонецФункции

// Устарела. Использовать Поле.
Функция ДобавитьПоле(ЗапросПакета = Неопределено, Оператор = Неопределено, Знач ИндексКолонки = Неопределено, ПутьКПолю, Псевдоним = "") Экспорт
	Если Оператор = Неопределено Тогда
		Оператор = ЗапросПакета.Операторы[ЗапросПакета.Операторы.Количество()-1];
	КонецЕсли;
	ВыбираемыеПоля	= Оператор.ВыбираемыеПоля;
	Если ИндексКолонки = Неопределено И Не ПустаяСтрока(Псевдоним) И ЗапросПакета <> Неопределено Тогда
		Колонка = ЗапросПакета.Колонки.Найти(Псевдоним);
		Если Колонка <> Неопределено Тогда
			ИндексКолонки = ЗапросПакета.Колонки.Индекс(Колонка);
		КонецЕсли;
	КонецЕсли;
	Если ИндексКолонки = Неопределено Тогда
		Если СтрЗаканчиваетсяНа(ПутьКПолю, "*") Тогда
			ПозицияТочки = СтрНайти(ПутьКПолю, ".");
			Если ПозицияТочки = 0 Тогда
				Для каждого Источник Из Оператор.Источники Цикл
					ПсевдонимИсточника = Источник.Источник.Псевдоним;
					Для каждого ДоступноеПоле Из Источник.Источник.ДоступныеПоля Цикл
						Если ТипЗнч(ДоступноеПоле) = Тип("ДоступноеПолеСхемыЗапроса") Тогда
							Поле = ВыбираемыеПоля.Добавить(ПсевдонимИсточника+"."+ДоступноеПоле.Имя);
							Если ЗапросПакета <> Неопределено Тогда
								ИндексКолонки = ЗапросПакета.Колонки.Количество()-1;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			Иначе
				ПсевдонимИсточника = Лев(ПутьКПолю, ПозицияТочки-1);
				Для каждого ДоступноеПоле Из Оператор.Источники.НайтиПоПсевдониму(ПсевдонимИсточника).Источник.ДоступныеПоля Цикл
					Если ТипЗнч(ДоступноеПоле) = Тип("ДоступноеПолеСхемыЗапроса") Тогда
						Поле = ВыбираемыеПоля.Добавить(ПсевдонимИсточника+"."+ДоступноеПоле.Имя);
						Если ЗапросПакета <> Неопределено Тогда
							ИндексКолонки = ЗапросПакета.Колонки.Количество()-1;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Поле = ВыбираемыеПоля.Добавить(ПутьКПолю);
			Если ЗапросПакета <> Неопределено Тогда
				ИндексКолонки = ЗапросПакета.Колонки.Количество()-1;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Поле = ВыбираемыеПоля.Добавить(ПутьКПолю, ИндексКолонки); 
	КонецЕсли;
	Если Не ПустаяСтрока(Псевдоним) И ЗапросПакета <> Неопределено Тогда
		ЗапросПакета.Колонки[ИндексКолонки].Псевдоним = Псевдоним;
	КонецЕсли;
	Возврат Поле;
КонецФункции

// Устарела. Использовать ВыражениеПоля (поменялся тип возвращаемого значения).
// Устанавливает новое выражение поля
// Может использоваться для установки агрегатных функций для полей, созданных в запросе из таблицы
//
// Параметры:
//	Оператор		  	- ОператорВыбратьСхемыЗапроса
//						- ПоляСхемыЗапроса
//	АгрегатнаяФункция 	- Строка - имя агрегатной функции, которая будет применена для конструирования выражения
//	ИмяПоля				- Строка - псевдоним поля или полный путь к полю
//	Выражение			- Строка - новое выражение поля
//						- ВыражениеСхемыЗапроса - 
// Пример:
//	было СуммаДокумента, стало СУММА(СуммаДокумента)
//
Функция УстановитьВыражениеПоля(Оператор, АгрегатнаяФункция = "", ИмяПоля, Знач Выражение = Неопределено) Экспорт
	Если АгрегатнаяФункция <> "" Тогда
		Если Выражение <> Неопределено Тогда
			Выражение = АгрегатнаяФункция+"("+Строка(Выражение)+")";
		Иначе
			Выражение = АгрегатнаяФункция+"("+ИмяПоля+")";
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Выражение) = Тип("Строка") Тогда
		Выражение = Новый ВыражениеСхемыЗапроса(Выражение);
	КонецЕсли;
	Если ТипЗнч(Оператор) = Тип("ПоляСхемыЗапроса") Тогда
		_ВыбираемыеПоля = Оператор;
	Иначе
		_ВыбираемыеПоля = Оператор.ВыбираемыеПоля;
	КонецЕсли;
	Поле = _ВыбираемыеПоля.Найти(ИмяПоля);
	_ВыбираемыеПоля.Установить(_ВыбираемыеПоля.Индекс(Поле), Выражение);
	Возврат Поле;
КонецФункции

// Устарела. Использовать Порядок.
// Добавляет порядок по колонке запроса
//
// Параметры:
//	ЗапросПакета 	- ЗапросВыбораСхемыЗапроса
//	Поле			- Строка - псевдоним колонки запроса
//					- ДоступноеПолеСхемыЗапроса,КолонкаСхемыЗапроса,ВыражениеСхемыЗапроса.
//	Направление		- НаправлениеПорядкаСхемыЗапроса.
//
Функция ДобавитьПорядок(ЗапросПакета, Поле, Направление = Неопределено) Экспорт
	Возврат Порядок(ЗапросПакета, Поле, Направление);
КонецФункции

// Устарела. Использовать ОписаниеВременнойТаблицы.
Функция ПолучитьОписаниеВременнойТаблицы(ИмяТаблицы, МенеджерВременныхТаблиц = Неопределено, _КоллекцияКолонок = Неопределено) Экспорт
	Возврат ОписаниеВременнойТаблицы(ИмяТаблицы, МенеджерВременныхТаблиц, _КоллекцияКолонок);
КонецФункции

// Устарела. Использовать Соединение.
// Добавляет соединение источников. Если соединение уже добавлено, то к существующему условию добавляется текущее условие соединения.
//
// Параметры:
//	Оператор 		- ОператорВыбратьСхемыЗапроса - обязательный, если ИсточникСлева типа Строка.
//	ИсточникСлева 	- Строка - псевдоним источника
//					- ИсточникСхемыЗапроса
//	ИсточникСправа 	- Строка - псевдоним источника
//					- ИсточникСхемыЗапроса
//	Условие 		- Строка - Условие соединения в виде текста. В тексте используются псевдонимы источников.
//	ТипСоединения 	- ТипСоединенияСхемыЗапроса - по умолчанию ЛевоеВнешнее.
//
Процедура ДобавитьСоединение(Оператор = Неопределено, Знач ИсточникСлева, ИсточникСправа, Условие = "", ТипСоединения = Неопределено, Заменить = Ложь) Экспорт
	Если ТипСоединения = Неопределено Тогда
		ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
	КонецЕсли; 
	Если ТипЗнч(ИсточникСлева) = Тип("Строка") Тогда
		ИсточникСлева = Оператор.Источники.НайтиПоПсевдониму(ИсточникСлева);
	КонецЕсли; 
	Если ТипЗнч(ИсточникСправа) = Тип("ИсточникСхемыЗапроса") Тогда
		ПсевдонимИсточникаСправа = ИсточникСправа.Источник.Псевдоним;
	Иначе
		ПсевдонимИсточникаСправа = ИсточникСправа;
	КонецЕсли; 
	
	Соединение = Неопределено;
	Если Заменить Тогда
		ИсточникСлева.Соединения.Очистить();
	Иначе
		Соединение	= ИсточникСлева.Соединения.НайтиПоПсевдониму(ПсевдонимИсточникаСправа);
	КонецЕсли;
	Если Соединение = Неопределено Тогда
		ИсточникСлева.Соединения.Добавить(ПсевдонимИсточникаСправа, Условие);
		ИсточникСлева.Соединения[ИсточникСлева.Соединения.Количество()-1].ТипСоединения = ТипСоединения; 
	Иначе
		ДобавитьУсловиеСоединения(Соединение, Условие);
	КонецЕсли;
КонецПроцедуры

// Устарела. Использовать Запрос.
// Создает запрос и устанавливает текст запроса из схемы запроса.
//
// Параметры:
//	СхемаЗапроса - СхемаЗапроса
//  Параметры	 - Структура - параметры запроса
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//  СоздатьМенеджерВременныхТаблиц - Булево - если Да, то в переменную МенеджерВременныхТаблиц будет помещен созданный одноименный объект
//
Функция СоздатьЗапрос(СхемаЗапроса, Параметры = Неопределено, МенеджерВременныхТаблиц = Неопределено, СоздатьМенеджерВременныхТаблиц = Ложь) Экспорт
	Возврат Запрос(СхемаЗапроса, Параметры, МенеджерВременныхТаблиц, СоздатьМенеджерВременныхТаблиц);
КонецФункции

// Устарела. Использовать Оператор.Отбор.Добавить(). 
// Добавляет условие отбора в оператор Выбрать.
// Процедуру имеет смысл использовать для добавления выбора в последний оператор Выбрать в Запросе пакета,
// в иных случаях нужно использовать свойство оператора, например: ОператорВыбрать.Отбор.Добавить("Источник.ДокументОснование = Неопределено"); 
//
// Параметры:
//  Оператор 	- ОператорСхемыЗапроса
//				- ЗапросСхемыЗапроса - в качестве оператора будет выбран последний
//  Условие		- Строка
//
Процедура ДобавитьОтбор(Знач Оператор, Условие) Экспорт
	Если ТипЗнч(Оператор) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
		Оператор = Оператор.Операторы[Оператор.Операторы.Количество()-1];
	КонецЕсли;
	Оператор.Отбор.Добавить(Условие);
КонецПроцедуры

// Устарела. Использовать Итог. 
// Добавляет итог
//
// Параметры:
//  ЗапросПакета - ЗапросСхемыЗапроса
//  Выражение    - Строка 	- выражение типа "СУММА(ИмяПоля)"
//  ИмяКолонки   - Строка 	- Псевдоним колонки запроса, возможно новая колонка
//  ТипКонтрольнойТочки   	- ТипКонтрольнойТочкиСхемыЗапроса - 
//  ТипДополненияПериодами  - ТипДополненияПериодамиСхемыЗапроса -
//	НачалоПериода - Дата 	- 
//				  - Строка	- строка в формате "ДАТАВРЕМЯ(ГГГГ, ММ, ДД)" или "ДАТАВРЕМЯ(ГГГГ, ММ, ДД, ЧЧ, ММ, СС)"
//	КонецПериода  - Дата 	- 
//				  - Строка	- строка в формате "ДАТАВРЕМЯ(ГГГГ, ММ, ДД)" или "ДАТАВРЕМЯ(ГГГГ, ММ, ДД, ЧЧ, ММ, СС)"
//
Процедура ДобавитьИтог(ЗапросПакета, Выражение, ИмяКолонки = "", ТипКонтрольнойТочки = Неопределено, ТипДополненияПериодами = Неопределено, НачалоПериода = "", КонецПериода = "") Экспорт
	КонтрольнаяТочка = ЗапросПакета.КонтрольныеТочкиИтогов.Добавить(Выражение);
	КонтрольнаяТочка.ИмяКолонки					 = ?(ИмяКолонки = "", Выражение, ИмяКолонки);
	КонтрольнаяТочка.ТипКонтрольнойТочки 		= ?(ТипКонтрольнойТочки 	= Неопределено, ТипКонтрольнойТочкиСхемыЗапроса.Элементы, ТипКонтрольнойТочки);
	КонтрольнаяТочка.ТипДополненияПериодами 	= ?(ТипДополненияПериодами 	= Неопределено, ТипДополненияПериодамиСхемыЗапроса.БезДополнения, ТипДополненияПериодами);
	КонтрольнаяТочка.НачалоПериодаДополнения 	= ?(ТипЗнч(НачалоПериода) 	= Тип("Строка"), НачалоПериода, бф_МодельЗапросаСлужебный.ФорматДатаВремя(НачалоПериода));
	КонтрольнаяТочка.КонецПериодаДополнения 	= ?(ТипЗнч(КонецПериода) 	= Тип("Строка"), КонецПериода, бф_МодельЗапросаСлужебный.ФорматДатаВремя(КонецПериода));
КонецПроцедуры

// Устарела. Использовать СхемаЗапросаКомпоновкиДанных, ДобавитьОтборКомпоновкиДанных
// Конвертация параметров выражений схемы запроса из свойства Отбор оператора выбора источника в Отбор оператора выбора получателя
// по соответствию
//
// Параметры:
//  ОтборПолучатель 		- ВыраженияСхемыЗапроса - 
//  ОтборИсточник   		- ВыраженияСхемыЗапроса - 
//  СоответствиеПараметров	- Соответствие - "&П1" -> "&П10"
//
Процедура СконвертироватьПараметрыОтбора(ОтборПолучатель, ОтборИсточник, СоответствиеПараметров) Экспорт
	RegExp				= Новый COMОбъект("VBScript.RegExp");
	RegExp.Multiline	= Истина;
	RegExp.Global		= Истина;
	RegExp.IgnoreCase	= Истина;
	RegExp.Pattern		= "&П[0-9]{0,}";

	Для Каждого ВыражениеОтбора Из ОтборИсточник Цикл
		ТекстВыраженияОтбора	= Строка(ВыражениеОтбора);
		ТекстВыражения			= "";
		ИндексПозиции			= 1;
		Matches					= RegExp.Execute(ТекстВыраженияОтбора);
		Для каждого Match Из Matches Цикл
			ДельтаПозиции	= Match.FirstIndex - ИндексПозиции + 1;
			ДельтаТекста	= Сред(ТекстВыраженияОтбора, ИндексПозиции, ДельтаПозиции);
			ИндексПозиции	= ИндексПозиции + ДельтаПозиции + Match.Length;
			ТекстВыражения	= ТекстВыражения + ДельтаТекста + СоответствиеПараметров[Match.Value];
		КонецЦикла;
		ДельтаТекста	= Сред(ТекстВыраженияОтбора, ИндексПозиции, СтрДлина(ТекстВыраженияОтбора)-ИндексПозиции+1);
		ТекстВыражения	= ТекстВыражения + ДельтаТекста;
		ОтборПолучатель.Добавить(Новый ВыражениеСхемыЗапроса(ТекстВыражения));
	КонецЦикла;
КонецПроцедуры

// Устарела. Использовать ОписаниеВложенногоЗапроса 
Функция ПолучитьОписаниеВложенногоЗапроса(ДоступныеПоля = Неопределено) Экспорт
	Возврат Новый Структура("Тип, ДоступныеПоля", Тип("ВложенныйЗапросСхемыЗапроса"), ДоступныеПоля);
КонецФункции

// Устарела. Использовать ВыбратьСледующий
Функция ВыборкаПервойЗаписи(РезультатЗапроса) Экспорт
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка;
КонецФункции // СтрокаРезультата()


#КонецОбласти

#Область Вспомогательные

Функция ЗначениеВМассиве(Значение)
	
	Массив = Новый Массив;
	Массив.Добавить(Значение);
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти
