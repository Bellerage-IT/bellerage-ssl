#Область ПрограммныйИнтерфейс


// Добавить пагинацию.
// 
// Параметры:
//  ТекстЗапроса - Строка
//  Порция - Число
//  Сдвиг - Число
//  ПакетЗапроса - Число - Номер пакета запроса
Процедура ДобавитьПагинацию(ТекстЗапроса, Порция, Сдвиг, ПакетЗапроса = Неопределено) Экспорт
	

	Если ТипЗнч(Порция) <> Тип("Число") Или ТипЗнч(Сдвиг) <> Тип("Число") Или Порция = 0 Тогда
		ВызватьИсключение "Недопустимые значения параметров: Порция и Сдвиг";
	КонецЕсли; 

	Схема = бф_МодельЗапроса.МодельЗапроса(ТекстЗапроса);

	Если ПакетЗапроса <> Неопределено Тогда
		Схема.УстановитьЗапросПакета(ПакетЗапроса);
	КонецЕсли;
	
	//@skip-check property-return-type, dynamic-access-method-not-found
	Если Схема.ЗапросПакета.Операторы.Количество() > 1 Тогда
		ВызватьИсключение "В пакете запроса несколько операторов выбрать, такой вариант не поддерживает";
	КонецЕсли;	
	
	Если Сдвиг = 0 Тогда
		Схема.Первые(Порция);
		ТекстЗапроса = Схема.ПолучитьТекстЗапроса();
		Возврат;
	КонецЕсли;
	
	ВспомогательнаяСхема = бф_МодельЗапроса.МодельЗапроса();
	ВспомогательнаяСхема.ЗапросПакета();
	//@skip-check invocation-parameter-type-intersect, property-return-type
	УсловиеНевхождения = Новый Массив();
	УсловиеНевхождения.Добавить("НЕ");
	УсловиеНевхождения.Добавить("(");
	ВыбираемыеПоля = Схема.ОператорВыбрать.ВыбираемыеПоля; // ПоляСхемыЗапроса
	ИменаВыбираемыхПолей = Новый Массив();
	Для Каждого Поле Из ВыбираемыеПоля Цикл	
		// Поля неограниченной длины пропускаются
		Если ЭтоСтрокаНеограниченнойДлины(Поле) Тогда
			Продолжить;
		КонецЕсли;	
		ИменаВыбираемыхПолей.Добавить(Строка(Поле));
	КонецЦикла;
	УсловиеНевхождения.Добавить(СтрСоединить(ИменаВыбираемыхПолей, ","));
	УсловиеНевхождения.Добавить(")");
	УсловиеНевхождения.Добавить("В");
	УсловиеНевхождения.Добавить("(");
	УсловиеНевхождения.Добавить(СформироватьЗапросСдвига(Схема, Сдвиг));
	УсловиеНевхождения.Добавить(")");
	
	Схема.Отбор(СтрСоединить(УсловиеНевхождения, " "));
	
	ТекстЗапроса = Схема.Первые(Порция).ПолучитьТекстЗапроса();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьЗапросСдвига(Схема, Сдвиг) Экспорт
	
	СхемаЗапроса = Схема.СхемаЗапроса; // СхемаЗапроса
	
	КопияПакета = СхемаЗапроса.ПакетЗапросов.ДобавитьКопию(СхемаЗапроса.ПакетЗапросов.Индекс(Схема.ЗапросПакета));
	ВспомогательнаяМодель = бф_МодельЗапроса.МодельЗапроса(КопияПакета.ПолучитьТекстЗапроса());
	
	СхемаЗапроса.ПакетЗапросов.Удалить(СхемаЗапроса.ПакетЗапросов.Индекс(КопияПакета));
	
	ПоляСхемы = ВспомогательнаяМодель.ОператорВыбрать.ВыбираемыеПоля; // ПоляСхемыЗапроса
	Для Каждого Поле Из ПоляСхемы Цикл
		Если ЭтоСтрокаНеограниченнойДлины(Поле) Тогда
			ПоляСхемы.Удалить(ПоляСхемы.Индекс(Поле));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВспомогательнаяМодель.Первые(Сдвиг).ПолучитьТекстЗапроса();
	
КонецФункции

Функция ЭтоСтрокаНеограниченнойДлины(Поле)
	
	ОписаниеТипаВсеСсылки = ОписаниеТипаВсеСсылки();
	
	Если СтрЧислоВхождений(Строка(Поле), ".") > 1 И СтрЗаканчиваетсяНа(Строка(Поле), "Представление") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Тип Из Поле.ТипЗначения().Типы() Цикл
		Если СтрЗаканчиваетсяНа(Строка(Поле), "Представление") И ОписаниеТипаВсеСсылки.СодержитТип(Тип) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат (Поле.ТипЗначения().СодержитТип(Тип("Строка")) И Поле.ТипЗначения().КвалификаторыСтроки.Длина = 0);
	
КонецФункции

Функция ОписаниеТипаВсеСсылки()
	
	Возврат Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(
		Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(
			Справочники.ТипВсеСсылки(),
			Документы.ТипВсеСсылки().Типы()),
			ПланыОбмена.ТипВсеСсылки().Типы()),
			Перечисления.ТипВсеСсылки().Типы()),
			ПланыВидовХарактеристик.ТипВсеСсылки().Типы()),
			ПланыСчетов.ТипВсеСсылки().Типы()),
			ПланыВидовРасчета.ТипВсеСсылки().Типы()),
			БизнесПроцессы.ТипВсеСсылки().Типы()),
			БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().Типы()),
			Задачи.ТипВсеСсылки().Типы());
	
КонецФункции

#КонецОбласти
