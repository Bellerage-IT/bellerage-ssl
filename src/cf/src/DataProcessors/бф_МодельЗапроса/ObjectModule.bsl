//@skip-check module-structure-top-region,module-structure-method-in-regions,module-structure-var-in-region,object-module-export-variable
#Область ОписаниеПеременных
Перем СхемаЗапроса Экспорт;
Перем ЗапросПакета Экспорт;
Перем ВложенныйЗапрос Экспорт;
Перем ОператорВыбрать Экспорт;
Перем Источник Экспорт;
Перем ИсточникСлева Экспорт;
Перем ИсточникСправа Экспорт;
Перем Поле Экспорт;
Перем Соединение Экспорт;
Перем ТипСоединения Экспорт;
Перем КонтрольнаяТочка Экспорт;
Перем СтруктураЗапроса Экспорт;
Перем МенеджерВременныхТаблиц Экспорт;
Перем Параметры Экспорт;
Перем РезультатПакета Экспорт;
Перем Запрос Экспорт;
Перем Стек Экспорт;
#КонецОбласти

#Область ОбщегоНазначения

//  Возвращаемое значение: КолонкиВременнойТаблицыЗапроса(Имя, ТипЗначения) | ДоступноеПолеСхемыЗапроса(Имя, ТипЗначения)
Функция ДоступныеПоля(ИмяТаблицы)
	ВременныеТаблицы = ЗапросПакета.ДоступныеТаблицы.Найти("Временные таблицы");
	Если ВременныеТаблицы <> Неопределено Тогда
		ИсточникТаблицы = ВременныеТаблицы.Состав.Найти(ИмяТаблицы);
		Если ИсточникТаблицы <> Неопределено Тогда
			Возврат ИсточникТаблицы.Поля;
		КонецЕсли;
	КонецЕсли;
	ИсточникТаблицы = МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы);
	Если ИсточникТаблицы <> Неопределено Тогда
		Возврат ИсточникТаблицы.Колонки;
	КонецЕсли;
	Возврат Новый Массив;
КонецФункции

Функция ПоляТаблицы(ИмяТаблицы, ПоляИсточника = Неопределено)
	Поля = Новый Массив;
	Если ПоляИсточника = Неопределено Тогда
		Для Каждого ДоступноеПоле Из ДоступныеПоля(ИмяТаблицы) Цикл
			Поля.Добавить(ДоступноеПоле.Имя);
		КонецЦикла;
		Возврат Поля;
	КонецЕсли;
	Для Каждого ДоступноеПоле Из ДоступныеПоля(ИмяТаблицы) Цикл
		Если ПоляИсточника.Найти(ДоступноеПоле.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Поля.Добавить(ДоступноеПоле.Имя);
	КонецЦикла;
	Возврат Поля;
КонецФункции

// Формирует текст выражения вхождения по шаблону: 
// (<Поля слева>) В (ВЫБРАТЬ <Поля справа> ИЗ <Имя таблицы> КАК <Имя таблицы>)
// 
// Параметры:
//  ИмяТаблицы - Строка - Имя таблицы
//  Поля - Строка - Поля или соответствия полей слева и справа: 
//  <Поле слева> = <Поле справа>|<Поле>|<Поле слева> = &<Параметр справа>[, ...]
// 
// Возвращаемое значение:
//  Строка - Выражение вхождения
Функция ВыражениеВхождения(ИмяТаблицы, Поля = "*", ПоляИсточника = Неопределено) Экспорт
	Если Поля = "*" Тогда
		Поля = ПоляТаблицы(ИмяТаблицы, ПоляИсточника);
		ПоляСлева = Поля; 
		ПоляСправа = Поля;
		Возврат СтрШаблон("(%1) В (ВЫБРАТЬ РАЗЛИЧНЫЕ %2 ИЗ %3 КАК %3)", СтрСоединить(Поля, ", "), ИмяТаблицы + "." + СтрСоединить(Поля, ", " + ИмяТаблицы + "."), ИмяТаблицы);
	КонецЕсли;
	ПоляСлева = Новый Массив;
	ПоляСправа = Новый Массив;
	Для Каждого Связь Из бф_МодельЗапросаСлужебный.Массив(Поля) Цикл
		Состав = СтрРазделить(Связь, "=", Ложь);
		Если Состав.Количество() = 1 Тогда
			ПоляСлева.Добавить(Связь);
			ПоляСправа.Добавить(ИмяТаблицы + "." +Связь);
			Продолжить;
		КонецЕсли;
		ПоляСлева.Добавить(Состав[0]);
		ПолеСправа = Состав[1];
		Если СтрНачинаетсяС(ПолеСправа, "&") Тогда
			ПоляСправа.Добавить(Состав[1]);
			Продолжить;
		КонецЕсли;
		ПоляСправа.Добавить(ИмяТаблицы + "." + ПолеСправа);
	КонецЦикла;
	Возврат СтрШаблон("(%1) В (ВЫБРАТЬ РАЗЛИЧНЫЕ %2 ИЗ %3 КАК %3)", СтрСоединить(ПоляСлева, ", "), СтрСоединить(ПоляСправа, ", "), ИмяТаблицы);
КонецФункции

#КонецОбласти

#Область Состояние

Функция СостояниеПоУмолчанию()
	Возврат Новый Структура("ЗапросПакета,ОператорВыбрать,Источник,ИсточникСлева,ИсточникСправа,Поле,Соединение,ТипСоединения,КонтрольнаяТочка");
КонецФункции

Процедура СохранитьСостояниеНаСтеке()
	СохраненноеСостояние = СостояниеПоУмолчанию();
	ЗаполнитьЗначенияСвойств(СохраненноеСостояние, ЭтотОбъект);
	Стек.Добавить(СохраненноеСостояние);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеПоУмолчанию());	
КонецПроцедуры

Процедура ВосстановитьСостояниеСоСтека()
	СохраненноеСостояние = Стек[Стек.ВГраница()];
	Стек.Удалить(Стек.ВГраница());
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СохраненноеСостояние);
КонецПроцедуры

#КонецОбласти

#Область ПакетЗапроса

Функция УстановитьЗапрос(НовыйЗапрос) Экспорт
	УстановитьМенеджерВременныхТаблиц(НовыйЗапрос.МенеджерВременныхТаблиц);
	УстановитьТекстЗапроса(НовыйЗапрос.Текст);
	Для Каждого ПараметрЗапроса Из НовыйЗапрос.Параметры Цикл
		Параметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	Возврат ЭтотОбъект;
КонецФункции

Функция УстановитьТекстЗапроса(ТекстЗапроса) Экспорт
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	УстановитьЗапросПакета();
	Возврат ЭтотОбъект;
КонецФункции

Функция УстановитьИсточник(Индекс = Неопределено) Экспорт
	Источник = ПолучитьИсточник(Индекс);
	Возврат ЭтотОбъект;
КонецФункции

Функция УстановитьОператор(Индекс = Неопределено) Экспорт
	Если Индекс = Неопределено Тогда
		ВыбранныйИндекс = ЗапросПакета.Операторы.Количество() - 1;
	Иначе
		ВыбранныйИндекс = Индекс;
	КонецЕсли;
	ОператорВыбрать = ЗапросПакета.Операторы[ВыбранныйИндекс];
	Возврат УстановитьИсточник();
КонецФункции

Функция УстановитьЗапросПакета(Индекс = Неопределено) Экспорт
	Если Индекс = Неопределено Тогда
		ВыбранныйИндекс = СхемаЗапроса.ПакетЗапросов.Количество() - 1;
	Иначе
		ВыбранныйИндекс = Индекс;
	КонецЕсли;
	ЗапросПакета = СхемаЗапроса.ПакетЗапросов[ВыбранныйИндекс];
	Возврат УстановитьОператор();
КонецФункции

Функция ПолучитьТекстЗапроса() Экспорт
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
КонецФункции

// Добавляет оператор создания нового запроса в пакете
// 
// Параметры:
//  ИмяЗапроса - Строка - Имя запроса, которое может быть использовано при именованном обращении к результату запроса
// 
// Возвращаемое значение:
//  ОбработкаОбъект.бф_МодельЗапроса
Функция ЗапросПакета(ИмяЗапроса = "") Экспорт
	РезультатПакета = Неопределено;
	ЗапросПакета = бф_МодельЗапроса.ЗапросПакета(СхемаЗапроса, , , ОператорВыбрать);
	Если НЕ ПустаяСтрока(ИмяЗапроса) Тогда
		бф_МодельЗапроса.ОписаниеЗапроса(СхемаЗапроса, СтруктураЗапроса, ИмяЗапроса);
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

// Добавляет оператор уничтожения временной таблицы
// 
// Параметры:
//  ИмяВременнойТаблицы - Строка
// 
// Возвращаемое значение:
//  ОбработкаОбъект.бф_МодельЗапроса
Функция Уничтожить(ИмяВременнойТаблицы) Экспорт
	бф_МодельЗапроса.ЗапросУничтожения(СхемаЗапроса, ИмяВременнойТаблицы);
	Возврат ЭтотОбъект;
КонецФункции

Функция Поместить(ИмяВременнойТаблицы) Экспорт
	ЗапросПакета.ТаблицаДляПомещения = ИмяВременнойТаблицы;
	Возврат ЭтотОбъект;
КонецФункции

Функция Разрешенные(ВыбиратьРазрешенные = Истина) Экспорт
	ЗапросПакета.ВыбиратьРазрешенные = ВыбиратьРазрешенные;
	Возврат ЭтотОбъект;
КонецФункции

Функция Порядок(Выражение, Направление = Неопределено) Экспорт
	Если ТипЗнч(Направление) = Тип("Строка") Тогда
		Если Направление = "-" Тогда
			бф_МодельЗапроса.Порядок(ЗапросПакета, Выражение, НаправлениеПорядкаСхемыЗапроса.ПоУбыванию);
			Возврат ЭтотОбъект;
		КонецЕсли;
		Если Направление = "+" Тогда
			бф_МодельЗапроса.Порядок(ЗапросПакета, Выражение, НаправлениеПорядкаСхемыЗапроса.ПоВозрастанию);
			Возврат ЭтотОбъект;
		КонецЕсли;
		бф_МодельЗапроса.Порядок(ЗапросПакета, Выражение, НаправлениеПорядкаСхемыЗапроса[Направление]);
		Возврат ЭтотОбъект;
	КонецЕсли;				
	бф_МодельЗапроса.Порядок(ЗапросПакета, Выражение, Направление);
	Возврат ЭтотОбъект;
КонецФункции

//  Добавить признак автоупорядочивания
Функция Автопорядок(Значение = Истина) Экспорт
	ЗапросПакета.Автопорядок = Значение;
	Возврат ЭтотОбъект;
КонецФункции

Функция Индекс(ИмяПоля) Экспорт
	ЗапросПакета.Индекс.Добавить(ИмяПоля);
	Возврат ЭтотОбъект;
КонецФункции

Функция ПсевдонимКолонки(ТекущийПсевдоним, Псевдоним) Экспорт
	бф_МодельЗапроса.ИзменитьПсевдонимКолонки(ЗапросПакета, ТекущийПсевдоним, Псевдоним);
	Возврат ЭтотОбъект;
КонецФункции

Функция УстановитьМенеджерВременныхТаблиц(НовыйМенеджерВременныхТаблиц) Экспорт
	МенеджерВременныхТаблиц = НовыйМенеджерВременныхТаблиц;
	Возврат ЭтотОбъект;
КонецФункции

Функция УстановитьСхемуЗапроса(НоваяСхемаЗапроса) Экспорт
	СхемаЗапроса = НоваяСхемаЗапроса;
	УстановитьЗапросПакета();
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#Область ОператорВыбрать

// Создание оператора выборки
// 
// Параметры:
//  Количество - Число - ВЫБРАТЬ ПЕРВЫЕ N
//  Различные - Булево - ВЫБРАТЬ РАЗЛИЧНЫЕ
//  ТипОбъединения - ТипОбъединенияСхемыЗапроса - ОбъединитьВсе, Объединить
//  Индекс - Число - Индекс оператора выборки для копирования
// 
// Возвращаемое значение:
//  ОбработкаОбъект.бф_МодельЗапроса - Выбрать
Функция Выбрать(Количество = Неопределено, Различные = Неопределено, ТипОбъединения = Неопределено, Индекс = Неопределено) Экспорт
	Если Индекс <> Неопределено Тогда
		Если ТипЗнч(Индекс) = Тип("Число") Тогда
			Если Индекс < 0 Тогда
				ОператорИсточник = ЗапросПакета.Операторы[ЗапросПакета.Операторы.Количество() + Индекс];
			Иначе
				ОператорИсточник = ЗапросПакета.Операторы[Индекс];
			КонецЕсли;
		Иначе
			ОператорИсточник = Индекс;
		КонецЕсли;
		ОператорВыбрать = бф_МодельЗапроса.КопияОператора(ЗапросПакета, ОператорИсточник);
	Иначе
		ОператорВыбрать = бф_МодельЗапроса.Оператор(ЗапросПакета);
	КонецЕсли;
	Если Количество <> Неопределено Тогда
		ОператорВыбрать.КоличествоПолучаемыхЗаписей = Количество;
	КонецЕсли;
	Если Различные <> Неопределено Тогда
		ОператорВыбрать.ВыбиратьРазличные = Различные;
	КонецЕсли;
	ОператорВыбрать.ТипОбъединения = ?(ТипОбъединения = Неопределено, ТипОбъединенияСхемыЗапроса.ОбъединитьВсе, ТипОбъединения);
	Возврат ЭтотОбъект;
КонецФункции

// Создание оператора выборки. См. Выбрать
// 
Функция Объединить(Количество = Неопределено, Различные = Неопределено, ТипОбъединения = Неопределено, Индекс = Неопределено) Экспорт
	Если ТипОбъединения = Неопределено Тогда
		Возврат Выбрать(Количество, Различные, ТипОбъединенияСхемыЗапроса.Объединить, Индекс);
	КонецЕсли;
	Возврат Выбрать(Количество, Различные, ТипОбъединения, Индекс);
КонецФункции

// Создание оператора выборки. См. Выбрать
// 
Функция ОбъединитьВсе(Количество = Неопределено, Различные = Неопределено, Индекс = Неопределено) Экспорт
	Возврат Выбрать(Количество, Различные, ТипОбъединенияСхемыЗапроса.ОбъединитьВсе, Индекс);
КонецФункции

// Установить признак РАЗЛИЧНЫЕ
// 
// Параметры:
//  ВыбиратьРазличные - Булево - Выбирать различные
// 
// Возвращаемое значение:
//  ОбработкаОбъект.бф_МодельЗапроса
Функция Различные(ВыбиратьРазличные = Истина) Экспорт
	ОператорВыбрать.ВыбиратьРазличные = ВыбиратьРазличные;
	Возврат ЭтотОбъект;
КонецФункции

// Установить признак ПЕРВЫЕ
// 
// Параметры:
//  КоличествоПолучаемыхЗаписей - Число - Количество получаемых записей
// 
// Возвращаемое значение:
//  ОбработкаОбъект.бф_МодельЗапроса
Функция Первые(КоличествоПолучаемыхЗаписей = 1) Экспорт
	ОператорВыбрать.КоличествоПолучаемыхЗаписей = КоличествоПолучаемыхЗаписей;
	Возврат ЭтотОбъект;
КонецФункции

// Добавить условие отбора в оператор выбора
// 
// Параметры:
//  Выражение - Строка, ВыраженияСхемыЗапроса - выражение отбора, соответствует выражению ГДЕ
// 
// Возвращаемое значение:
//  ОбработкаОбъект.бф_МодельЗапроса
Функция Отбор(Выражение) Экспорт
	ОператорВыбрать.Отбор.Добавить(Выражение);
	Возврат ЭтотОбъект;
КонецФункции

Функция ОчиститьОтбор() Экспорт
	ОператорВыбрать.Отбор.Очистить();
	Возврат ЭтотОбъект;
КонецФункции

// Применяется к условию отбора. См. УсловиеВхождения
// 
Функция ОтборВхождения(ИмяТаблицы, Поля = "*") Экспорт
	ОператорВыбрать.Отбор.Добавить(ВыражениеВхождения(ИмяТаблицы, Поля));
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#Область Поля

Функция ЕстьNull(Выражение, Псевдоним) Экспорт
	ПриведенноеВыражение = "";
	Для Каждого ВыражениеПоля Из бф_МодельЗапросаСлужебный.Массив(СтрЗаменить(Выражение, "*", Псевдоним)) Цикл
		Если ПриведенноеВыражение = "" Тогда
			ПриведенноеВыражение = ВыражениеПоля;
			Продолжить;
		КонецЕсли;
		ПриведенноеВыражение = СтрШаблон("ЕстьNULL(%1, %2)", ПриведенноеВыражение, ВыражениеПоля);
	КонецЦикла;
	Поле = бф_МодельЗапроса.Поле(ЗапросПакета, ОператорВыбрать,, ПриведенноеВыражение, Псевдоним);
	Возврат ЭтотОбъект;
КонецФункции

// Добавить поле в операторе выбора
// 
// Параметры:
//  Выражение - Строка - Выражение
//  Псевдоним - Строка - Псевдоним
//  ВыражениеЕстьNull - Строка - Выражение есть null
// 
// Возвращаемое значение:
//  ОбработкаОбъект.бф_МодельЗапроса
Функция Поле(Выражение, Псевдоним = "", ВыражениеЕстьNull = "") Экспорт
	Если ПустаяСтрока(ВыражениеЕстьNull) Тогда
		Поле = бф_МодельЗапроса.Поле(ЗапросПакета, ОператорВыбрать,, Выражение, Псевдоним);
		Возврат ЭтотОбъект;
	КонецЕсли;
	ПсевдонимПоля = Псевдоним;
	Если ПустаяСтрока(ПсевдонимПоля) Тогда
		Позиция = СтрНайти(Выражение, ".", НаправлениеПоиска.СКонца);
		Если Позиция > 0 Тогда
			ПсевдонимПоля = Прав(Выражение, СтрДлина(Выражение) - Позиция);
		КонецЕсли;
	КонецЕсли;
	Поле = бф_МодельЗапроса.Поле(ЗапросПакета, ОператорВыбрать,, СтрШаблон("ЕСТЬNULL(%1, %2)", Выражение, ВыражениеЕстьNull), ПсевдонимПоля);
	Возврат ЭтотОбъект;
КонецФункции

Функция Автономер(Псевдоним) Экспорт
	Возврат Поле("АВТОНОМЕРЗАПИСИ()", Псевдоним);
КонецФункции

Функция Представление(Выражение, Псевдоним = "", ЭтоСсылка = Ложь) Экспорт
	Если ПустаяСтрока(Псевдоним) Тогда
		Состав = СтрРазделить(Выражение, ". ", Ложь);
		Если Состав.ВГраница() > 0 Тогда
			Если ОператорВыбрать.Источники.НайтиПоПсевдониму(Состав[0]) <> Неопределено Тогда
				Состав.Удалить(0);
			КонецЕсли;
		КонецЕсли;
		Состав.Добавить("Представление");
		ПсевдонимПредставления = СтрСоединить(Состав, "");
	Иначе
		ПсевдонимПредставления = Псевдоним;
	КонецЕсли;
	Возврат Поле(СтрШаблон("ПРЕДСТАВЛЕНИЕ%1(%2)", ?(ЭтоСсылка, "ССЫЛКИ", ""), Выражение), ПсевдонимПредставления);
КонецФункции

Функция ПредставлениеСсылки(Выражение, Псевдоним = "") Экспорт
	Возврат Представление(Выражение, Псевдоним, Истина);
КонецФункции

Функция Подстрока(Выражение, НачальнаяПозиция, Длина, Псевдоним = "") Экспорт
	Если ПустаяСтрока(Псевдоним) Тогда
		Состав = СтрРазделить(Выражение, ". ", Ложь);
		Если Состав.ВГраница() = 0 Тогда
			ПсевдонимПредставления = Выражение;
		Иначе
			Если ОператорВыбрать.Источники.НайтиПоПсевдониму(Состав[0]) <> Неопределено Тогда
				Состав.Удалить(0);
			КонецЕсли;
			ПсевдонимПредставления = СтрСоединить(Состав, "");
		КонецЕсли;
	Иначе
		ПсевдонимПредставления = Псевдоним;
	КонецЕсли;
	Возврат Поле(СтрШаблон("ПОДСТРОКА(%1, %2, %3)", Выражение, Формат(НачальнаяПозиция, "ЧН=0; ЧГ="), Формат(Длина, "ЧГ=")), ПсевдонимПредставления);
КонецФункции

Функция НачалоПериодаМесяц(Выражение, Псевдоним = "", ВыражениеЕстьNull = "") Экспорт
	ПсевдонимПоля = Псевдоним;
	Если ПустаяСтрока(ПсевдонимПоля) Тогда
		Позиция = СтрНайти(Выражение, ".", НаправлениеПоиска.СКонца);
		Если Позиция > 0 Тогда
			ПсевдонимПоля = Прав(Выражение, СтрДлина(Выражение) - Позиция);
		КонецЕсли;
	КонецЕсли;
	Поле(СтрШаблон("НАЧАЛОПЕРИОДА(%1, МЕСЯЦ)", Выражение), ПсевдонимПоля, ВыражениеЕстьNull);
	Возврат ЭтотОбъект;
КонецФункции

Функция УдалитьПоле(Поле) Экспорт
	бф_МодельЗапроса.УдалитьПоле(ОператорВыбрать, Поле);
	Возврат ЭтотОбъект;
КонецФункции

Функция УдалитьКолонку(Псевдоним) Экспорт
	бф_МодельЗапроса.УдалитьКолонку(ЗапросПакета, Псевдоним);
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#Область АгрегатныеФункции

Функция Сумма(Выражение, Псевдоним = "", ВыражениеЕстьNull = "") Экспорт
	ПсевдонимПоля = Псевдоним;
	Если ПустаяСтрока(ПсевдонимПоля) Тогда
		Позиция = СтрНайти(Выражение, ".", НаправлениеПоиска.СКонца);
		Если Позиция > 0 Тогда
			ПсевдонимПоля = Прав(Выражение, СтрДлина(Выражение) - Позиция);
		КонецЕсли;
	КонецЕсли;
	Возврат Поле(СтрШаблон("СУММА(%1)", Выражение), ПсевдонимПоля, ВыражениеЕстьNull);
КонецФункции

Функция Среднее(Выражение, Псевдоним = "") Экспорт
	Возврат Поле(СтрШаблон("СРЕДНЕЕ(%1)", Выражение), Псевдоним);
КонецФункции

Функция Количество(Выражение, Псевдоним = "") Экспорт
	Возврат Поле(СтрШаблон("КОЛИЧЕСТВО(%1)", Выражение), Псевдоним);
КонецФункции

Функция КоличествоРазличных(Выражение, Псевдоним = "") Экспорт
	Возврат Поле(СтрШаблон("КОЛИЧЕСТВО(РАЗЛИЧНЫЕ %1)", Выражение), Псевдоним);
КонецФункции

Функция Максимум(Выражение, Псевдоним = "") Экспорт
	Возврат Поле(СтрШаблон("МАКСИМУМ(%1)", Выражение), Псевдоним);
КонецФункции

Функция Минимум(Выражение, Псевдоним = "") Экспорт
	Возврат Поле(СтрШаблон("МИНИМУМ(%1)", Выражение), Псевдоним);
КонецФункции

#КонецОбласти

#Область Источник

Функция Источник(Таблица, Знач Псевдоним = "", ПараметрыТаблицы = Неопределено) Экспорт
	
	Если ТипЗнч(Таблица) <> Тип("Строка") Тогда
		ИмяПараметра = бф_МодельЗапросаСлужебный.ИмяПоУникальномуИдентификатору();
		ВременнаяТаблица = бф_МодельЗапроса.ОписаниеВременнойТаблицы("&" + ИмяПараметра, Таблица);
		Источник = бф_МодельЗапроса.Источник(ОператорВыбрать, ВременнаяТаблица, Псевдоним);
		ИсточникСлева = Источник;
		Параметр(ИмяПараметра, Таблица);
		Возврат ЭтотОбъект;
	КонецЕсли;
	
	Если СтрНачинаетсяС(Таблица, "&") Тогда
		ИмяПараметра = Прав(Таблица, СтрДлина(Таблица) - 1);
		ВременнаяТаблица = бф_МодельЗапроса.ОписаниеВременнойТаблицы("&" + ИмяПараметра, ПараметрыТаблицы);
		Источник = бф_МодельЗапроса.Источник(ОператорВыбрать, ВременнаяТаблица, Псевдоним);
		ИсточникСлева = Источник;
		Параметр(ИмяПараметра, ПараметрыТаблицы);
		Возврат ЭтотОбъект;
	КонецЕсли;

	Если МенеджерВременныхТаблиц.Таблицы.Найти(Таблица) <> Неопределено Тогда
		ВременнаяТаблица = бф_МодельЗапроса.ОписаниеВременнойТаблицы(Таблица, МенеджерВременныхТаблиц);
		Источник = бф_МодельЗапроса.Источник(ОператорВыбрать, ВременнаяТаблица, Псевдоним);
		ИсточникСлева = Источник;
		Возврат ЭтотОбъект;
	КонецЕсли;
	
	Источник = бф_МодельЗапроса.Источник(ОператорВыбрать, Таблица, Псевдоним, ПараметрыТаблицы);
	ИсточникСлева = Источник;
	Возврат ЭтотОбъект;
КонецФункции

Функция ИсточникНачать(Псевдоним) Экспорт
	ВложенныйЗапрос = бф_МодельЗапроса.Источник(ОператорВыбрать, бф_МодельЗапроса.ОписаниеВложенногоЗапроса(), Псевдоним).Источник.Запрос;
	СохранитьСостояниеНаСтеке();
	ЗапросПакета = ВложенныйЗапрос; 
	Возврат ЭтотОбъект;
КонецФункции

Функция ИсточникЗавершить() Экспорт
	ВосстановитьСостояниеСоСтека();
	Возврат ЭтотОбъект;
КонецФункции

Функция ЗаменитьИсточник(ИсходныйИсточник, Таблица, НовыйПсевдоним = "") Экспорт
	бф_МодельЗапроса.ЗаменитьИсточник(ЗапросПакета, ОператорВыбрать, ИсходныйИсточник, Таблица, НовыйПсевдоним);
	Возврат ЭтотОбъект;
КонецФункции

Функция УдалитьИсточник(Псевдоним) Экспорт
	бф_МодельЗапроса.УдалитьИсточник(ОператорВыбрать, Псевдоним);
	Возврат ЭтотОбъект;
КонецФункции

Функция ПараметрТаблицы(ИмяПараметра, Значение) Экспорт
	бф_МодельЗапроса.УстановитьПараметрыВиртуальнойТаблицы(Источник, Новый Структура(ИмяПараметра, Значение));
	Возврат ЭтотОбъект;
КонецФункции

// Применяется к параметрам виртуальной таблицы. Условие вхождения вида: (Организация, Контрагент) В
//				(ВЫБРАТЬ
//					ВТ_ИЗМЕРЕНИЯ.Организация,
//					ВТ_ИЗМЕРЕНИЯ.Контрагент
//				ИЗ
//					ВТ_ИЗМЕРЕНИЯ КАК ВТ_ИЗМЕРЕНИЯ)
// 
// Параметры:
//  ИмяТаблицы - Строка - Имя временной таблицы
//  Поля - Строка - Поля вхождения через запятую. Если поля слева отличны от полей справа, то нужно указать соответствие
//  "ПолеСлева = ПолеСправа". Можно указывать параметр: "ПолеСлева = &Параметр"
// 
// Возвращаемое значение:
//  ОбработкаОбъект.бф_МодельЗапроса
Функция УсловиеВхождения(ИмяТаблицы, Поля = "*") Экспорт
	Возврат Условие(ВыражениеВхождения(ИмяТаблицы, Поля, Источник.Источник.ДоступныеПоля));
КонецФункции

// Добавить условие в параметрах виртуальной таблицы
// 
// Параметры:
//  Выражение - Строка - Выражение условия виртуальной таблицы
// 
// Возвращаемое значение:
//  ОбработкаОбъект.бф_МодельЗапроса
Функция Условие(Выражение) Экспорт
	Перем ТекущееВыражение;
	ПараметрыТаблицы = бф_МодельЗапроса.СтруктураПараметровВиртуальнойТаблицы(Источник.Источник.ИмяТаблицы, Источник.Источник.Параметры);
	Если ПараметрыТаблицы <> Неопределено И ПараметрыТаблицы.Свойство("Условие", ТекущееВыражение) Тогда
		Возврат ПараметрТаблицы("Условие", СтрШаблон("(%1) И (%2)", ТекущееВыражение, Выражение));
	КонецЕсли;
	Возврат ПараметрТаблицы("Условие", Выражение);
КонецФункции

// Добавить параметр виртуальной таблицы Начало периода.
// 
// Параметры:
//  Значение - Строка - Значение даты, для параметра использовать &
// 
// Возвращаемое значение:
//  ОбработкаОбъект.бф_МодельЗапроса
Функция НачалоПериода(Значение) Экспорт
	Возврат ПараметрТаблицы("НачалоПериода", Значение);
КонецФункции

// Добавить параметр виртуальной таблицы Конец периода.
Функция КонецПериода(Значение) Экспорт
	Возврат ПараметрТаблицы("КонецПериода", Значение);
КонецФункции

// Добавить параметр виртуальной таблицы.
Функция Период(Значение) Экспорт
	Возврат ПараметрТаблицы("Период", Значение);
КонецФункции

// Добавить параметр виртуальной таблицы.
Функция Периодичность(Значение) Экспорт
	Возврат ПараметрТаблицы("Периодичность", Значение);
КонецФункции

// Добавить параметр виртуальной таблицы.
Функция ПериодичностьЗапись() Экспорт
	Возврат Периодичность("Запись");
КонецФункции

// Добавить параметр виртуальной таблицы.
Функция ПериодичностьРегистратор() Экспорт
	Возврат Периодичность("Регистратор");
КонецФункции

// Добавить параметр виртуальной таблицы.
Функция ПериодичностьПериод() Экспорт
	Возврат Периодичность("Период");
КонецФункции

// Добавить параметр виртуальной таблицы.
Функция ПериодичностьСекунда() Экспорт
	Возврат Периодичность("Секунда");
КонецФункции

// Добавить параметр виртуальной таблицы.
Функция ПериодичностьМинута() Экспорт
	Возврат Периодичность("Минута");
КонецФункции

// Добавить параметр виртуальной таблицы.
Функция ПериодичностьЧас() Экспорт
	Возврат Периодичность("Час");
КонецФункции

// Добавить параметр виртуальной таблицы.
Функция ПериодичностьДень() Экспорт
	Возврат Периодичность("День");
КонецФункции

// Добавить параметр виртуальной таблицы.
Функция ПериодичностьНеделя() Экспорт
	Возврат Периодичность("Неделя");
КонецФункции

// Добавить параметр виртуальной таблицы.
Функция ПериодичностьДекада() Экспорт
	Возврат Периодичность("Декада");
КонецФункции

// Добавить параметр виртуальной таблицы.
Функция ПериодичностьМесяц() Экспорт
	Возврат Периодичность("Месяц");
КонецФункции

// Добавить параметр виртуальной таблицы.
Функция ПериодичностьКвартал() Экспорт
	Возврат Периодичность("Квартал");
КонецФункции

// Добавить параметр виртуальной таблицы.
Функция ПериодичностьПолугодие() Экспорт
	Возврат Периодичность("Полугодие");
КонецФункции

Функция ПериодичностьГод() Экспорт
	Возврат Периодичность("Год");
КонецФункции

// Добавить параметр виртуальной таблицы.
Функция ПериодичностьАвто() Экспорт
	Возврат Периодичность("Авто");
КонецФункции

#КонецОбласти

#Область Соединение

Функция ПолучитьИсточник(Индекс = Неопределено)
	Перем Источник;
	Если ТипЗнч(Индекс) = Тип("Строка") Тогда
		Источник = ОператорВыбрать.Источники.НайтиПоПсевдониму(Индекс);
		Если Источник = Неопределено Тогда
			Источник = ОператорВыбрать.Источники.НайтиПоИмени(Индекс);
		КонецЕсли;
		Возврат Источник;
	КонецЕсли;
	Если Индекс = Неопределено Тогда
		ВыбранныйИндекс = ОператорВыбрать.Источники.Количество() - 1;
	Иначе
		ВыбранныйИндекс = Индекс;
	КонецЕсли;
	Если ВыбранныйИндекс = -1 Тогда
		Источник = Неопределено;
		Возврат Источник;
	КонецЕсли;
	Источник = ОператорВыбрать.Источники[ВыбранныйИндекс];
	Возврат Источник;
КонецФункции

Функция ЛевоеСоединение(ПсевдонимСлева, ПсевдонимСправа) Экспорт
	Соединение = Неопределено;
	ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
	ИсточникСлева = ПолучитьИсточник(ПсевдонимСлева);
	ИсточникСправа = ПолучитьИсточник(ПсевдонимСправа);
	Возврат ЭтотОбъект;
КонецФункции

Функция ПравоеСоединение(ПсевдонимСлева, ПсевдонимСправа) Экспорт
	Соединение = Неопределено;
	ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее;
	ИсточникСлева = ПолучитьИсточник(ПсевдонимСлева);
	ИсточникСправа = ПолучитьИсточник(ПсевдонимСправа);
	Возврат ЭтотОбъект;
КонецФункции

Функция ПолноеСоединение(ПсевдонимСлева, ПсевдонимСправа) Экспорт
	Соединение = Неопределено;
	ТипСоединения = ТипСоединенияСхемыЗапроса.ПолноеВнешнее;
	ИсточникСлева = ПолучитьИсточник(ПсевдонимСлева);
	ИсточникСправа = ПолучитьИсточник(ПсевдонимСправа);
	Возврат ЭтотОбъект;
КонецФункции

Функция ВнутреннееСоединение(ПсевдонимСлева, ПсевдонимСправа) Экспорт
	Соединение = Неопределено;
	ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	ИсточникСлева = ПолучитьИсточник(ПсевдонимСлева);
	ИсточникСправа = ПолучитьИсточник(ПсевдонимСправа);
	Возврат ЭтотОбъект;
КонецФункции

// Добавить условие соединения
// 
// Параметры:
//  СоответствиеПолей - Строка - условие соединения описывается через перечисление соответствия полей: ПолеСлева = ПолеСправа[,..]
//                               Допускается указать справа параметр: ПолеСлева = &Параметр. Если поля имеют одинаковое имя слева и справа, то
//                               достаточно указать просто имя поля: Поле, ПолеСлева = ПолеСправа[,..]
// 
// Возвращаемое значение:
//  ОбработкаОбъект.бф_МодельЗапроса
Функция Связь(СоответствиеПолей) Экспорт
	Перем ДоступныеПоля;
	Если СоответствиеПолей = "*" Тогда
		ОбщиеПоля = Новый Массив;
		ДоступныеПоля = ИсточникСправа.Источник.ДоступныеПоля;
		Для Каждого ПолеСлева Из ИсточникСлева.Источник.ДоступныеПоля Цикл
			Если ДоступныеПоля.Найти(ПолеСлева.Имя) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОбщиеПоля.Добавить(ПолеСлева.Имя);
		КонецЦикла;
		Выражение = бф_МодельЗапроса.УсловиеСоединения(ОбщиеПоля);
	Иначе
		Выражение = бф_МодельЗапроса.УсловиеСоединения(СоответствиеПолей);
	КонецЕсли;
	Если Соединение = Неопределено Тогда
		Соединение = бф_МодельЗапроса.Соединение(ОператорВыбрать, ИсточникСлева, ИсточникСправа, Выражение, ТипСоединения);
		Возврат ЭтотОбъект;	
	КонецЕсли;
	Выражение = СтрЗаменить(Выражение, "%1", ИсточникСлева.Источник.Псевдоним); 
	Выражение = СтрЗаменить(Выражение, "%2", ИсточникСправа.Источник.Псевдоним); 
	бф_МодельЗапроса.ДобавитьУсловиеСоединения(Соединение, Выражение);		
	Возврат ЭтотОбъект;
КонецФункции

// Добавить условие соединения
// 
// Параметры:
//  Выражение - Строка - Выражение условия соединения
// 
// Возвращаемое значение:
//  ОбработкаОбъект.бф_МодельЗапроса
Функция УсловиеСвязи(Выражение) Экспорт
	Если Соединение = Неопределено Тогда
		Соединение = бф_МодельЗапроса.Соединение(ОператорВыбрать, ИсточникСлева, ИсточникСправа, Выражение, ТипСоединения);
		Возврат ЭтотОбъект;	
	КонецЕсли;
	Условие = Выражение;
	Если Условие = "*" Тогда
		МассивОбщихПолейИсточников = Новый Массив;
		Для каждого Поле Из ИсточникСлева.Источник.ДоступныеПоля Цикл
			Если ИсточникСправа.Источник.ДоступныеПоля.Найти(Поле.Имя) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивОбщихПолейИсточников.Добавить(ИсточникСлева.Источник.Псевдоним+"."+Поле.Имя+" = "+ИсточникСправа.Источник.Псевдоним+"."+Поле.Имя);
		КонецЦикла;
		Условие = СтрСоединить(МассивОбщихПолейИсточников, " И ");
	Иначе
		Условие = СтрЗаменить(Условие, "%1", ИсточникСлева.Источник.Псевдоним); 
		Условие = СтрЗаменить(Условие, "%2", ИсточникСправа.Источник.Псевдоним); 
	КонецЕсли;
	бф_МодельЗапроса.ДобавитьУсловиеСоединения(Соединение, Условие);	
	Возврат ЭтотОбъект;
КонецФункции

// Добавить условие соединения. См. УсловиеВхождения
// 
Функция СвязьВхождения(ИмяТаблицы, Поля = "*") Экспорт
	Возврат УсловиеСвязи(ВыражениеВхождения(ИмяТаблицы, Поля));
КонецФункции

Функция Характеристика(ПолеОбъектаИсточника, ПолеОбъектаХарактеристики, ПолеВидаХарактеристики, ВыражениеПараметраВида) Экспорт
	УсловиеСвязи(СтрШаблон("%%1.%1 = %%2.%2", ПолеОбъектаИсточника, ПолеОбъектаХарактеристики));
	УсловиеСвязи(СтрШаблон("%%2.%1 = %2", ПолеВидаХарактеристики, ВыражениеПараметраВида));
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#Область Итоги

Функция Итог(Выражение, Псевдоним) Экспорт
	ЗапросПакета.ВыраженияИтогов.Добавить(Выражение, Псевдоним);
	Возврат ЭтотОбъект;
КонецФункции

Функция ИтогСумма(Выражение, Псевдоним = "") Экспорт
	Возврат Итог(СтрШаблон("СУММА(%1)", Выражение), ?(ПустаяСтрока(Псевдоним), Выражение, Псевдоним));
КонецФункции

Функция ИтогСреднее(Выражение, Псевдоним = "") Экспорт
	Возврат Итог(СтрШаблон("СРЕДНЕЕ(%1)", Выражение), ?(ПустаяСтрока(Псевдоним), Выражение, Псевдоним));
КонецФункции

Функция ИтогКоличество(Выражение, Псевдоним = "") Экспорт
	Возврат Итог(СтрШаблон("КОЛИЧЕСТВО(%1)", Выражение), ?(ПустаяСтрока(Псевдоним), Выражение, Псевдоним));
КонецФункции

Функция ИтогКоличествоРазличных(Выражение, Псевдоним = "") Экспорт
	Возврат Итог(СтрШаблон("КОЛИЧЕСТВО(РАЗЛИЧНЫЕ %1)", Выражение), ?(ПустаяСтрока(Псевдоним), Выражение, Псевдоним));
КонецФункции

Функция ИтогМаксимум(Выражение, Псевдоним = "") Экспорт
	Возврат Итог(СтрШаблон("МАКСИМУМ(%1)", Выражение), ?(ПустаяСтрока(Псевдоним), Выражение, Псевдоним));
КонецФункции

Функция ИтогМинимум(Выражение, Псевдоним = "") Экспорт
	Возврат Итог(СтрШаблон("МИНИМИУМ(%1)", Выражение), ?(ПустаяСтрока(Псевдоним), Выражение, Псевдоним));
КонецФункции

Функция Группировка(Выражение, ИмяКолонки = "", ТипКонтрольнойТочки = Неопределено) Экспорт
	КонтрольнаяТочка = бф_МодельЗапроса.Итог(ЗапросПакета, Выражение, ?(ПустаяСтрока(ИмяКолонки), Выражение, ИмяКолонки), ТипКонтрольнойТочки);
	Возврат ЭтотОбъект;
КонецФункции

// Дополнение результата запроса датами в установленном периоде
// https://its.1c.ru/db/metod8dev/content/2660/hdoc
Функция ПоПериодам(ТипДополненияПериодами, НачалоПериода = "", КонецПериода = "") Экспорт
	КонтрольнаяТочка.ТипДополненияПериодами = ?(ТипДополненияПериодами = Неопределено, ТипДополненияПериодамиСхемыЗапроса.БезДополнения, ТипДополненияПериодами);
	КонтрольнаяТочка.НачалоПериодаДополнения = ?(ТипЗнч(НачалоПериода) = Тип("Строка"), НачалоПериода, бф_МодельЗапросаСлужебный.ФорматДатаВремя(НачалоПериода));
	КонтрольнаяТочка.КонецПериодаДополнения = ?(ТипЗнч(КонецПериода) = Тип("Строка"), КонецПериода, бф_МодельЗапросаСлужебный.ФорматДатаВремя(КонецПериода));
	Возврат ЭтотОбъект;
КонецФункции

Функция ОбщиеИтоги() Экспорт
	ЗапросПакета.ОбщиеИтоги = Истина;
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#Область Запрос

Функция Параметр(Имя, Значение) Экспорт
	Если ТипЗнч(Значение) = Тип("ДанныеФормыКоллекция") Тогда
		Параметры.Вставить(Имя, Значение.Выгрузить());
		Возврат ЭтотОбъект;
	КонецЕсли;
	Параметры.Вставить(Имя, Значение);
	Возврат ЭтотОбъект;
КонецФункции

Функция ВыполнитьЗапрос() Экспорт
	Запрос = бф_МодельЗапроса.Запрос(СхемаЗапроса, Параметры, МенеджерВременныхТаблиц);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеПоУмолчанию());
	РезультатПакета = Запрос.ВыполнитьПакет();
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#Область Результат

Функция Результат(Индекс = Неопределено) Экспорт
	Если Индекс = Неопределено Тогда
		Возврат РезультатПакета[РезультатПакета.ВГраница()];
	КонецЕсли;
	Если ТипЗнч(Индекс) = Тип("Число") Тогда
		Возврат РезультатПакета[Индекс];
	КонецЕсли;
	Возврат РезультатПакета[СтруктураЗапроса[Индекс]];
КонецФункции

Функция ВыбратьРезультат(Индекс = Неопределено, ТипОбхода = Неопределено, Группировки = Неопределено, ГруппировкиДляЗначенийГруппировок = Неопределено) Экспорт
	Результат = Результат(Индекс);
	Выборка = Результат.Выбрать();
	Возврат Выборка;
КонецФункции

Функция ВыгрузитьРезультат(Индекс = Неопределено) Экспорт
	Возврат Результат(Индекс).Выгрузить();
КонецФункции

Функция ВыбратьПервый(Индекс = Неопределено, ТипОбхода = Неопределено, Группировки = Неопределено, ГруппировкиДляЗначенийГруппировок = Неопределено) Экспорт
	Выборка = ВыбратьРезультат(Индекс, ТипОбхода, Группировки, ГруппировкиДляЗначенийГруппировок);
	Выборка.Следующий();
	Возврат Выборка;
КонецФункции

#КонецОбласти

#Область СКД

// Добавляет выбранное поле компоновки данных
//
// Параметры:
//	Куда		(КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, ВыбранныеПоляКомпоновкиДанных)
//	ИмяИлиПолеКД(Строка, ПолеКомпоновкиДанных)
//	Заголовок	(Строка) Необязательный
//
// Возвращаемое значение:
//	ВыбранноеПолеКД (ВыбранноеПолеКомпоновкиДанных)
//
Функция ДобавитьВыбранноеПолеСКД(Куда, ИмяИлиПолеКД, Заголовок = "")
	
	Если ТипЗнч(Куда) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Настройки.Выбор;
	ИначеЕсли ТипЗнч(Куда) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Выбор;
	Иначе
		ВыбранныеПоляКД = Куда;
	КонецЕсли;
	
	Если ТипЗнч(ИмяИлиПолеКД) = Тип("Строка") Тогда
		ПолеКД = Новый ПолеКомпоновкиДанных(ИмяИлиПолеКД);
	Иначе
		ПолеКД = ИмяИлиПолеКД;
	КонецЕсли;
	
	ВыбранноеПолеКД = ВыбранныеПоляКД.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКД.Поле = ПолеКД;
	Если Заголовок <> "" Тогда
		ВыбранноеПолеКД.Заголовок = Заголовок;
	КонецЕсли;
	
	Возврат ВыбранноеПолеКД;
	
КонецФункции

// Добавляет отбор в коллекцию отборов компоновщика или группы отборов
//
// Параметры:
//	ЭлементСтруктуры- элемент структуры КД
//	Поле			- имя поля, по которому добавляется отбор
//	Значение		- значение отбора КД
//	ВидСравнения	- вид сравнений КД (по умолчанию: неопределено)
//	Использование	- признак использования отбора (по умолчанию: истина)
//	ВПользовательскиеНастройки - признак добавления в пользовательсие настройки КД (по умолчанию: ложь)
//
// Возвращаемое значение:
//	ЭлементОтбора (ЭлементОтбораКомпоновкиДанных)
//
Функция ДобавитьОтборСКД(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина, ВПользовательскиеНастройки = Ложь)
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
		
		Если ВПользовательскиеНастройки Тогда
			Для Каждого ЭлементНастройки Из ЭлементСтруктуры.ПользовательскиеНастройки.Элементы Цикл
				Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ЭлементСтруктуры.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
					Отбор = ЭлементНастройки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ЭлементОтбора = Неопределено;
	Для каждого Элемент Из Отбор.Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Элемент.ЛевоеЗначение = Поле Тогда
			ЭлементОтбора = Элемент;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	ЭлементОтбора.Использование		= Использование;
	ЭлементОтбора.ЛевоеЗначение		= Поле;
	ЭлементОтбора.ВидСравнения		= ВидСравнения;
	ЭлементОтбора.ПравоеЗначение	= Значение;
	
	Возврат ЭлементОтбора;
	
КонецФункции

Функция УстановитьСхемуКомпоновкиДанных(Схема, Настройки) Экспорт
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(Схема, Настройки);
	ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных[0].Запрос;
	УстановитьТекстЗапроса(ТекстЗапроса);
	Для Каждого ЗначениеПараметра Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Параметр(ЗначениеПараметра.Имя, ЗначениеПараметра.Значение);
	КонецЦикла;
	Возврат ЭтотОбъект;
КонецФункции

Функция УстановитьСхемуТаблицыСписка(ТаблицаСписка) Экспорт
	Схема = ТаблицаСписка.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = ТаблицаСписка.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	ПоляКлюча = ТаблицаСписка.ТекущаяСтрока;
	Если ПоляКлюча <> Неопределено Тогда
		Для Каждого ПолеКлюча Из ПоляКлюча Цикл
			ДобавитьОтборСКД(Настройки.Отбор, ПолеКлюча.Ключ, ПолеКлюча.Значение, ВидСравненияКомпоновкиДанных.Равно, Истина);
		КонецЦикла;
	КонецЕсли;
	Настройки.Структура[0].Выбор.Элементы.Очистить();
	Для Каждого ДоступноеПоле Из Настройки.Структура[0].Выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если ДоступноеПоле.Таблица ИЛИ ДоступноеПоле.Папка Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьВыбранноеПолеСКД(Настройки.Структура[0].Выбор, ДоступноеПоле.Поле);
	КонецЦикла;
	УстановитьСхемуКомпоновкиДанных(Схема, Настройки);
	Возврат ЭтотОбъект;
КонецФункции

Функция УстановитьСхемуДинамическогоСписка(Список) Экспорт
	УстановитьТекстЗапроса(Список.ТекстЗапроса);
	Для Каждого ЭлементПараметра Из Список.Параметры.Элементы Цикл
		Параметр(Строка(ЭлементПараметра.Параметр), ЭлементПараметра.Значение);
	КонецЦикла;
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#Область Инициализация
СхемаЗапроса = Новый СхемаЗапроса();
МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
Параметры = Новый Структура;
Запрос = Новый Запрос;
Стек = Новый Массив;
#КонецОбласти